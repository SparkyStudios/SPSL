//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/workbudairone/na2axl/SPSL/SPSL.Language/SPSL.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using SPSL.Language.Parsing.AST;
using SPSL.Language.Parsing.Common;

namespace SPSL.Language.Core;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SPSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		KEYWORD_NAMESPACE=10, KEYWORD_ABSTRACT=11, KEYWORD_VERTEX=12, KEYWORD_FRAGMENT=13, 
		KEYWORD_PIXEL=14, KEYWORD_GEOMETRY=15, KEYWORD_HULL=16, KEYWORD_DOMAIN=17, 
		KEYWORD_COMPUTE=18, KEYWORD_GRAPHIC=19, KEYWORD_SHADER=20, KEYWORD_INTERFACE=21, 
		KEYWORD_MATERIAL=22, KEYWORD_PARTIAL=23, KEYWORD_PARAMS=24, KEYWORD_TYPE=25, 
		KEYWORD_AS=26, KEYWORD_IN=27, KEYWORD_OF=28, KEYWORD_OUT=29, KEYWORD_INOUT=30, 
		KEYWORD_EXTENDS=31, KEYWORD_IMPLEMENTS=32, KEYWORD_USE=33, KEYWORD_VAR=34, 
		KEYWORD_INPUT=35, KEYWORD_OUTPUT=36, KEYWORD_TRANSIENT=37, KEYWORD_BUFFER=38, 
		KEYWORD_OVERRIDE=39, KEYWORD_THIS=40, KEYWORD_BASE=41, KEYWORD_STRUCT=42, 
		KEYWORD_ENUM=43, KEYWORD_RETURN=44, KEYWORD_IF=45, KEYWORD_ELIF=46, KEYWORD_ELSE=47, 
		KEYWORD_SWITCH=48, KEYWORD_FOR=49, KEYWORD_DO=50, KEYWORD_WHILE=51, KEYWORD_BREAK=52, 
		KEYWORD_CONTINUE=53, KEYWORD_DISCARD=54, KEYWORD_CASE=55, KEYWORD_STATIC=56, 
		KEYWORD_CONST=57, KEYWORD_PERMUTATION=58, KEYWORD_VARIANT=59, KEYWORD_PERMUTE=60, 
		KEYWORD_STREAM=61, KEYWORD_COHERENT=62, KEYWORD_VOLATILE=63, KEYWORD_READONLY=64, 
		KEYWORD_WRITEONLY=65, KEYWORD_READWRITE=66, TYPE_VOID=67, TYPE_BOOL=68, 
		TYPE_INT=69, TYPE_UINT=70, TYPE_FLOAT=71, TYPE_DOUBLE=72, TYPE_STRING=73, 
		TYPE_VECTOR2B=74, TYPE_VECTOR2D=75, TYPE_VECTOR2F=76, TYPE_VECTOR2I=77, 
		TYPE_VECTOR2UI=78, TYPE_VECTOR3B=79, TYPE_VECTOR3D=80, TYPE_VECTOR3F=81, 
		TYPE_VECTOR3I=82, TYPE_VECTOR3UI=83, TYPE_VECTOR4B=84, TYPE_VECTOR4D=85, 
		TYPE_VECTOR4F=86, TYPE_VECTOR4I=87, TYPE_VECTOR4UI=88, TYPE_MATRIX2F=89, 
		TYPE_MATRIX3F=90, TYPE_MATRIX4F=91, TYPE_MATRIX2X3F=92, TYPE_MATRIX2X4F=93, 
		TYPE_MATRIX3X2F=94, TYPE_MATRIX3X4F=95, TYPE_MATRIX4X2F=96, TYPE_MATRIX4X3F=97, 
		TYPE_MATRIX2D=98, TYPE_MATRIX3D=99, TYPE_MATRIX4D=100, TYPE_MATRIX2X3D=101, 
		TYPE_MATRIX2X4D=102, TYPE_MATRIX3X2D=103, TYPE_MATRIX3X4D=104, TYPE_MATRIX4X2D=105, 
		TYPE_MATRIX4X3D=106, TYPE_COLOR3=107, TYPE_COLOR4=108, TYPE_SAMPLER=109, 
		TYPE_TEXTURE1D=110, TYPE_TEXTURE2D=111, TYPE_TEXTURE1DARRAY=112, TYPE_TEXTURE2DARRAY=113, 
		TYPE_TEXTURE3D=114, TYPE_CUBEMAP=115, TYPE_CUBEMAPARRAY=116, TOK_OPEN_PAREN=117, 
		TOK_CLOSE_PAREN=118, TOK_OPEN_BRACKET=119, TOK_CLOSE_BRACKET=120, TOK_OPEN_BRACE=121, 
		TOK_CLOSE_BRACE=122, TOK_DOT=123, TOK_UNDERSCORE=124, TOK_TILDE=125, TOK_QUESTION=126, 
		TOK_COLON=127, TOK_SEMICOLON=128, TOK_COMMA=129, TOK_HASHTAG=130, TOK_DOLLAR=131, 
		TOK_AT=132, TOK_BACKSLASH=133, TOK_NAMESPACE_SEPARATOR=134, OP_PIPE=135, 
		OP_AMPERSAND=136, OP_PLUS=137, OP_MINUS=138, OP_ASTERISK=139, OP_EXPONENT=140, 
		OP_MODULUS=141, OP_DIV=142, OP_ASSIGN=143, OP_EQUAL=144, OP_DIFFERENT=145, 
		OP_GREATER_THAN=146, OP_LESSER_THAN=147, OP_GEQ_THAN=148, OP_LEQ_THAN=149, 
		OP_INCREMENT=150, OP_DECREMENT=151, OP_PLUS_ASSIGN=152, OP_MINUS_ASSIGN=153, 
		OP_MUL_ASSIGN=154, OP_DIV_ASSIGN=155, OP_MODULUS_ASSIGN=156, OP_BITWISE_OR_ASSIGN=157, 
		OP_BITWISE_AND_ASSIGN=158, OP_EXPONENT_ASSIGN=159, OP_LSHIFT_ASSIGN=160, 
		OP_RSHIFT_ASSIGN=161, OP_OR=162, OP_AND=163, OP_NOT=164, OP_XOR=165, OP_LSHIFT=166, 
		OP_RSHIFT=167, WHITESPACE=168, DOC_COMMENT=169, BLOCK_COMMENT=170, LINE_COMMENT=171, 
		BoolLiteral=172, DoubleLiteral=173, FloatLiteral=174, IntegerLiteral=175, 
		UnsignedIntegerLiteral=176, StringLiteral=177, IDENTIFIER=178;
	public const int
		RULE_shaderFile = 0, RULE_materialFile = 1, RULE_namespaceDefinition = 2, 
		RULE_namespacedTypeName = 3, RULE_fileLevelDefinition = 4, RULE_globalVariable = 5, 
		RULE_permutationVariableBool = 6, RULE_permutationVariableEnum = 7, RULE_permutationVariableInteger = 8, 
		RULE_permutationVariable = 9, RULE_materialVariant = 10, RULE_materialVariantValue = 11, 
		RULE_type = 12, RULE_structDefinition = 13, RULE_enumDefinition = 14, 
		RULE_interface = 15, RULE_interfaceDefinition = 16, RULE_interfacesList = 17, 
		RULE_shaderFragment = 18, RULE_shaderFragmentDefinition = 19, RULE_shader = 20, 
		RULE_material = 21, RULE_stream = 22, RULE_materialDefinition = 23, RULE_shaderDefinition = 24, 
		RULE_useNamespaceDirective = 25, RULE_useFragmentDirective = 26, RULE_streamProperty = 27, 
		RULE_shaderMember = 28, RULE_samplerState = 29, RULE_samplerStateProperty = 30, 
		RULE_materialMember = 31, RULE_materialShaderUsageDefinition = 32, RULE_materialShaderUsage = 33, 
		RULE_annotation = 34, RULE_directive = 35, RULE_precisionDirective = 36, 
		RULE_shaderLangDirective = 37, RULE_materialParams = 38, RULE_materialState = 39, 
		RULE_materialStateComponent = 40, RULE_bufferDefinition = 41, RULE_bufferComponent = 42, 
		RULE_materialParamsComponent = 43, RULE_structComponent = 44, RULE_enumComponent = 45, 
		RULE_variableDeclaration = 46, RULE_variableDeclarationAssignment = 47, 
		RULE_variableIdentity = 48, RULE_shaderFunction = 49, RULE_function = 50, 
		RULE_functionHead = 51, RULE_functionSignature = 52, RULE_argList = 53, 
		RULE_argDef = 54, RULE_functionBody = 55, RULE_statementBlock = 56, RULE_referencableExpression = 57, 
		RULE_chainableExpression = 58, RULE_chainedExpression = 59, RULE_assignableChainableExpression = 60, 
		RULE_assignableChainedExpression = 61, RULE_propertyMemberReferenceExpression = 62, 
		RULE_methodMemberReferenceExpression = 63, RULE_memberReferenceExpression = 64, 
		RULE_invocationExpression = 65, RULE_permuteStatement = 66, RULE_ifStatement = 67, 
		RULE_elifStatement = 68, RULE_elseStatement = 69, RULE_switchStatement = 70, 
		RULE_caseStatement = 71, RULE_whileStatement = 72, RULE_forStatement = 73, 
		RULE_doWhileStatement = 74, RULE_parenthesizedExpression = 75, RULE_newInstanceExpression = 76, 
		RULE_parametersList = 77, RULE_contextAccessExpression = 78, RULE_basicExpression = 79, 
		RULE_initializationExpression = 80, RULE_expressionStatement = 81, RULE_arrayAccessExpression = 82, 
		RULE_assignableExpression = 83, RULE_returnStatement = 84, RULE_breakStatement = 85, 
		RULE_continueStatement = 86, RULE_discardStatement = 87, RULE_leaveControlFlowStatement = 88, 
		RULE_stayControlFlowStatement = 89, RULE_statement = 90, RULE_primitiveExpression = 91, 
		RULE_constantExpression = 92, RULE_languageDataType = 93, RULE_customDataType = 94, 
		RULE_dataType = 95, RULE_userDefinedDataType = 96, RULE_primitiveDataType = 97, 
		RULE_builtinDataType = 98;
	public static readonly string[] ruleNames = {
		"shaderFile", "materialFile", "namespaceDefinition", "namespacedTypeName", 
		"fileLevelDefinition", "globalVariable", "permutationVariableBool", "permutationVariableEnum", 
		"permutationVariableInteger", "permutationVariable", "materialVariant", 
		"materialVariantValue", "type", "structDefinition", "enumDefinition", 
		"interface", "interfaceDefinition", "interfacesList", "shaderFragment", 
		"shaderFragmentDefinition", "shader", "material", "stream", "materialDefinition", 
		"shaderDefinition", "useNamespaceDirective", "useFragmentDirective", "streamProperty", 
		"shaderMember", "samplerState", "samplerStateProperty", "materialMember", 
		"materialShaderUsageDefinition", "materialShaderUsage", "annotation", 
		"directive", "precisionDirective", "shaderLangDirective", "materialParams", 
		"materialState", "materialStateComponent", "bufferDefinition", "bufferComponent", 
		"materialParamsComponent", "structComponent", "enumComponent", "variableDeclaration", 
		"variableDeclarationAssignment", "variableIdentity", "shaderFunction", 
		"function", "functionHead", "functionSignature", "argList", "argDef", 
		"functionBody", "statementBlock", "referencableExpression", "chainableExpression", 
		"chainedExpression", "assignableChainableExpression", "assignableChainedExpression", 
		"propertyMemberReferenceExpression", "methodMemberReferenceExpression", 
		"memberReferenceExpression", "invocationExpression", "permuteStatement", 
		"ifStatement", "elifStatement", "elseStatement", "switchStatement", "caseStatement", 
		"whileStatement", "forStatement", "doWhileStatement", "parenthesizedExpression", 
		"newInstanceExpression", "parametersList", "contextAccessExpression", 
		"basicExpression", "initializationExpression", "expressionStatement", 
		"arrayAccessExpression", "assignableExpression", "returnStatement", "breakStatement", 
		"continueStatement", "discardStatement", "leaveControlFlowStatement", 
		"stayControlFlowStatement", "statement", "primitiveExpression", "constantExpression", 
		"languageDataType", "customDataType", "dataType", "userDefinedDataType", 
		"primitiveDataType", "builtinDataType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'precision'", "'low'", "'medium'", "'high'", "'shaderLang'", "'GLSL'", 
		"'HLSL'", "'MSL'", "'state'", "'namespace'", "'abstract'", "'vertex'", 
		"'fragment'", "'pixel'", "'geometry'", "'hull'", "'domain'", "'compute'", 
		"'graphic'", "'shader'", "'interface'", "'material'", "'partial'", "'params'", 
		"'type'", "'as'", "'in'", "'of'", "'out'", "'inout'", "'extends'", "'implements'", 
		"'use'", "'var'", "'input'", "'output'", "'transient'", "'buffer'", "'override'", 
		"'this'", "'base'", "'struct'", "'enum'", "'return'", "'if'", "'elif'", 
		"'else'", "'switch'", "'for'", "'do'", "'while'", "'break'", "'continue'", 
		"'discard'", "'case'", "'static'", "'const'", "'permutation'", "'variant'", 
		"'permute'", "'stream'", "'coherent'", "'volatile'", "'readonly'", "'writeonly'", 
		"'readwrite'", "'void'", "'bool'", "'int'", "'uint'", "'float'", "'double'", 
		"'string'", "'vec2b'", "'vec2d'", "'vec2f'", "'vec2i'", "'vec2ui'", "'vec3b'", 
		"'vec3d'", "'vec3f'", "'vec3i'", "'vec3ui'", "'vec4b'", "'vec4d'", "'vec4f'", 
		"'vec4i'", "'vec4ui'", "'mat2f'", "'mat3f'", "'mat4f'", "'mat2x3f'", "'mat2x4f'", 
		"'mat3x2f'", "'mat3x4f'", "'mat4x2f'", "'mat4x3f'", "'mat2d'", "'mat3d'", 
		"'mat4d'", "'mat2x3d'", "'mat2x4d'", "'mat3x2d'", "'mat3x4d'", "'mat4x2d'", 
		"'mat4x3d'", "'color3'", "'color4'", "'sampler'", "'tex1d'", "'tex2d'", 
		"'arraytex1d'", "'arraytex2d'", "'tex3d'", "'texcube'", "'arraytexcube'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'.'", "'_'", "'~'", "'?'", 
		"':'", "';'", "','", "'#'", "'$'", "'@'", "'\\'", "'::'", "'|'", "'&'", 
		"'+'", "'-'", "'*'", "'^'", "'%'", "'/'", "'='", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'|='", "'&='", "'^='", "'<<='", "'>>='", null, null, null, "'^^'", 
		"'<<'", "'>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "KEYWORD_NAMESPACE", 
		"KEYWORD_ABSTRACT", "KEYWORD_VERTEX", "KEYWORD_FRAGMENT", "KEYWORD_PIXEL", 
		"KEYWORD_GEOMETRY", "KEYWORD_HULL", "KEYWORD_DOMAIN", "KEYWORD_COMPUTE", 
		"KEYWORD_GRAPHIC", "KEYWORD_SHADER", "KEYWORD_INTERFACE", "KEYWORD_MATERIAL", 
		"KEYWORD_PARTIAL", "KEYWORD_PARAMS", "KEYWORD_TYPE", "KEYWORD_AS", "KEYWORD_IN", 
		"KEYWORD_OF", "KEYWORD_OUT", "KEYWORD_INOUT", "KEYWORD_EXTENDS", "KEYWORD_IMPLEMENTS", 
		"KEYWORD_USE", "KEYWORD_VAR", "KEYWORD_INPUT", "KEYWORD_OUTPUT", "KEYWORD_TRANSIENT", 
		"KEYWORD_BUFFER", "KEYWORD_OVERRIDE", "KEYWORD_THIS", "KEYWORD_BASE", 
		"KEYWORD_STRUCT", "KEYWORD_ENUM", "KEYWORD_RETURN", "KEYWORD_IF", "KEYWORD_ELIF", 
		"KEYWORD_ELSE", "KEYWORD_SWITCH", "KEYWORD_FOR", "KEYWORD_DO", "KEYWORD_WHILE", 
		"KEYWORD_BREAK", "KEYWORD_CONTINUE", "KEYWORD_DISCARD", "KEYWORD_CASE", 
		"KEYWORD_STATIC", "KEYWORD_CONST", "KEYWORD_PERMUTATION", "KEYWORD_VARIANT", 
		"KEYWORD_PERMUTE", "KEYWORD_STREAM", "KEYWORD_COHERENT", "KEYWORD_VOLATILE", 
		"KEYWORD_READONLY", "KEYWORD_WRITEONLY", "KEYWORD_READWRITE", "TYPE_VOID", 
		"TYPE_BOOL", "TYPE_INT", "TYPE_UINT", "TYPE_FLOAT", "TYPE_DOUBLE", "TYPE_STRING", 
		"TYPE_VECTOR2B", "TYPE_VECTOR2D", "TYPE_VECTOR2F", "TYPE_VECTOR2I", "TYPE_VECTOR2UI", 
		"TYPE_VECTOR3B", "TYPE_VECTOR3D", "TYPE_VECTOR3F", "TYPE_VECTOR3I", "TYPE_VECTOR3UI", 
		"TYPE_VECTOR4B", "TYPE_VECTOR4D", "TYPE_VECTOR4F", "TYPE_VECTOR4I", "TYPE_VECTOR4UI", 
		"TYPE_MATRIX2F", "TYPE_MATRIX3F", "TYPE_MATRIX4F", "TYPE_MATRIX2X3F", 
		"TYPE_MATRIX2X4F", "TYPE_MATRIX3X2F", "TYPE_MATRIX3X4F", "TYPE_MATRIX4X2F", 
		"TYPE_MATRIX4X3F", "TYPE_MATRIX2D", "TYPE_MATRIX3D", "TYPE_MATRIX4D", 
		"TYPE_MATRIX2X3D", "TYPE_MATRIX2X4D", "TYPE_MATRIX3X2D", "TYPE_MATRIX3X4D", 
		"TYPE_MATRIX4X2D", "TYPE_MATRIX4X3D", "TYPE_COLOR3", "TYPE_COLOR4", "TYPE_SAMPLER", 
		"TYPE_TEXTURE1D", "TYPE_TEXTURE2D", "TYPE_TEXTURE1DARRAY", "TYPE_TEXTURE2DARRAY", 
		"TYPE_TEXTURE3D", "TYPE_CUBEMAP", "TYPE_CUBEMAPARRAY", "TOK_OPEN_PAREN", 
		"TOK_CLOSE_PAREN", "TOK_OPEN_BRACKET", "TOK_CLOSE_BRACKET", "TOK_OPEN_BRACE", 
		"TOK_CLOSE_BRACE", "TOK_DOT", "TOK_UNDERSCORE", "TOK_TILDE", "TOK_QUESTION", 
		"TOK_COLON", "TOK_SEMICOLON", "TOK_COMMA", "TOK_HASHTAG", "TOK_DOLLAR", 
		"TOK_AT", "TOK_BACKSLASH", "TOK_NAMESPACE_SEPARATOR", "OP_PIPE", "OP_AMPERSAND", 
		"OP_PLUS", "OP_MINUS", "OP_ASTERISK", "OP_EXPONENT", "OP_MODULUS", "OP_DIV", 
		"OP_ASSIGN", "OP_EQUAL", "OP_DIFFERENT", "OP_GREATER_THAN", "OP_LESSER_THAN", 
		"OP_GEQ_THAN", "OP_LEQ_THAN", "OP_INCREMENT", "OP_DECREMENT", "OP_PLUS_ASSIGN", 
		"OP_MINUS_ASSIGN", "OP_MUL_ASSIGN", "OP_DIV_ASSIGN", "OP_MODULUS_ASSIGN", 
		"OP_BITWISE_OR_ASSIGN", "OP_BITWISE_AND_ASSIGN", "OP_EXPONENT_ASSIGN", 
		"OP_LSHIFT_ASSIGN", "OP_RSHIFT_ASSIGN", "OP_OR", "OP_AND", "OP_NOT", "OP_XOR", 
		"OP_LSHIFT", "OP_RSHIFT", "WHITESPACE", "DOC_COMMENT", "BLOCK_COMMENT", 
		"LINE_COMMENT", "BoolLiteral", "DoubleLiteral", "FloatLiteral", "IntegerLiteral", 
		"UnsignedIntegerLiteral", "StringLiteral", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SPSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SPSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SPSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SPSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ShaderFileContext : ParserRuleContext {
		public DirectiveContext Directives;
		public NamespaceDefinitionContext Namespace;
		public FileLevelDefinitionContext FileLevelDefinitions;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SPSLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseNamespaceDirectiveContext[] useNamespaceDirective() {
			return GetRuleContexts<UseNamespaceDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseNamespaceDirectiveContext useNamespaceDirective(int i) {
			return GetRuleContext<UseNamespaceDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDefinitionContext namespaceDefinition() {
			return GetRuleContext<NamespaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelDefinitionContext[] fileLevelDefinition() {
			return GetRuleContexts<FileLevelDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelDefinitionContext fileLevelDefinition(int i) {
			return GetRuleContext<FileLevelDefinitionContext>(i);
		}
		public ShaderFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFileContext shaderFile() {
		ShaderFileContext _localctx = new ShaderFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_shaderFile);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 198;
				Match(DOC_COMMENT);
				}
				break;
			}
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_HASHTAG) {
				{
				{
				State = 201;
				_localctx.Directives = directive();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_NAMESPACE) {
				{
				State = 207;
				_localctx.Namespace = namespaceDefinition();
				}
			}

			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 213;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 210;
						Match(DOC_COMMENT);
						}
						}
						State = 215;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 216;
					useNamespaceDirective();
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 288230376188934144L) != 0) || _la==TOK_AT || _la==DOC_COMMENT) {
				{
				{
				State = 222;
				_localctx.FileLevelDefinitions = fileLevelDefinition();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 228;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialFileContext : ParserRuleContext {
		public DirectiveContext Directives;
		public NamespaceDefinitionContext Namespace;
		public MaterialContext Material;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SPSLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialContext material() {
			return GetRuleContext<MaterialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseNamespaceDirectiveContext[] useNamespaceDirective() {
			return GetRuleContexts<UseNamespaceDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseNamespaceDirectiveContext useNamespaceDirective(int i) {
			return GetRuleContext<UseNamespaceDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDefinitionContext namespaceDefinition() {
			return GetRuleContext<NamespaceDefinitionContext>(0);
		}
		public MaterialFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialFileContext materialFile() {
		MaterialFileContext _localctx = new MaterialFileContext(Context, State);
		EnterRule(_localctx, 2, RULE_materialFile);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 230;
				Match(DOC_COMMENT);
				}
				break;
			}
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_HASHTAG) {
				{
				{
				State = 233;
				_localctx.Directives = directive();
				}
				}
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_NAMESPACE) {
				{
				State = 239;
				_localctx.Namespace = namespaceDefinition();
				}
			}

			State = 251;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 242;
						Match(DOC_COMMENT);
						}
						}
						State = 247;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 248;
					useNamespaceDirective();
					}
					} 
				}
				State = 253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 254;
			_localctx.Material = material();
			State = 255;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDefinitionContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_NAMESPACE() { return GetToken(SPSLParser.KEYWORD_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public NamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDefinitionContext namespaceDefinition() {
		NamespaceDefinitionContext _localctx = new NamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(KEYWORD_NAMESPACE);
			State = 258;
			_localctx.Name = namespacedTypeName();
			State = 259;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacedTypeNameContext : ParserRuleContext {
		public IToken _IDENTIFIER;
		public IList<IToken> _Name = new List<IToken>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_NAMESPACE_SEPARATOR() { return GetTokens(SPSLParser.TOK_NAMESPACE_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_NAMESPACE_SEPARATOR(int i) {
			return GetToken(SPSLParser.TOK_NAMESPACE_SEPARATOR, i);
		}
		public NamespacedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNamespacedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNamespacedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacedTypeNameContext namespacedTypeName() {
		NamespacedTypeNameContext _localctx = new NamespacedTypeNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespacedTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			_localctx._IDENTIFIER = Match(IDENTIFIER);
			_localctx._Name.Add(_localctx._IDENTIFIER);
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_NAMESPACE_SEPARATOR) {
				{
				{
				State = 262;
				Match(TOK_NAMESPACE_SEPARATOR);
				State = 263;
				_localctx._IDENTIFIER = Match(IDENTIFIER);
				_localctx._Name.Add(_localctx._IDENTIFIER);
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileLevelDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext permutationVariable() {
			return GetRuleContext<PermutationVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface() {
			return GetRuleContext<InterfaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFragmentContext shaderFragment() {
			return GetRuleContext<ShaderFragmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderContext shader() {
			return GetRuleContext<ShaderContext>(0);
		}
		public FileLevelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileLevelDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFileLevelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFileLevelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileLevelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileLevelDefinitionContext fileLevelDefinition() {
		FileLevelDefinitionContext _localctx = new FileLevelDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_fileLevelDefinition);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269;
				permutationVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270;
				type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271;
				@interface();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 272;
				shaderFragment();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 273;
				shader();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public bool IsStatic;
		public IToken Documentation;
		public DataTypeContext Type;
		public VariableDeclarationAssignmentContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STATIC() { return GetToken(SPSLParser.KEYWORD_STATIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 10, RULE_globalVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 276;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_STATIC) {
				{
				State = 279;
				Match(KEYWORD_STATIC);
				_localctx.IsStatic =  true;
				}
			}

			State = 283;
			Match(KEYWORD_CONST);
			State = 284;
			_localctx.Type = dataType();
			State = 285;
			_localctx.Definition = variableDeclarationAssignment();
			State = 286;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableBoolContext : ParserRuleContext {
		public IToken Documentation;
		public BasicExpressionContext Identifier;
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(SPSLParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(SPSLParser.BoolLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public PermutationVariableBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableBoolContext permutationVariableBool() {
		PermutationVariableBoolContext _localctx = new PermutationVariableBoolContext(Context, State);
		EnterRule(_localctx, 12, RULE_permutationVariableBool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 288;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 291;
			Match(KEYWORD_PERMUTATION);
			State = 292;
			Match(TYPE_BOOL);
			State = 293;
			_localctx.Identifier = basicExpression();
			State = 294;
			Match(OP_ASSIGN);
			State = 295;
			_localctx.Value = Match(BoolLiteral);
			State = 296;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableEnumContext : ParserRuleContext {
		public IToken Documentation;
		public BasicExpressionContext Identifier;
		public IToken _IDENTIFIER;
		public IList<IToken> _EnumValues = new List<IToken>();
		public BasicExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ENUM() { return GetToken(SPSLParser.KEYWORD_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext[] basicExpression() {
			return GetRuleContexts<BasicExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression(int i) {
			return GetRuleContext<BasicExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public PermutationVariableEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableEnumContext permutationVariableEnum() {
		PermutationVariableEnumContext _localctx = new PermutationVariableEnumContext(Context, State);
		EnterRule(_localctx, 14, RULE_permutationVariableEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 298;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 301;
			Match(KEYWORD_PERMUTATION);
			State = 302;
			Match(KEYWORD_ENUM);
			State = 303;
			_localctx.Identifier = basicExpression();
			State = 304;
			Match(TOK_OPEN_BRACE);
			State = 305;
			_localctx._IDENTIFIER = Match(IDENTIFIER);
			_localctx._EnumValues.Add(_localctx._IDENTIFIER);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 306;
				Match(TOK_COMMA);
				State = 307;
				_localctx._IDENTIFIER = Match(IDENTIFIER);
				_localctx._EnumValues.Add(_localctx._IDENTIFIER);
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 313;
			Match(TOK_CLOSE_BRACE);
			State = 314;
			Match(OP_ASSIGN);
			State = 315;
			_localctx.Value = basicExpression();
			State = 316;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableIntegerContext : ParserRuleContext {
		public IToken Documentation;
		public AnnotationContext _annotation;
		public IList<AnnotationContext> _Annotations = new List<AnnotationContext>();
		public BasicExpressionContext Identifier;
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(SPSLParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PermutationVariableIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableIntegerContext permutationVariableInteger() {
		PermutationVariableIntegerContext _localctx = new PermutationVariableIntegerContext(Context, State);
		EnterRule(_localctx, 16, RULE_permutationVariableInteger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 318;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 321;
				_localctx._annotation = annotation();
				_localctx._Annotations.Add(_localctx._annotation);
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 327;
			Match(KEYWORD_PERMUTATION);
			State = 328;
			Match(TYPE_INT);
			State = 329;
			_localctx.Identifier = basicExpression();
			State = 330;
			Match(OP_ASSIGN);
			State = 331;
			_localctx.Value = Match(IntegerLiteral);
			State = 332;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableBoolContext permutationVariableBool() {
			return GetRuleContext<PermutationVariableBoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableEnumContext permutationVariableEnum() {
			return GetRuleContext<PermutationVariableEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableIntegerContext permutationVariableInteger() {
			return GetRuleContext<PermutationVariableIntegerContext>(0);
		}
		public PermutationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableContext permutationVariable() {
		PermutationVariableContext _localctx = new PermutationVariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_permutationVariable);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334;
				permutationVariableBool();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335;
				permutationVariableEnum();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 336;
				permutationVariableInteger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialVariantContext : ParserRuleContext {
		public IToken Documentation;
		public IToken Name;
		public MaterialVariantValueContext _materialVariantValue;
		public IList<MaterialVariantValueContext> _Values = new List<MaterialVariantValueContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VARIANT() { return GetToken(SPSLParser.KEYWORD_VARIANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialVariantValueContext[] materialVariantValue() {
			return GetRuleContexts<MaterialVariantValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialVariantValueContext materialVariantValue(int i) {
			return GetRuleContext<MaterialVariantValueContext>(i);
		}
		public MaterialVariantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialVariant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialVariant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialVariant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialVariant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialVariantContext materialVariant() {
		MaterialVariantContext _localctx = new MaterialVariantContext(Context, State);
		EnterRule(_localctx, 20, RULE_materialVariant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 339;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 342;
			Match(KEYWORD_VARIANT);
			State = 343;
			_localctx.Name = Match(IDENTIFIER);
			State = 344;
			Match(TOK_OPEN_BRACE);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 345;
				_localctx._materialVariantValue = materialVariantValue();
				_localctx._Values.Add(_localctx._materialVariantValue);
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 351;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialVariantValueContext : ParserRuleContext {
		public IToken Name;
		public ConstantExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public MaterialVariantValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialVariantValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialVariantValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialVariantValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialVariantValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialVariantValueContext materialVariantValue() {
		MaterialVariantValueContext _localctx = new MaterialVariantValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_materialVariantValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			_localctx.Name = Match(IDENTIFIER);
			State = 354;
			Match(OP_ASSIGN);
			State = 355;
			_localctx.Value = constantExpression();
			State = 356;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumContext : TypeContext {
		public IToken Documentation;
		public EnumDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumComponentContext[] enumComponent() {
			return GetRuleContexts<EnumComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumComponentContext enumComponent(int i) {
			return GetRuleContext<EnumComponentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public EnumContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructContext : TypeContext {
		public IToken Documentation;
		public StructDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructComponentContext[] structComponent() {
			return GetRuleContexts<StructComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructComponentContext structComponent(int i) {
			return GetRuleContext<StructComponentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public StructContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_type);
		int _la;
		try {
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				_localctx = new StructContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOC_COMMENT) {
					{
					State = 358;
					((StructContext)_localctx).Documentation = Match(DOC_COMMENT);
					}
				}

				State = 361;
				((StructContext)_localctx).Definition = structDefinition();
				State = 362;
				Match(TOK_OPEN_BRACE);
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 1125899906842623L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 70506183131137L) != 0)) {
					{
					{
					State = 363;
					structComponent();
					}
					}
					State = 368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 369;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			case 2:
				_localctx = new EnumContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOC_COMMENT) {
					{
					State = 371;
					((EnumContext)_localctx).Documentation = Match(DOC_COMMENT);
					}
				}

				State = 374;
				((EnumContext)_localctx).Definition = enumDefinition();
				State = 375;
				Match(TOK_OPEN_BRACE);
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 70506183131137L) != 0)) {
					{
					{
					State = 376;
					enumComponent();
					}
					}
					State = 381;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 382;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public IToken Name;
		public NamespacedTypeNameContext ExtendedType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TYPE() { return GetToken(SPSLParser.KEYWORD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STRUCT() { return GetToken(SPSLParser.KEYWORD_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			Match(KEYWORD_TYPE);
			State = 387;
			_localctx.Name = Match(IDENTIFIER);
			State = 388;
			Match(KEYWORD_AS);
			State = 389;
			Match(KEYWORD_STRUCT);
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 390;
				Match(KEYWORD_EXTENDS);
				State = 391;
				_localctx.ExtendedType = namespacedTypeName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TYPE() { return GetToken(SPSLParser.KEYWORD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ENUM() { return GetToken(SPSLParser.KEYWORD_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(KEYWORD_TYPE);
			State = 395;
			_localctx.Name = Match(IDENTIFIER);
			State = 396;
			Match(KEYWORD_AS);
			State = 397;
			Match(KEYWORD_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		public IToken Documentation;
		public InterfaceDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDefinitionContext interfaceDefinition() {
			return GetRuleContext<InterfaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext[] functionHead() {
			return GetRuleContexts<FunctionHeadContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead(int i) {
			return GetRuleContext<FunctionHeadContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_SEMICOLON() { return GetTokens(SPSLParser.TOK_SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON(int i) {
			return GetToken(SPSLParser.TOK_SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 30, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 399;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 402;
			_localctx.Definition = interfaceDefinition();
			State = 403;
			Match(TOK_OPEN_BRACE);
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 1125899906842623L) != 0) || _la==DOC_COMMENT || _la==IDENTIFIER) {
				{
				{
				State = 404;
				functionHead();
				State = 405;
				Match(TOK_SEMICOLON);
				}
				}
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 412;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDefinitionContext : ParserRuleContext {
		public IToken Name;
		public InterfacesListContext ExtendedInterfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INTERFACE() { return GetToken(SPSLParser.KEYWORD_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public InterfaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterfaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterfaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefinitionContext interfaceDefinition() {
		InterfaceDefinitionContext _localctx = new InterfaceDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_interfaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(KEYWORD_INTERFACE);
			State = 415;
			_localctx.Name = Match(IDENTIFIER);
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 416;
				Match(KEYWORD_EXTENDS);
				State = 417;
				_localctx.ExtendedInterfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfacesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext[] namespacedTypeName() {
			return GetRuleContexts<NamespacedTypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName(int i) {
			return GetRuleContext<NamespacedTypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public InterfacesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfacesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterfacesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterfacesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfacesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfacesListContext interfacesList() {
		InterfacesListContext _localctx = new InterfacesListContext(Context, State);
		EnterRule(_localctx, 34, RULE_interfacesList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			namespacedTypeName();
			State = 425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 421;
				Match(TOK_COMMA);
				State = 422;
				namespacedTypeName();
				}
				}
				State = 427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFragmentContext : ParserRuleContext {
		public IToken Documentation;
		public ShaderFragmentDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFragmentDefinitionContext shaderFragmentDefinition() {
			return GetRuleContext<ShaderFragmentDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext[] shaderMember() {
			return GetRuleContexts<ShaderMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext shaderMember(int i) {
			return GetRuleContext<ShaderMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext[] permutationVariable() {
			return GetRuleContexts<PermutationVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext permutationVariable(int i) {
			return GetRuleContext<PermutationVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public ShaderFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFragment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFragment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFragment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFragmentContext shaderFragment() {
		ShaderFragmentContext _localctx = new ShaderFragmentContext(Context, State);
		EnterRule(_localctx, 36, RULE_shaderFragment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 428;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 431;
			_localctx.Definition = shaderFragmentDefinition();
			State = 432;
			Match(TOK_OPEN_BRACE);
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7421933019163787264L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9007199254740991L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 70506183131137L) != 0)) {
				{
				State = 435;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 433;
					shaderMember();
					}
					break;
				case 2:
					{
					State = 434;
					permutationVariable();
					}
					break;
				}
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 440;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFragmentDefinitionContext : ParserRuleContext {
		public IToken Name;
		public NamespacedTypeNameContext ExtendedFragment;
		public InterfacesListContext ExtendedInterfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FRAGMENT() { return GetToken(SPSLParser.KEYWORD_FRAGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public ShaderFragmentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFragmentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFragmentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFragmentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFragmentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFragmentDefinitionContext shaderFragmentDefinition() {
		ShaderFragmentDefinitionContext _localctx = new ShaderFragmentDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_shaderFragmentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			Match(KEYWORD_FRAGMENT);
			State = 443;
			_localctx.Name = Match(IDENTIFIER);
			State = 446;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 444;
				Match(KEYWORD_EXTENDS);
				State = 445;
				_localctx.ExtendedFragment = namespacedTypeName();
				}
			}

			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_IMPLEMENTS) {
				{
				State = 448;
				Match(KEYWORD_IMPLEMENTS);
				State = 449;
				_localctx.ExtendedInterfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderContext : ParserRuleContext {
		public IToken Documentation;
		public ShaderDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDefinitionContext shaderDefinition() {
			return GetRuleContext<ShaderDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext[] shaderMember() {
			return GetRuleContexts<ShaderMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext shaderMember(int i) {
			return GetRuleContext<ShaderMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public ShaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderContext shader() {
		ShaderContext _localctx = new ShaderContext(Context, State);
		EnterRule(_localctx, 40, RULE_shader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 452;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 455;
			_localctx.Definition = shaderDefinition();
			State = 456;
			Match(TOK_OPEN_BRACE);
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7133702643012075520L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 9007199254740991L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 70506183131137L) != 0)) {
				{
				{
				State = 457;
				shaderMember();
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 463;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialContext : ParserRuleContext {
		public IToken Documentation;
		public MaterialDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialDefinitionContext materialDefinition() {
			return GetRuleContext<MaterialDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialMemberContext[] materialMember() {
			return GetRuleContexts<MaterialMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialMemberContext materialMember(int i) {
			return GetRuleContext<MaterialMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseFragmentDirectiveContext[] useFragmentDirective() {
			return GetRuleContexts<UseFragmentDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseFragmentDirectiveContext useFragmentDirective(int i) {
			return GetRuleContext<UseFragmentDirectiveContext>(i);
		}
		public MaterialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_material; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialContext material() {
		MaterialContext _localctx = new MaterialContext(Context, State);
		EnterRule(_localctx, 42, RULE_material);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 465;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 468;
			_localctx.Definition = materialDefinition();
			State = 469;
			Match(TOK_OPEN_BRACE);
			State = 482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 576461310707892736L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 1125899906842623L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 70506183131137L) != 0)) {
				{
				{
				State = 473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 470;
						Match(DOC_COMMENT);
						}
						} 
					}
					State = 475;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
				}
				State = 478;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 476;
					materialMember();
					}
					break;
				case 2:
					{
					State = 477;
					useFragmentDirective();
					}
					break;
				}
				}
				}
				State = 484;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 485;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreamContext : ParserRuleContext {
		public bool IsPartial;
		public IToken Documentation;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STREAM() { return GetToken(SPSLParser.KEYWORD_STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StreamPropertyContext[] streamProperty() {
			return GetRuleContexts<StreamPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreamPropertyContext streamProperty(int i) {
			return GetRuleContext<StreamPropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		public StreamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStream(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStream(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStream(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreamContext stream() {
		StreamContext _localctx = new StreamContext(Context, State);
		EnterRule(_localctx, 44, RULE_stream);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 487;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 490;
			Match(KEYWORD_STREAM);
			State = 491;
			Match(TOK_OPEN_BRACE);
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0) || _la==TOK_AT || _la==DOC_COMMENT) {
				{
				{
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 492;
					Match(DOC_COMMENT);
					}
					}
					State = 497;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 498;
				streamProperty();
				}
				}
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 504;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialDefinitionContext : ParserRuleContext {
		public bool IsAbstract;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedMaterial;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_MATERIAL() { return GetToken(SPSLParser.KEYWORD_MATERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public MaterialDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialDefinitionContext materialDefinition() {
		MaterialDefinitionContext _localctx = new MaterialDefinitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_materialDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ABSTRACT) {
				{
				State = 506;
				Match(KEYWORD_ABSTRACT);
				_localctx.IsAbstract =  true;
				}
			}

			State = 510;
			Match(KEYWORD_MATERIAL);
			State = 511;
			_localctx.Name = Match(IDENTIFIER);
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 512;
				Match(KEYWORD_EXTENDS);
				State = 513;
				_localctx.ExtendedMaterial = namespacedTypeName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderDefinitionContext : ParserRuleContext {
		public bool IsAbstract;
		public ShaderDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderDefinition; } }
	 
		public ShaderDefinitionContext() { }
		public virtual void CopyFrom(ShaderDefinitionContext context) {
			base.CopyFrom(context);
			this.IsAbstract = context.IsAbstract;
		}
	}
	public partial class GenericShaderDefinitionContext : ShaderDefinitionContext {
		public IToken Type;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedShader;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_COMPUTE() { return GetToken(SPSLParser.KEYWORD_COMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VERTEX() { return GetToken(SPSLParser.KEYWORD_VERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PIXEL() { return GetToken(SPSLParser.KEYWORD_PIXEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_GEOMETRY() { return GetToken(SPSLParser.KEYWORD_GEOMETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_HULL() { return GetToken(SPSLParser.KEYWORD_HULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DOMAIN() { return GetToken(SPSLParser.KEYWORD_DOMAIN, 0); }
		public GenericShaderDefinitionContext(ShaderDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterGenericShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitGenericShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericShaderDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputeShaderDefinitionContext : ShaderDefinitionContext {
		public IToken Type;
		public IToken Name;
		public IToken ThreadCountX;
		public IToken ThreadCountY;
		public IToken ThreadCountZ;
		public NamespacedTypeNameContext ExtendedShader;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_COMPUTE() { return GetToken(SPSLParser.KEYWORD_COMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IntegerLiteral() { return GetTokens(SPSLParser.IntegerLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral(int i) {
			return GetToken(SPSLParser.IntegerLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public ComputeShaderDefinitionContext(ShaderDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterComputeShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitComputeShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputeShaderDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderDefinitionContext shaderDefinition() {
		ShaderDefinitionContext _localctx = new ShaderDefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_shaderDefinition);
		int _la;
		try {
			State = 551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				_localctx = new GenericShaderDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_ABSTRACT) {
					{
					State = 516;
					Match(KEYWORD_ABSTRACT);
					((GenericShaderDefinitionContext)_localctx).IsAbstract =  true;
					}
				}

				State = 521;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 512000L) != 0)) {
					{
					State = 520;
					((GenericShaderDefinitionContext)_localctx).Type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 512000L) != 0)) ) {
						((GenericShaderDefinitionContext)_localctx).Type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 523;
				Match(KEYWORD_SHADER);
				State = 524;
				((GenericShaderDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_EXTENDS) {
					{
					State = 525;
					Match(KEYWORD_EXTENDS);
					State = 526;
					((GenericShaderDefinitionContext)_localctx).ExtendedShader = namespacedTypeName();
					}
				}

				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_IMPLEMENTS) {
					{
					State = 529;
					Match(KEYWORD_IMPLEMENTS);
					State = 530;
					((GenericShaderDefinitionContext)_localctx).Interfaces = interfacesList();
					}
				}

				}
				break;
			case 2:
				_localctx = new ComputeShaderDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 533;
				((ComputeShaderDefinitionContext)_localctx).Type = Match(KEYWORD_COMPUTE);
				State = 534;
				Match(KEYWORD_SHADER);
				State = 535;
				((ComputeShaderDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 536;
				Match(OP_LESSER_THAN);
				State = 537;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountX = Match(IntegerLiteral);
				State = 538;
				Match(TOK_COMMA);
				State = 539;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountY = Match(IntegerLiteral);
				State = 540;
				Match(TOK_COMMA);
				State = 541;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountZ = Match(IntegerLiteral);
				State = 542;
				Match(OP_GREATER_THAN);
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_EXTENDS) {
					{
					State = 543;
					Match(KEYWORD_EXTENDS);
					State = 544;
					((ComputeShaderDefinitionContext)_localctx).ExtendedShader = namespacedTypeName();
					}
				}

				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_IMPLEMENTS) {
					{
					State = 547;
					Match(KEYWORD_IMPLEMENTS);
					State = 548;
					((ComputeShaderDefinitionContext)_localctx).Interfaces = interfacesList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseNamespaceDirectiveContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_USE() { return GetToken(SPSLParser.KEYWORD_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_NAMESPACE() { return GetToken(SPSLParser.KEYWORD_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UseNamespaceDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useNamespaceDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUseNamespaceDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUseNamespaceDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseNamespaceDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseNamespaceDirectiveContext useNamespaceDirective() {
		UseNamespaceDirectiveContext _localctx = new UseNamespaceDirectiveContext(Context, State);
		EnterRule(_localctx, 50, RULE_useNamespaceDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			Match(KEYWORD_USE);
			State = 554;
			Match(KEYWORD_NAMESPACE);
			State = 555;
			_localctx.Name = namespacedTypeName();
			State = 556;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseFragmentDirectiveContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_USE() { return GetToken(SPSLParser.KEYWORD_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FRAGMENT() { return GetToken(SPSLParser.KEYWORD_FRAGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UseFragmentDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useFragmentDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUseFragmentDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUseFragmentDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseFragmentDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseFragmentDirectiveContext useFragmentDirective() {
		UseFragmentDirectiveContext _localctx = new UseFragmentDirectiveContext(Context, State);
		EnterRule(_localctx, 52, RULE_useFragmentDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			Match(KEYWORD_USE);
			State = 559;
			Match(KEYWORD_FRAGMENT);
			State = 560;
			_localctx.Name = namespacedTypeName();
			State = 561;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreamPropertyContext : ParserRuleContext {
		public IToken Flow;
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext bufferComponent() {
			return GetRuleContext<BufferComponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INPUT() { return GetToken(SPSLParser.KEYWORD_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OUTPUT() { return GetToken(SPSLParser.KEYWORD_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TRANSIENT() { return GetToken(SPSLParser.KEYWORD_TRANSIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StreamPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streamProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStreamProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStreamProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreamProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreamPropertyContext streamProperty() {
		StreamPropertyContext _localctx = new StreamPropertyContext(Context, State);
		EnterRule(_localctx, 54, RULE_streamProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 563;
				annotation();
				}
				}
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 569;
			_localctx.Flow = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
				_localctx.Flow = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 570;
			bufferComponent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext bufferDefinition() {
			return GetRuleContext<BufferDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreamContext stream() {
			return GetRuleContext<StreamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SamplerStateContext samplerState() {
			return GetRuleContext<SamplerStateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction() {
			return GetRuleContext<ShaderFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseFragmentDirectiveContext useFragmentDirective() {
			return GetRuleContext<UseFragmentDirectiveContext>(0);
		}
		public ShaderMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderMemberContext shaderMember() {
		ShaderMemberContext _localctx = new ShaderMemberContext(Context, State);
		EnterRule(_localctx, 56, RULE_shaderMember);
		try {
			State = 579;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				globalVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573;
				bufferDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 574;
				type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 575;
				stream();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 576;
				samplerState();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 577;
				shaderFunction();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 578;
				useFragmentDirective();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplerStateContext : ParserRuleContext {
		public SamplerStateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samplerState; } }
	 
		public SamplerStateContext() { }
		public virtual void CopyFrom(SamplerStateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CustomSamplerStateContext : SamplerStateContext {
		public IToken Documentation;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SAMPLER() { return GetToken(SPSLParser.TYPE_SAMPLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SamplerStatePropertyContext[] samplerStateProperty() {
			return GetRuleContexts<SamplerStatePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SamplerStatePropertyContext samplerStateProperty(int i) {
			return GetRuleContext<SamplerStatePropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public CustomSamplerStateContext(SamplerStateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCustomSamplerState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCustomSamplerState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomSamplerState(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultSamplerStateContext : SamplerStateContext {
		public IToken Documentation;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SAMPLER() { return GetToken(SPSLParser.TYPE_SAMPLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public DefaultSamplerStateContext(SamplerStateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDefaultSamplerState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDefaultSamplerState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultSamplerState(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SamplerStateContext samplerState() {
		SamplerStateContext _localctx = new SamplerStateContext(Context, State);
		EnterRule(_localctx, 58, RULE_samplerState);
		int _la;
		try {
			State = 601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				_localctx = new DefaultSamplerStateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOC_COMMENT) {
					{
					State = 581;
					((DefaultSamplerStateContext)_localctx).Documentation = Match(DOC_COMMENT);
					}
				}

				State = 584;
				Match(TYPE_SAMPLER);
				State = 585;
				((DefaultSamplerStateContext)_localctx).Name = Match(IDENTIFIER);
				State = 586;
				Match(OP_ASSIGN);
				State = 587;
				Match(IDENTIFIER);
				}
				break;
			case 2:
				_localctx = new CustomSamplerStateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOC_COMMENT) {
					{
					State = 588;
					((CustomSamplerStateContext)_localctx).Documentation = Match(DOC_COMMENT);
					}
				}

				State = 591;
				Match(TYPE_SAMPLER);
				State = 592;
				((CustomSamplerStateContext)_localctx).Name = Match(IDENTIFIER);
				State = 593;
				Match(TOK_OPEN_BRACE);
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 594;
					samplerStateProperty();
					}
					}
					State = 597;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DOC_COMMENT || _la==IDENTIFIER );
				State = 599;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplerStatePropertyContext : ParserRuleContext {
		public IToken Documentation;
		public IToken Property;
		public PrimitiveExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public SamplerStatePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samplerStateProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSamplerStateProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSamplerStateProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSamplerStateProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SamplerStatePropertyContext samplerStateProperty() {
		SamplerStatePropertyContext _localctx = new SamplerStatePropertyContext(Context, State);
		EnterRule(_localctx, 60, RULE_samplerStateProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 603;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 606;
			_localctx.Property = Match(IDENTIFIER);
			State = 607;
			Match(OP_ASSIGN);
			State = 608;
			_localctx.Value = primitiveExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MaterialParamsContext materialParams() {
			return GetRuleContext<MaterialParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialStateContext materialState() {
			return GetRuleContext<MaterialStateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction() {
			return GetRuleContext<ShaderFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialShaderUsageContext materialShaderUsage() {
			return GetRuleContext<MaterialShaderUsageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialVariantContext materialVariant() {
			return GetRuleContext<MaterialVariantContext>(0);
		}
		public MaterialMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialMemberContext materialMember() {
		MaterialMemberContext _localctx = new MaterialMemberContext(Context, State);
		EnterRule(_localctx, 62, RULE_materialMember);
		try {
			State = 616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 610;
				materialParams();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611;
				materialState();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 612;
				type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 613;
				shaderFunction();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 614;
				materialShaderUsage();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 615;
				materialVariant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialShaderUsageDefinitionContext : ParserRuleContext {
		public IToken Stage;
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_USE() { return GetToken(SPSLParser.KEYWORD_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VERTEX() { return GetToken(SPSLParser.KEYWORD_VERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PIXEL() { return GetToken(SPSLParser.KEYWORD_PIXEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_GEOMETRY() { return GetToken(SPSLParser.KEYWORD_GEOMETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DOMAIN() { return GetToken(SPSLParser.KEYWORD_DOMAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_HULL() { return GetToken(SPSLParser.KEYWORD_HULL, 0); }
		public MaterialShaderUsageDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialShaderUsageDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialShaderUsageDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialShaderUsageDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialShaderUsageDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialShaderUsageDefinitionContext materialShaderUsageDefinition() {
		MaterialShaderUsageDefinitionContext _localctx = new MaterialShaderUsageDefinitionContext(Context, State);
		EnterRule(_localctx, 64, RULE_materialShaderUsageDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			Match(KEYWORD_USE);
			State = 620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 249856L) != 0)) {
				{
				State = 619;
				_localctx.Stage = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 249856L) != 0)) ) {
					_localctx.Stage = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 622;
			Match(KEYWORD_SHADER);
			State = 623;
			_localctx.Name = namespacedTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialShaderUsageContext : ParserRuleContext {
		public MaterialShaderUsageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialShaderUsage; } }
	 
		public MaterialShaderUsageContext() { }
		public virtual void CopyFrom(MaterialShaderUsageContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CustomizedMaterialShaderUsageContext : MaterialShaderUsageContext {
		public MaterialShaderUsageDefinitionContext Definition;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialShaderUsageDefinitionContext materialShaderUsageDefinition() {
			return GetRuleContext<MaterialShaderUsageDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseFragmentDirectiveContext[] useFragmentDirective() {
			return GetRuleContexts<UseFragmentDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseFragmentDirectiveContext useFragmentDirective(int i) {
			return GetRuleContext<UseFragmentDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		public CustomizedMaterialShaderUsageContext(MaterialShaderUsageContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCustomizedMaterialShaderUsage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCustomizedMaterialShaderUsage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomizedMaterialShaderUsage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleMaterialShaderUsageContext : MaterialShaderUsageContext {
		public MaterialShaderUsageDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialShaderUsageDefinitionContext materialShaderUsageDefinition() {
			return GetRuleContext<MaterialShaderUsageDefinitionContext>(0);
		}
		public SimpleMaterialShaderUsageContext(MaterialShaderUsageContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSimpleMaterialShaderUsage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSimpleMaterialShaderUsage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleMaterialShaderUsage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialShaderUsageContext materialShaderUsage() {
		MaterialShaderUsageContext _localctx = new MaterialShaderUsageContext(Context, State);
		EnterRule(_localctx, 66, RULE_materialShaderUsage);
		int _la;
		try {
			int _alt;
			State = 651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				_localctx = new SimpleMaterialShaderUsageContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 625;
				((SimpleMaterialShaderUsageContext)_localctx).Definition = materialShaderUsageDefinition();
				State = 626;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				_localctx = new CustomizedMaterialShaderUsageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 628;
				((CustomizedMaterialShaderUsageContext)_localctx).Definition = materialShaderUsageDefinition();
				State = 631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_AS) {
					{
					State = 629;
					Match(KEYWORD_AS);
					State = 630;
					((CustomizedMaterialShaderUsageContext)_localctx).Name = Match(IDENTIFIER);
					}
				}

				State = 633;
				Match(TOK_OPEN_BRACE);
				State = 646;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==KEYWORD_USE || _la==KEYWORD_OVERRIDE || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 1125899906842623L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 70506183131137L) != 0)) {
					{
					{
					State = 637;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 634;
							Match(DOC_COMMENT);
							}
							} 
						}
						State = 639;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
					}
					State = 642;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case KEYWORD_OVERRIDE:
					case TYPE_VOID:
					case TYPE_BOOL:
					case TYPE_INT:
					case TYPE_UINT:
					case TYPE_FLOAT:
					case TYPE_DOUBLE:
					case TYPE_STRING:
					case TYPE_VECTOR2B:
					case TYPE_VECTOR2D:
					case TYPE_VECTOR2F:
					case TYPE_VECTOR2I:
					case TYPE_VECTOR2UI:
					case TYPE_VECTOR3B:
					case TYPE_VECTOR3D:
					case TYPE_VECTOR3F:
					case TYPE_VECTOR3I:
					case TYPE_VECTOR3UI:
					case TYPE_VECTOR4B:
					case TYPE_VECTOR4D:
					case TYPE_VECTOR4F:
					case TYPE_VECTOR4I:
					case TYPE_VECTOR4UI:
					case TYPE_MATRIX2F:
					case TYPE_MATRIX3F:
					case TYPE_MATRIX4F:
					case TYPE_MATRIX2X3F:
					case TYPE_MATRIX2X4F:
					case TYPE_MATRIX3X2F:
					case TYPE_MATRIX3X4F:
					case TYPE_MATRIX4X2F:
					case TYPE_MATRIX4X3F:
					case TYPE_MATRIX2D:
					case TYPE_MATRIX3D:
					case TYPE_MATRIX4D:
					case TYPE_MATRIX2X3D:
					case TYPE_MATRIX2X4D:
					case TYPE_MATRIX3X2D:
					case TYPE_MATRIX3X4D:
					case TYPE_MATRIX4X2D:
					case TYPE_MATRIX4X3D:
					case TYPE_COLOR3:
					case TYPE_COLOR4:
					case TYPE_SAMPLER:
					case TYPE_TEXTURE1D:
					case TYPE_TEXTURE2D:
					case TYPE_TEXTURE1DARRAY:
					case TYPE_TEXTURE2DARRAY:
					case TYPE_TEXTURE3D:
					case TYPE_CUBEMAP:
					case TYPE_CUBEMAPARRAY:
					case TOK_AT:
					case DOC_COMMENT:
					case IDENTIFIER:
						{
						State = 640;
						shaderFunction();
						}
						break;
					case KEYWORD_USE:
						{
						State = 641;
						useFragmentDirective();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 648;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 649;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_AT() { return GetToken(SPSLParser.TOK_AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext[] constantExpression() {
			return GetRuleContexts<ConstantExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression(int i) {
			return GetRuleContext<ConstantExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 68, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			Match(TOK_AT);
			State = 654;
			_localctx.Name = Match(IDENTIFIER);
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOK_OPEN_PAREN) {
				{
				State = 655;
				Match(TOK_OPEN_PAREN);
				State = 664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 127L) != 0)) {
					{
					State = 656;
					constantExpression();
					State = 661;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TOK_COMMA) {
						{
						{
						State = 657;
						Match(TOK_COMMA);
						State = 658;
						constantExpression();
						}
						}
						State = 663;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 666;
				Match(TOK_CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionDirectiveContext precisionDirective() {
			return GetRuleContext<PrecisionDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderLangDirectiveContext shaderLangDirective() {
			return GetRuleContext<ShaderLangDirectiveContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 70, RULE_directive);
		try {
			State = 671;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 669;
				precisionDirective();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 670;
				shaderLangDirective();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public PrecisionDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precisionDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrecisionDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrecisionDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecisionDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionDirectiveContext precisionDirective() {
		PrecisionDirectiveContext _localctx = new PrecisionDirectiveContext(Context, State);
		EnterRule(_localctx, 72, RULE_precisionDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			Match(TOK_HASHTAG);
			State = 674;
			Match(T__0);
			State = 675;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderLangDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public ShaderLangDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderLangDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderLangDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderLangDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderLangDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderLangDirectiveContext shaderLangDirective() {
		ShaderLangDirectiveContext _localctx = new ShaderLangDirectiveContext(Context, State);
		EnterRule(_localctx, 74, RULE_shaderLangDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			Match(TOK_HASHTAG);
			State = 678;
			Match(T__4);
			State = 679;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialParamsContext : ParserRuleContext {
		public bool IsPartial;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PARAMS() { return GetToken(SPSLParser.KEYWORD_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PARTIAL() { return GetToken(SPSLParser.KEYWORD_PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialParamsComponentContext[] materialParamsComponent() {
			return GetRuleContexts<MaterialParamsComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialParamsComponentContext materialParamsComponent(int i) {
			return GetRuleContext<MaterialParamsComponentContext>(i);
		}
		public MaterialParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialParamsContext materialParams() {
		MaterialParamsContext _localctx = new MaterialParamsContext(Context, State);
		EnterRule(_localctx, 76, RULE_materialParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 681;
				annotation();
				}
				}
				State = 686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_PARTIAL) {
				{
				State = 687;
				Match(KEYWORD_PARTIAL);
				_localctx.IsPartial =  true;
				}
			}

			State = 691;
			Match(KEYWORD_PARAMS);
			State = 692;
			_localctx.Name = Match(IDENTIFIER);
			State = 693;
			Match(TOK_OPEN_BRACE);
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & 576460752303422977L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 70506183131137L) != 0)) {
				{
				{
				State = 694;
				materialParamsComponent();
				}
				}
				State = 699;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 700;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialStateContext : ParserRuleContext {
		public MaterialStateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialState; } }
	 
		public MaterialStateContext() { }
		public virtual void CopyFrom(MaterialStateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MaterialStateValueContext : MaterialStateContext {
		public IToken Name;
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		public MaterialStateValueContext(MaterialStateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialStateValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialStateValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialStateValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaterialStateBlockContext : MaterialStateContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialStateComponentContext[] materialStateComponent() {
			return GetRuleContexts<MaterialStateComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialStateComponentContext materialStateComponent(int i) {
			return GetRuleContext<MaterialStateComponentContext>(i);
		}
		public MaterialStateBlockContext(MaterialStateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialStateBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialStateBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialStateBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialStateContext materialState() {
		MaterialStateContext _localctx = new MaterialStateContext(Context, State);
		EnterRule(_localctx, 78, RULE_materialState);
		int _la;
		try {
			State = 717;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				_localctx = new MaterialStateBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 702;
				Match(T__8);
				State = 703;
				((MaterialStateBlockContext)_localctx).Name = Match(IDENTIFIER);
				State = 704;
				Match(TOK_OPEN_BRACE);
				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 705;
					materialStateComponent();
					}
					}
					State = 710;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 711;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			case 2:
				_localctx = new MaterialStateValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 712;
				Match(T__8);
				State = 713;
				((MaterialStateValueContext)_localctx).Name = Match(IDENTIFIER);
				State = 714;
				Match(OP_ASSIGN);
				State = 715;
				((MaterialStateValueContext)_localctx).Value = Match(IDENTIFIER);
				State = 716;
				Match(TOK_SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialStateComponentContext : ParserRuleContext {
		public IToken Name;
		public InitializationExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializationExpressionContext initializationExpression() {
			return GetRuleContext<InitializationExpressionContext>(0);
		}
		public MaterialStateComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialStateComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialStateComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialStateComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialStateComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialStateComponentContext materialStateComponent() {
		MaterialStateComponentContext _localctx = new MaterialStateComponentContext(Context, State);
		EnterRule(_localctx, 80, RULE_materialStateComponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			_localctx.Name = Match(IDENTIFIER);
			State = 720;
			Match(OP_ASSIGN);
			State = 721;
			_localctx.Value = initializationExpression();
			State = 722;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferDefinitionContext : ParserRuleContext {
		public BufferDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferDefinition; } }
	 
		public BufferDefinitionContext() { }
		public virtual void CopyFrom(BufferDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypedBufferDefinitionContext : BufferDefinitionContext {
		public IToken Documentation;
		public IToken Storage;
		public IToken Access;
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BUFFER() { return GetToken(SPSLParser.KEYWORD_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_COHERENT() { return GetToken(SPSLParser.KEYWORD_COHERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_READONLY() { return GetToken(SPSLParser.KEYWORD_READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WRITEONLY() { return GetToken(SPSLParser.KEYWORD_WRITEONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_READWRITE() { return GetToken(SPSLParser.KEYWORD_READWRITE, 0); }
		public TypedBufferDefinitionContext(BufferDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTypedBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTypedBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedBufferDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InPlaceStructuredBufferDefinitionContext : BufferDefinitionContext {
		public IToken Documentation;
		public IToken Storage;
		public IToken Access;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BUFFER() { return GetToken(SPSLParser.KEYWORD_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext[] bufferComponent() {
			return GetRuleContexts<BufferComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext bufferComponent(int i) {
			return GetRuleContext<BufferComponentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_COHERENT() { return GetToken(SPSLParser.KEYWORD_COHERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_READONLY() { return GetToken(SPSLParser.KEYWORD_READONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WRITEONLY() { return GetToken(SPSLParser.KEYWORD_WRITEONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_READWRITE() { return GetToken(SPSLParser.KEYWORD_READWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		public InPlaceStructuredBufferDefinitionContext(BufferDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInPlaceStructuredBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInPlaceStructuredBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInPlaceStructuredBufferDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferDefinitionContext bufferDefinition() {
		BufferDefinitionContext _localctx = new BufferDefinitionContext(Context, State);
		EnterRule(_localctx, 82, RULE_bufferDefinition);
		int _la;
		try {
			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				_localctx = new InPlaceStructuredBufferDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOC_COMMENT) {
					{
					State = 724;
					((InPlaceStructuredBufferDefinitionContext)_localctx).Documentation = Match(DOC_COMMENT);
					}
				}

				State = 730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 727;
					annotation();
					}
					}
					State = 732;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_COHERENT) {
					{
					State = 733;
					((InPlaceStructuredBufferDefinitionContext)_localctx).Storage = Match(KEYWORD_COHERENT);
					}
				}

				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 897L) != 0)) {
					{
					State = 736;
					((InPlaceStructuredBufferDefinitionContext)_localctx).Access = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((((_la - 57)) & ~0x3f) == 0 && ((1L << (_la - 57)) & 897L) != 0)) ) {
						((InPlaceStructuredBufferDefinitionContext)_localctx).Access = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 739;
				Match(KEYWORD_BUFFER);
				State = 740;
				((InPlaceStructuredBufferDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 741;
				Match(TOK_OPEN_BRACE);
				State = 745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 1125899906842623L) != 0) || _la==TOK_AT || _la==IDENTIFIER) {
					{
					{
					State = 742;
					bufferComponent();
					}
					}
					State = 747;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 748;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			case 2:
				_localctx = new TypedBufferDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOC_COMMENT) {
					{
					State = 749;
					((TypedBufferDefinitionContext)_localctx).Documentation = Match(DOC_COMMENT);
					}
				}

				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 752;
					annotation();
					}
					}
					State = 757;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_COHERENT) {
					{
					State = 758;
					((TypedBufferDefinitionContext)_localctx).Storage = Match(KEYWORD_COHERENT);
					}
				}

				State = 762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) {
					{
					State = 761;
					((TypedBufferDefinitionContext)_localctx).Access = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 7L) != 0)) ) {
						((TypedBufferDefinitionContext)_localctx).Access = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 764;
				Match(KEYWORD_BUFFER);
				State = 765;
				Match(OP_LESSER_THAN);
				State = 766;
				((TypedBufferDefinitionContext)_localctx).Type = dataType();
				State = 767;
				Match(OP_GREATER_THAN);
				State = 768;
				((TypedBufferDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 769;
				Match(TOK_SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferComponentContext : ParserRuleContext {
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public BufferComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBufferComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBufferComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBufferComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferComponentContext bufferComponent() {
		BufferComponentContext _localctx = new BufferComponentContext(Context, State);
		EnterRule(_localctx, 84, RULE_bufferComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 773;
				annotation();
				}
				}
				State = 778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 779;
			_localctx.Type = dataType();
			State = 780;
			_localctx.Name = Match(IDENTIFIER);
			State = 781;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialParamsComponentContext : ParserRuleContext {
		public MaterialParamsComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialParamsComponent; } }
	 
		public MaterialParamsComponentContext() { }
		public virtual void CopyFrom(MaterialParamsComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MaterialValueParameterContext : MaterialParamsComponentContext {
		public DataTypeContext Type;
		public IToken Name;
		public InitializationExpressionContext DefaultValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializationExpressionContext initializationExpression() {
			return GetRuleContext<InitializationExpressionContext>(0);
		}
		public MaterialValueParameterContext(MaterialParamsComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialValueParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialValueParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialValueParameter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaterialPermutationParameterContext : MaterialParamsComponentContext {
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext permutationVariable() {
			return GetRuleContext<PermutationVariableContext>(0);
		}
		public MaterialPermutationParameterContext(MaterialParamsComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialPermutationParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialPermutationParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialPermutationParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialParamsComponentContext materialParamsComponent() {
		MaterialParamsComponentContext _localctx = new MaterialParamsComponentContext(Context, State);
		EnterRule(_localctx, 86, RULE_materialParamsComponent);
		int _la;
		try {
			State = 798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				_localctx = new MaterialValueParameterContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 783;
					annotation();
					}
					}
					State = 788;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 789;
				((MaterialValueParameterContext)_localctx).Type = dataType();
				State = 790;
				((MaterialValueParameterContext)_localctx).Name = Match(IDENTIFIER);
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OP_ASSIGN) {
					{
					State = 791;
					Match(OP_ASSIGN);
					State = 792;
					((MaterialValueParameterContext)_localctx).DefaultValue = initializationExpression();
					}
				}

				State = 795;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				_localctx = new MaterialPermutationParameterContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 797;
				permutationVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructComponentContext : ParserRuleContext {
		public StructComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structComponent; } }
	 
		public StructComponentContext() { }
		public virtual void CopyFrom(StructComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructPropertyContext : StructComponentContext {
		public IToken Documentation;
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public StructPropertyContext(StructComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructFunctionContext : StructComponentContext {
		public FunctionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StructFunctionContext(StructComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructComponentContext structComponent() {
		StructComponentContext _localctx = new StructComponentContext(Context, State);
		EnterRule(_localctx, 88, RULE_structComponent);
		int _la;
		try {
			State = 820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				_localctx = new StructPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOC_COMMENT) {
					{
					State = 800;
					((StructPropertyContext)_localctx).Documentation = Match(DOC_COMMENT);
					}
				}

				State = 806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 803;
					annotation();
					}
					}
					State = 808;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 809;
				((StructPropertyContext)_localctx).Type = dataType();
				State = 810;
				((StructPropertyContext)_localctx).Name = Match(IDENTIFIER);
				State = 811;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				_localctx = new StructFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 813;
					annotation();
					}
					}
					State = 818;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 819;
				((StructFunctionContext)_localctx).Function = function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumComponentContext : ParserRuleContext {
		public IToken Documentation;
		public IToken Name;
		public ConstantExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA() { return GetToken(SPSLParser.TOK_COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnumComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnumComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumComponentContext enumComponent() {
		EnumComponentContext _localctx = new EnumComponentContext(Context, State);
		EnterRule(_localctx, 90, RULE_enumComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 822;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 825;
				annotation();
				}
				}
				State = 830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 831;
			_localctx.Name = Match(IDENTIFIER);
			State = 834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASSIGN) {
				{
				State = 832;
				Match(OP_ASSIGN);
				State = 833;
				_localctx.Value = constantExpression();
				}
			}

			State = 836;
			Match(TOK_COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public bool IsConst;
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	 
		public VariableDeclarationContext() { }
		public virtual void CopyFrom(VariableDeclarationContext context) {
			base.CopyFrom(context);
			this.IsConst = context.IsConst;
		}
	}
	public partial class UntypedVariableDeclarationContext : VariableDeclarationContext {
		public BasicExpressionContext Identifier;
		public PrimitiveExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VAR() { return GetToken(SPSLParser.KEYWORD_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public UntypedVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUntypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUntypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedVariableDeclarationContext : VariableDeclarationContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentityContext[] variableIdentity() {
			return GetRuleContexts<VariableIdentityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentityContext variableIdentity(int i) {
			return GetRuleContext<VariableIdentityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public TypedVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 92, RULE_variableDeclaration);
		int _la;
		try {
			State = 858;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				_localctx = new TypedVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_CONST) {
					{
					State = 838;
					Match(KEYWORD_CONST);
					((TypedVariableDeclarationContext)_localctx).IsConst =  true;
					}
				}

				State = 842;
				((TypedVariableDeclarationContext)_localctx).Type = dataType();
				State = 843;
				variableIdentity();
				State = 848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_COMMA) {
					{
					{
					State = 844;
					Match(TOK_COMMA);
					State = 845;
					variableIdentity();
					}
					}
					State = 850;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UntypedVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				((UntypedVariableDeclarationContext)_localctx).IsConst =  true;
				State = 852;
				Match(KEYWORD_CONST);
				State = 853;
				Match(KEYWORD_VAR);
				State = 854;
				((UntypedVariableDeclarationContext)_localctx).Identifier = basicExpression();
				State = 855;
				Match(OP_ASSIGN);
				State = 856;
				((UntypedVariableDeclarationContext)_localctx).Expression = primitiveExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationAssignmentContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public VariableDeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
		VariableDeclarationAssignmentContext _localctx = new VariableDeclarationAssignmentContext(Context, State);
		EnterRule(_localctx, 94, RULE_variableDeclarationAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 860;
			_localctx.Identifier = basicExpression();
			State = 861;
			Match(OP_ASSIGN);
			State = 862;
			_localctx.Expression = expressionStatement(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableIdentityContext : ParserRuleContext {
		public bool IsAssignment;
		public BasicExpressionContext Identifier;
		public VariableDeclarationAssignmentContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public VariableIdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableIdentity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterVariableIdentity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitVariableIdentity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableIdentityContext variableIdentity() {
		VariableIdentityContext _localctx = new VariableIdentityContext(Context, State);
		EnterRule(_localctx, 96, RULE_variableIdentity);
		try {
			State = 868;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 864;
				_localctx.Identifier = basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 865;
				_localctx.Declaration = variableDeclarationAssignment();
				_localctx.IsAssignment =  true;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFunctionContext : ParserRuleContext {
		public bool IsOverride;
		public ShaderFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFunction; } }
	 
		public ShaderFunctionContext() { }
		public virtual void CopyFrom(ShaderFunctionContext context) {
			base.CopyFrom(context);
			this.IsOverride = context.IsOverride;
		}
	}
	public partial class ShaderConstructorFunctionContext : ShaderFunctionContext {
		public IToken Documentation;
		public IToken Name;
		public FunctionBodyContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public ShaderConstructorFunctionContext(ShaderFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderConstructorFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderConstructorFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderConstructorFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BasicShaderFunctionContext : ShaderFunctionContext {
		public IToken Documentation;
		public FunctionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OVERRIDE() { return GetToken(SPSLParser.KEYWORD_OVERRIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public BasicShaderFunctionContext(ShaderFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBasicShaderFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBasicShaderFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicShaderFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFunctionContext shaderFunction() {
		ShaderFunctionContext _localctx = new ShaderFunctionContext(Context, State);
		EnterRule(_localctx, 98, RULE_shaderFunction);
		int _la;
		try {
			State = 900;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				_localctx = new BasicShaderFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 871;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 870;
					((BasicShaderFunctionContext)_localctx).Documentation = Match(DOC_COMMENT);
					}
					break;
				}
				State = 876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 873;
					annotation();
					}
					}
					State = 878;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_OVERRIDE) {
					{
					State = 879;
					Match(KEYWORD_OVERRIDE);
					((BasicShaderFunctionContext)_localctx).IsOverride =  true;
					}
				}

				State = 883;
				((BasicShaderFunctionContext)_localctx).Function = function();
				}
				break;
			case 2:
				_localctx = new ShaderConstructorFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOC_COMMENT) {
					{
					State = 884;
					((ShaderConstructorFunctionContext)_localctx).Documentation = Match(DOC_COMMENT);
					}
				}

				State = 890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 887;
					annotation();
					}
					}
					State = 892;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 893;
				((ShaderConstructorFunctionContext)_localctx).Name = Match(IDENTIFIER);
				State = 894;
				Match(TOK_OPEN_PAREN);
				State = 895;
				Match(TOK_CLOSE_PAREN);
				State = 896;
				Match(TOK_OPEN_BRACE);
				State = 897;
				((ShaderConstructorFunctionContext)_localctx).Body = functionBody();
				State = 898;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctionHeadContext Head;
		public FunctionBodyContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 100, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902;
			_localctx.Head = functionHead();
			State = 903;
			Match(TOK_OPEN_BRACE);
			State = 904;
			_localctx.Body = functionBody();
			State = 905;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		public IToken Documentation;
		public DataTypeContext Type;
		public IToken Name;
		public FunctionSignatureContext Signature;
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 102, RULE_functionHead);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 907;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 910;
			_localctx.Type = dataType();
			State = 911;
			_localctx.Name = Match(IDENTIFIER);
			State = 912;
			_localctx.Signature = functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public ArgListContext Arguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 104, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			Match(TOK_OPEN_PAREN);
			State = 916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144115189820686336L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 1125899906842623L) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 70506183131137L) != 0)) {
				{
				State = 915;
				_localctx.Arguments = argList();
				}
			}

			State = 918;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ArgDefContext _argDef;
		public IList<ArgDefContext> _Arguments = new List<ArgDefContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ArgDefContext[] argDef() {
			return GetRuleContexts<ArgDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgDefContext argDef(int i) {
			return GetRuleContext<ArgDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 106, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920;
			_localctx._argDef = argDef();
			_localctx._Arguments.Add(_localctx._argDef);
			State = 925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 921;
				Match(TOK_COMMA);
				State = 922;
				_localctx._argDef = argDef();
				_localctx._Arguments.Add(_localctx._argDef);
				}
				}
				State = 927;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefContext : ParserRuleContext {
		public IToken Documentation;
		public AnnotationContext _annotation;
		public IList<AnnotationContext> _Annotations = new List<AnnotationContext>();
		public IToken Flow;
		public DataTypeContext Type;
		public IToken Name;
		public ConstantExpressionContext DefaultValue;
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT() { return GetToken(SPSLParser.DOC_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IN() { return GetToken(SPSLParser.KEYWORD_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OUT() { return GetToken(SPSLParser.KEYWORD_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INOUT() { return GetToken(SPSLParser.KEYWORD_INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		public ArgDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArgDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArgDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefContext argDef() {
		ArgDefContext _localctx = new ArgDefContext(Context, State);
		EnterRule(_localctx, 108, RULE_argDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOC_COMMENT) {
				{
				State = 928;
				_localctx.Documentation = Match(DOC_COMMENT);
				}
			}

			State = 934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 931;
				_localctx._annotation = annotation();
				_localctx._Annotations.Add(_localctx._annotation);
				}
				}
				State = 936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 144115189820686336L) != 0)) {
				{
				State = 937;
				_localctx.Flow = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 144115189820686336L) != 0)) ) {
					_localctx.Flow = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 940;
			_localctx.Type = dataType();
			State = 941;
			_localctx.Name = Match(IDENTIFIER);
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASSIGN) {
				{
				State = 942;
				Match(OP_ASSIGN);
				State = 943;
				_localctx.DefaultValue = constantExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public ReturnStatementContext ReturnStatement;
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext[] stayControlFlowStatement() {
			return GetRuleContexts<StayControlFlowStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement(int i) {
			return GetRuleContext<StayControlFlowStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 110, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1301297300240334848L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 20266198323167231L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 4363821015043L) != 0)) {
				{
				{
				State = 946;
				stayControlFlowStatement();
				}
				}
				State = 951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_RETURN) {
				{
				State = 952;
				_localctx.ReturnStatement = returnStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 112, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955;
			Match(TOK_OPEN_BRACE);
			State = 959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1332840089817972736L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 20266198323167231L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 4363821015043L) != 0)) {
				{
				{
				State = 956;
				statement();
				}
				}
				State = 961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 962;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		public ReferencableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterReferencableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitReferencableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferencableExpressionContext referencableExpression() {
		ReferencableExpressionContext _localctx = new ReferencableExpressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_referencableExpression);
		try {
			State = 970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 964;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 965;
				parenthesizedExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 966;
				invocationExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 967;
				propertyMemberReferenceExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 968;
				methodMemberReferenceExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 969;
				arrayAccessExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		public ChainableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableExpressionContext chainableExpression() {
		ChainableExpressionContext _localctx = new ChainableExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_chainableExpression);
		try {
			State = 975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 972;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 973;
				invocationExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 974;
				arrayAccessExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainedExpressionContext : ParserRuleContext {
		public ReferencableExpressionContext Target;
		[System.Diagnostics.DebuggerNonUserCode] public ReferencableExpressionContext referencableExpression() {
			return GetRuleContext<ReferencableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_DOT() { return GetTokens(SPSLParser.TOK_DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT(int i) {
			return GetToken(SPSLParser.TOK_DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableExpressionContext[] chainableExpression() {
			return GetRuleContexts<ChainableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableExpressionContext chainableExpression(int i) {
			return GetRuleContext<ChainableExpressionContext>(i);
		}
		public ChainedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainedExpressionContext chainedExpression() {
		ChainedExpressionContext _localctx = new ChainedExpressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_chainedExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			_localctx.Target = referencableExpression();
			State = 980;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 978;
					Match(TOK_DOT);
					State = 979;
					chainableExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 982;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableChainableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		public AssignableChainableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableChainableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableChainableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableChainableExpressionContext assignableChainableExpression() {
		AssignableChainableExpressionContext _localctx = new AssignableChainableExpressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_assignableChainableExpression);
		try {
			State = 986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 984;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 985;
				arrayAccessExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableChainedExpressionContext : ParserRuleContext {
		public ReferencableExpressionContext Target;
		[System.Diagnostics.DebuggerNonUserCode] public ReferencableExpressionContext referencableExpression() {
			return GetRuleContext<ReferencableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_DOT() { return GetTokens(SPSLParser.TOK_DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT(int i) {
			return GetToken(SPSLParser.TOK_DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainableExpressionContext[] assignableChainableExpression() {
			return GetRuleContexts<AssignableChainableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainableExpressionContext assignableChainableExpression(int i) {
			return GetRuleContext<AssignableChainableExpressionContext>(i);
		}
		public AssignableChainedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableChainedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableChainedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableChainedExpressionContext assignableChainedExpression() {
		AssignableChainedExpressionContext _localctx = new AssignableChainedExpressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_assignableChainedExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			_localctx.Target = referencableExpression();
			State = 991;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 989;
					Match(TOK_DOT);
					State = 990;
					assignableChainableExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 993;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,124,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberReferenceExpressionContext : ParserRuleContext {
		public ContextAccessExpressionContext Target;
		public BasicExpressionContext Member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT() { return GetToken(SPSLParser.TOK_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContextAccessExpressionContext contextAccessExpression() {
			return GetRuleContext<ContextAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		public PropertyMemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPropertyMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPropertyMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
		PropertyMemberReferenceExpressionContext _localctx = new PropertyMemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_propertyMemberReferenceExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995;
			_localctx.Target = contextAccessExpression();
			State = 996;
			Match(TOK_DOT);
			State = 997;
			_localctx.Member = basicExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodMemberReferenceExpressionContext : ParserRuleContext {
		public ContextAccessExpressionContext Target;
		public InvocationExpressionContext Member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT() { return GetToken(SPSLParser.TOK_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ContextAccessExpressionContext contextAccessExpression() {
			return GetRuleContext<ContextAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		public MethodMemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodMemberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMethodMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMethodMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
		MethodMemberReferenceExpressionContext _localctx = new MethodMemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_methodMemberReferenceExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 999;
			_localctx.Target = contextAccessExpression();
			State = 1000;
			Match(TOK_DOT);
			State = 1001;
			_localctx.Member = invocationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberReferenceExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		public MemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberReferenceExpressionContext memberReferenceExpression() {
		MemberReferenceExpressionContext _localctx = new MemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_memberReferenceExpression);
		try {
			State = 1005;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1003;
				propertyMemberReferenceExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1004;
				methodMemberReferenceExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationExpressionContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		public ParametersListContext Parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersListContext parametersList() {
			return GetRuleContext<ParametersListContext>(0);
		}
		public InvocationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationExpressionContext invocationExpression() {
		InvocationExpressionContext _localctx = new InvocationExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_invocationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007;
			_localctx.Name = namespacedTypeName();
			State = 1008;
			Match(TOK_OPEN_PAREN);
			State = 1010;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_THIS || _la==KEYWORD_BASE || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 2251799813685247L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 4363821015043L) != 0)) {
				{
				State = 1009;
				_localctx.Parameters = parametersList();
				}
			}

			State = 1012;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermuteStatementContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public IToken Operator;
		public ConstantExpressionContext Value;
		public StatementBlockContext Block;
		public ElseStatementContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTE() { return GetToken(SPSLParser.KEYWORD_PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(SPSLParser.OP_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GEQ_THAN() { return GetToken(SPSLParser.OP_GEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEQ_THAN() { return GetToken(SPSLParser.OP_LEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIFFERENT() { return GetToken(SPSLParser.OP_DIFFERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public PermuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permuteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermuteStatementContext permuteStatement() {
		PermuteStatementContext _localctx = new PermuteStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_permuteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014;
			Match(KEYWORD_PERMUTE);
			State = 1015;
			Match(TOK_OPEN_PAREN);
			State = 1016;
			_localctx.Identifier = basicExpression();
			State = 1017;
			_localctx.Operator = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 144)) & ~0x3f) == 0 && ((1L << (_la - 144)) & 63L) != 0)) ) {
				_localctx.Operator = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1018;
			_localctx.Value = constantExpression();
			State = 1019;
			Match(TOK_CLOSE_PAREN);
			State = 1020;
			_localctx.Block = statementBlock();
			State = 1022;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 1021;
				_localctx.Else = elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		public ElseStatementContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(SPSLParser.KEYWORD_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifStatementContext[] elifStatement() {
			return GetRuleContexts<ElifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifStatementContext elifStatement(int i) {
			return GetRuleContext<ElifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024;
			Match(KEYWORD_IF);
			State = 1025;
			Match(TOK_OPEN_PAREN);
			State = 1026;
			_localctx.Expression = expressionStatement(0);
			State = 1027;
			Match(TOK_CLOSE_PAREN);
			State = 1028;
			_localctx.Block = statementBlock();
			State = 1032;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1029;
					elifStatement();
					}
					} 
				}
				State = 1034;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			State = 1036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 1035;
				_localctx.Else = elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELIF() { return GetToken(SPSLParser.KEYWORD_ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(SPSLParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(SPSLParser.KEYWORD_IF, 0); }
		public ElifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifStatementContext elifStatement() {
		ElifStatementContext _localctx = new ElifStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_elifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_ELIF:
				{
				State = 1038;
				Match(KEYWORD_ELIF);
				}
				break;
			case KEYWORD_ELSE:
				{
				State = 1039;
				Match(KEYWORD_ELSE);
				State = 1040;
				Match(KEYWORD_IF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1043;
			Match(TOK_OPEN_PAREN);
			State = 1044;
			_localctx.Expression = expressionStatement(0);
			State = 1045;
			Match(TOK_CLOSE_PAREN);
			State = 1046;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(SPSLParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			Match(KEYWORD_ELSE);
			State = 1049;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SWITCH() { return GetToken(SPSLParser.KEYWORD_SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051;
			Match(KEYWORD_SWITCH);
			State = 1052;
			Match(TOK_OPEN_PAREN);
			State = 1053;
			_localctx.Expression = expressionStatement(0);
			State = 1054;
			Match(TOK_CLOSE_PAREN);
			State = 1055;
			Match(TOK_OPEN_BRACE);
			State = 1059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEYWORD_CASE) {
				{
				{
				State = 1056;
				caseStatement();
				}
				}
				State = 1061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1062;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public bool IsBraceOpen = false;
		public bool IsBraceClose = false;
		public ConstantExpressionContext Expression;
		public StayControlFlowStatementContext Statements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CASE() { return GetToken(SPSLParser.KEYWORD_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COLON() { return GetToken(SPSLParser.TOK_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeaveControlFlowStatementContext leaveControlFlowStatement() {
			return GetRuleContext<LeaveControlFlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext[] stayControlFlowStatement() {
			return GetRuleContexts<StayControlFlowStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement(int i) {
			return GetRuleContext<StayControlFlowStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1064;
			Match(KEYWORD_CASE);
			State = 1065;
			_localctx.Expression = constantExpression();
			State = 1066;
			Match(TOK_COLON);
			State = 1069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 1067;
				Match(TOK_OPEN_BRACE);
				_localctx.IsBraceOpen =  true;
				}
				break;
			}
			State = 1074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1301297300240334848L) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 20266198323167231L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 4363821015043L) != 0)) {
				{
				{
				State = 1071;
				_localctx.Statements = stayControlFlowStatement();
				}
				}
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1077;
			leaveControlFlowStatement();
			State = 1080;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				{
				State = 1078;
				Match(TOK_CLOSE_BRACE);
				_localctx.IsBraceClose =  true;
				}
				break;
			}
			State = 1082;
			if (!(_localctx.IsBraceOpen == _localctx.IsBraceClose)) throw new FailedPredicateException(this, "$IsBraceOpen == $IsBraceClose");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(SPSLParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1084;
			Match(KEYWORD_WHILE);
			State = 1085;
			Match(TOK_OPEN_PAREN);
			State = 1086;
			_localctx.Expression = expressionStatement(0);
			State = 1087;
			Match(TOK_CLOSE_PAREN);
			State = 1088;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ExpressionStatementContext Initialization;
		public ExpressionStatementContext Condition;
		public ExpressionStatementContext Iteration;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FOR() { return GetToken(SPSLParser.KEYWORD_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_SEMICOLON() { return GetTokens(SPSLParser.TOK_SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON(int i) {
			return GetToken(SPSLParser.TOK_SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1090;
			Match(KEYWORD_FOR);
			State = 1091;
			Match(TOK_OPEN_PAREN);
			State = 1092;
			_localctx.Initialization = expressionStatement(0);
			State = 1093;
			Match(TOK_SEMICOLON);
			State = 1094;
			_localctx.Condition = expressionStatement(0);
			State = 1095;
			Match(TOK_SEMICOLON);
			State = 1096;
			_localctx.Iteration = expressionStatement(0);
			State = 1097;
			Match(TOK_CLOSE_PAREN);
			State = 1098;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		public StatementBlockContext Block;
		public ParenthesizedExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DO() { return GetToken(SPSLParser.KEYWORD_DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(SPSLParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 148, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1100;
			Match(KEYWORD_DO);
			State = 1101;
			_localctx.Block = statementBlock();
			State = 1102;
			Match(KEYWORD_WHILE);
			State = 1103;
			_localctx.Expression = parenthesizedExpression();
			State = 1104;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_parenthesizedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1106;
			Match(TOK_OPEN_PAREN);
			State = 1107;
			_localctx.Expression = expressionStatement(0);
			State = 1108;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceExpressionContext : ParserRuleContext {
		public LanguageDataTypeContext Type;
		public ParametersListContext Parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LanguageDataTypeContext languageDataType() {
			return GetRuleContext<LanguageDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersListContext parametersList() {
			return GetRuleContext<ParametersListContext>(0);
		}
		public NewInstanceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstanceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstanceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceExpressionContext newInstanceExpression() {
		NewInstanceExpressionContext _localctx = new NewInstanceExpressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_newInstanceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1110;
			_localctx.Type = languageDataType();
			State = 1111;
			Match(TOK_OPEN_PAREN);
			State = 1113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_THIS || _la==KEYWORD_BASE || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 2251799813685247L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 4363821015043L) != 0)) {
				{
				State = 1112;
				_localctx.Parameters = parametersList();
				}
			}

			State = 1115;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public ParametersListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParametersList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParametersList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersListContext parametersList() {
		ParametersListContext _localctx = new ParametersListContext(Context, State);
		EnterRule(_localctx, 154, RULE_parametersList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117;
			expressionStatement(0);
			State = 1122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 1118;
				Match(TOK_COMMA);
				State = 1119;
				expressionStatement(0);
				}
				}
				State = 1124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextAccessExpressionContext : ParserRuleContext {
		public IToken Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		public ContextAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterContextAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitContextAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextAccessExpressionContext contextAccessExpression() {
		ContextAccessExpressionContext _localctx = new ContextAccessExpressionContext(Context, State);
		EnterRule(_localctx, 156, RULE_contextAccessExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			_localctx.Identifier = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE) ) {
				_localctx.Identifier = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicExpressionContext : ParserRuleContext {
		public IToken Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public BasicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBasicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBasicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicExpressionContext basicExpression() {
		BasicExpressionContext _localctx = new BasicExpressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_basicExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1127;
			_localctx.Identifier = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceExpressionContext newInstanceExpression() {
			return GetRuleContext<NewInstanceExpressionContext>(0);
		}
		public InitializationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInitializationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInitializationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializationExpressionContext initializationExpression() {
		InitializationExpressionContext _localctx = new InitializationExpressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_initializationExpression);
		try {
			State = 1132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1129;
				basicExpression();
				}
				break;
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1130;
				primitiveExpression();
				}
				break;
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2D:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3D:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4D:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_MATRIX2D:
			case TYPE_MATRIX3D:
			case TYPE_MATRIX4D:
			case TYPE_MATRIX2X3D:
			case TYPE_MATRIX2X4D:
			case TYPE_MATRIX3X2D:
			case TYPE_MATRIX3X4D:
			case TYPE_MATRIX4X2D:
			case TYPE_MATRIX4X3D:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1131;
				newInstanceExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
	 
		public ExpressionStatementContext() { }
		public virtual void CopyFrom(ExpressionStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixUnaryOperationExpressionContext : ExpressionStatementContext {
		public AssignableExpressionContext Expression;
		public IToken Operator;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INCREMENT() { return GetToken(SPSLParser.OP_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DECREMENT() { return GetToken(SPSLParser.OP_DECREMENT, 0); }
		public PostfixUnaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPostfixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPostfixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionStatementContext {
		public AssignableExpressionContext Left;
		public IToken Operator;
		public ExpressionStatementContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS_ASSIGN() { return GetToken(SPSLParser.OP_PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS_ASSIGN() { return GetToken(SPSLParser.OP_MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL_ASSIGN() { return GetToken(SPSLParser.OP_MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGN() { return GetToken(SPSLParser.OP_DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MODULUS_ASSIGN() { return GetToken(SPSLParser.OP_MODULUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_OR_ASSIGN() { return GetToken(SPSLParser.OP_BITWISE_OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_AND_ASSIGN() { return GetToken(SPSLParser.OP_BITWISE_AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EXPONENT_ASSIGN() { return GetToken(SPSLParser.OP_EXPONENT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT_ASSIGN() { return GetToken(SPSLParser.OP_LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT_ASSIGN() { return GetToken(SPSLParser.OP_RSHIFT_ASSIGN, 0); }
		public AssignmentExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Condition;
		public ExpressionStatementContext WhenTrue;
		public ExpressionStatementContext WhenFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_QUESTION() { return GetToken(SPSLParser.TOK_QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COLON() { return GetToken(SPSLParser.TOK_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		public TernaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTernaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTernaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContext : ExpressionStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceExpressionContext newInstanceExpression() {
			return GetRuleContext<NewInstanceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainedExpressionContext chainedExpression() {
			return GetRuleContext<ChainedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		public ExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Left;
		public IToken Operator;
		public ExpressionStatementContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEQ_THAN() { return GetToken(SPSLParser.OP_LEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GEQ_THAN() { return GetToken(SPSLParser.OP_GEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(SPSLParser.OP_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIFFERENT() { return GetToken(SPSLParser.OP_DIFFERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS() { return GetToken(SPSLParser.OP_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS() { return GetToken(SPSLParser.OP_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(SPSLParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MODULUS() { return GetToken(SPSLParser.OP_MODULUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASTERISK() { return GetToken(SPSLParser.OP_ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PIPE() { return GetToken(SPSLParser.OP_PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AMPERSAND() { return GetToken(SPSLParser.OP_AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EXPONENT() { return GetToken(SPSLParser.OP_EXPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT() { return GetToken(SPSLParser.OP_LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT() { return GetToken(SPSLParser.OP_RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(SPSLParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(SPSLParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(SPSLParser.OP_XOR, 0); }
		public BinaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBinaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBinaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixUnaryOperationExpressionContext : ExpressionStatementContext {
		public IToken Operator;
		public AssignableExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INCREMENT() { return GetToken(SPSLParser.OP_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DECREMENT() { return GetToken(SPSLParser.OP_DECREMENT, 0); }
		public PrefixUnaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrefixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrefixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NOT() { return GetToken(SPSLParser.OP_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public NegateOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNegateOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNegateOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionStatementContext {
		public DataTypeContext Type;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public CastExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SignedExpressionContext : ExpressionStatementContext {
		public IToken Operator;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS() { return GetToken(SPSLParser.OP_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS() { return GetToken(SPSLParser.OP_PLUS, 0); }
		public SignedExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSignedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSignedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		return expressionStatement(0);
	}

	private ExpressionStatementContext expressionStatement(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, _parentState);
		ExpressionStatementContext _prevctx = _localctx;
		int _startState = 162;
		EnterRecursionRule(_localctx, 162, RULE_expressionStatement, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1135;
				basicExpression();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1136;
				primitiveExpression();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1137;
				newInstanceExpression();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1138;
				parenthesizedExpression();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1139;
				propertyMemberReferenceExpression();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1140;
				methodMemberReferenceExpression();
				}
				break;
			case 7:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1141;
				chainedExpression();
				}
				break;
			case 8:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1142;
				invocationExpression();
				}
				break;
			case 9:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1143;
				arrayAccessExpression();
				}
				break;
			case 10:
				{
				_localctx = new PostfixUnaryOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1144;
				((PostfixUnaryOperationExpressionContext)_localctx).Expression = assignableExpression();
				State = 1145;
				((PostfixUnaryOperationExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_INCREMENT || _la==OP_DECREMENT) ) {
					((PostfixUnaryOperationExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				{
				_localctx = new PrefixUnaryOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1147;
				((PrefixUnaryOperationExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_INCREMENT || _la==OP_DECREMENT) ) {
					((PrefixUnaryOperationExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1148;
				((PrefixUnaryOperationExpressionContext)_localctx).Expression = assignableExpression();
				}
				break;
			case 12:
				{
				_localctx = new NegateOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1149;
				Match(OP_NOT);
				State = 1150;
				((NegateOperationExpressionContext)_localctx).Expression = expressionStatement(34);
				}
				break;
			case 13:
				{
				_localctx = new SignedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1151;
				((SignedExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_PLUS || _la==OP_MINUS) ) {
					((SignedExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1152;
				((SignedExpressionContext)_localctx).Expression = expressionStatement(33);
				}
				break;
			case 14:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1153;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1154;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_ASSIGN);
				State = 1155;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(12);
				}
				break;
			case 15:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1157;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1158;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_PLUS_ASSIGN);
				State = 1159;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(11);
				}
				break;
			case 16:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1161;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1162;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MINUS_ASSIGN);
				State = 1163;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(10);
				}
				break;
			case 17:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1165;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1166;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MUL_ASSIGN);
				State = 1167;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(9);
				}
				break;
			case 18:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1169;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1170;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_DIV_ASSIGN);
				State = 1171;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(8);
				}
				break;
			case 19:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1173;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1174;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MODULUS_ASSIGN);
				State = 1175;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(7);
				}
				break;
			case 20:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1177;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1178;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_BITWISE_OR_ASSIGN);
				State = 1179;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(6);
				}
				break;
			case 21:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1181;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1182;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_BITWISE_AND_ASSIGN);
				State = 1183;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(5);
				}
				break;
			case 22:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1185;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1186;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_EXPONENT_ASSIGN);
				State = 1187;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(4);
				}
				break;
			case 23:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1189;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1190;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_LSHIFT_ASSIGN);
				State = 1191;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(3);
				}
				break;
			case 24:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1193;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1194;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_RSHIFT_ASSIGN);
				State = 1195;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(2);
				}
				break;
			case 25:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1197;
				Match(TOK_OPEN_PAREN);
				State = 1198;
				((CastExpressionContext)_localctx).Type = dataType();
				State = 1199;
				Match(TOK_CLOSE_PAREN);
				State = 1200;
				((CastExpressionContext)_localctx).Expression = expressionStatement(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1267;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
					case 1:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1204;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1205;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LEQ_THAN);
						State = 1206;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(33);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1207;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1208;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_GEQ_THAN);
						State = 1209;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(32);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1210;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1211;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LESSER_THAN);
						State = 1212;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(31);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1213;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1214;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_GREATER_THAN);
						State = 1215;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(30);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1216;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1217;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_EQUAL);
						State = 1218;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(29);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1219;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1220;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_DIFFERENT);
						State = 1221;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(28);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1222;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1223;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_PLUS);
						State = 1224;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(27);
						}
						break;
					case 8:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1225;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1226;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_MINUS);
						State = 1227;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(26);
						}
						break;
					case 9:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1228;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1229;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_DIV);
						State = 1230;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(25);
						}
						break;
					case 10:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1231;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1232;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_MODULUS);
						State = 1233;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(24);
						}
						break;
					case 11:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1234;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1235;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_ASTERISK);
						State = 1236;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(23);
						}
						break;
					case 12:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1237;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1238;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_PIPE);
						State = 1239;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(22);
						}
						break;
					case 13:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1240;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1241;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_AMPERSAND);
						State = 1242;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(21);
						}
						break;
					case 14:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1243;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1244;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_EXPONENT);
						State = 1245;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(19);
						}
						break;
					case 15:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1246;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1247;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LSHIFT);
						State = 1248;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(18);
						}
						break;
					case 16:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1249;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1250;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_RSHIFT);
						State = 1251;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(17);
						}
						break;
					case 17:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1252;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1253;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_AND);
						State = 1254;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(17);
						}
						break;
					case 18:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1255;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1256;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_OR);
						State = 1257;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(16);
						}
						break;
					case 19:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1258;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1259;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_XOR);
						State = 1260;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(15);
						}
						break;
					case 20:
						{
						_localctx = new TernaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((TernaryOperationExpressionContext)_localctx).Condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1261;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1262;
						Match(TOK_QUESTION);
						State = 1263;
						((TernaryOperationExpressionContext)_localctx).WhenTrue = expressionStatement(0);
						State = 1264;
						Match(TOK_COLON);
						State = 1265;
						((TernaryOperationExpressionContext)_localctx).WhenFalse = expressionStatement(13);
						}
						break;
					}
					} 
				}
				State = 1271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayAccessExpressionContext : ParserRuleContext {
		public ExpressionStatementContext Index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberReferenceExpressionContext memberReferenceExpression() {
			return GetRuleContext<MemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		public ArrayAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessExpressionContext arrayAccessExpression() {
		ArrayAccessExpressionContext _localctx = new ArrayAccessExpressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_arrayAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 1272;
				basicExpression();
				}
				break;
			case 2:
				{
				State = 1273;
				memberReferenceExpression();
				}
				break;
			case 3:
				{
				State = 1274;
				invocationExpression();
				}
				break;
			}
			State = 1277;
			Match(TOK_OPEN_BRACKET);
			State = 1278;
			_localctx.Index = expressionStatement(0);
			State = 1279;
			Match(TOK_CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainedExpressionContext assignableChainedExpression() {
			return GetRuleContext<AssignableChainedExpressionContext>(0);
		}
		public AssignableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableExpressionContext assignableExpression() {
		AssignableExpressionContext _localctx = new AssignableExpressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_assignableExpression);
		try {
			State = 1285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1281;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1282;
				arrayAccessExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1283;
				propertyMemberReferenceExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1284;
				assignableChainedExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_RETURN() { return GetToken(SPSLParser.KEYWORD_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1287;
			Match(KEYWORD_RETURN);
			State = 1289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_THIS || _la==KEYWORD_BASE || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & 2251799813685247L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & 4363821015043L) != 0)) {
				{
				State = 1288;
				_localctx.Expression = expressionStatement(0);
				}
			}

			State = 1291;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BREAK() { return GetToken(SPSLParser.KEYWORD_BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 170, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1293;
			Match(KEYWORD_BREAK);
			State = 1294;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONTINUE() { return GetToken(SPSLParser.KEYWORD_CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 172, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1296;
			Match(KEYWORD_CONTINUE);
			State = 1297;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DISCARD() { return GetToken(SPSLParser.KEYWORD_DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public DiscardStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDiscardStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDiscardStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiscardStatementContext discardStatement() {
		DiscardStatementContext _localctx = new DiscardStatementContext(Context, State);
		EnterRule(_localctx, 174, RULE_discardStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299;
			Match(KEYWORD_DISCARD);
			State = 1300;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveControlFlowStatementContext : ParserRuleContext {
		public BreakStatementContext BreakStatement;
		public ReturnStatementContext ReturnStatement;
		public ContinueStatementContext ContinueStatement;
		public DiscardStatementContext DiscardStatement;
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardStatementContext discardStatement() {
			return GetRuleContext<DiscardStatementContext>(0);
		}
		public LeaveControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveControlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterLeaveControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitLeaveControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveControlFlowStatementContext leaveControlFlowStatement() {
		LeaveControlFlowStatementContext _localctx = new LeaveControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 176, RULE_leaveControlFlowStatement);
		try {
			State = 1306;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1302;
				_localctx.BreakStatement = breakStatement();
				}
				break;
			case KEYWORD_RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1303;
				_localctx.ReturnStatement = returnStatement();
				}
				break;
			case KEYWORD_CONTINUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1304;
				_localctx.ContinueStatement = continueStatement();
				}
				break;
			case KEYWORD_DISCARD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1305;
				_localctx.DiscardStatement = discardStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StayControlFlowStatementContext : ParserRuleContext {
		public VariableDeclarationContext VariableDeclaration;
		public ExpressionStatementContext ExpressionStatement;
		public StatementBlockContext StatementBlock;
		public IfStatementContext IfStatement;
		public SwitchStatementContext SwitchStatement;
		public WhileStatementContext WhileStatement;
		public ForStatementContext ForStatement;
		public DoWhileStatementContext DoWhileStatement;
		public PermuteStatementContext PermuteStatement;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermuteStatementContext permuteStatement() {
			return GetRuleContext<PermuteStatementContext>(0);
		}
		public StayControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stayControlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStayControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStayControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStayControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StayControlFlowStatementContext stayControlFlowStatement() {
		StayControlFlowStatementContext _localctx = new StayControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 178, RULE_stayControlFlowStatement);
		try {
			State = 1321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1308;
				_localctx.VariableDeclaration = variableDeclaration();
				State = 1309;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1311;
				_localctx.ExpressionStatement = expressionStatement(0);
				State = 1312;
				Match(TOK_SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1314;
				_localctx.StatementBlock = statementBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1315;
				_localctx.IfStatement = ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1316;
				_localctx.SwitchStatement = switchStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1317;
				_localctx.WhileStatement = whileStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1318;
				_localctx.ForStatement = forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1319;
				_localctx.DoWhileStatement = doWhileStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1320;
				_localctx.PermuteStatement = permuteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StayControlFlowStatementContext StayControlFlowStatement;
		public LeaveControlFlowStatementContext LeaveControlFlowStatement;
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement() {
			return GetRuleContext<StayControlFlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveControlFlowStatementContext leaveControlFlowStatement() {
			return GetRuleContext<LeaveControlFlowStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 180, RULE_statement);
		try {
			State = 1325;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_THIS:
			case KEYWORD_BASE:
			case KEYWORD_IF:
			case KEYWORD_SWITCH:
			case KEYWORD_FOR:
			case KEYWORD_DO:
			case KEYWORD_WHILE:
			case KEYWORD_CONST:
			case KEYWORD_PERMUTE:
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2D:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3D:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4D:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_MATRIX2D:
			case TYPE_MATRIX3D:
			case TYPE_MATRIX4D:
			case TYPE_MATRIX2X3D:
			case TYPE_MATRIX2X4D:
			case TYPE_MATRIX3X2D:
			case TYPE_MATRIX3X4D:
			case TYPE_MATRIX4X2D:
			case TYPE_MATRIX4X3D:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
			case TOK_OPEN_PAREN:
			case TOK_OPEN_BRACE:
			case OP_PLUS:
			case OP_MINUS:
			case OP_INCREMENT:
			case OP_DECREMENT:
			case OP_NOT:
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1323;
				_localctx.StayControlFlowStatement = stayControlFlowStatement();
				}
				break;
			case KEYWORD_RETURN:
			case KEYWORD_BREAK:
			case KEYWORD_CONTINUE:
			case KEYWORD_DISCARD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1324;
				_localctx.LeaveControlFlowStatement = leaveControlFlowStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		public IToken Literal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(SPSLParser.BoolLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleLiteral() { return GetToken(SPSLParser.DoubleLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatLiteral() { return GetToken(SPSLParser.FloatLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnsignedIntegerLiteral() { return GetToken(SPSLParser.UnsignedIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SPSLParser.StringLiteral, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 182, RULE_primitiveExpression);
		try {
			State = 1333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1327;
				_localctx.Literal = Match(BoolLiteral);
				}
				break;
			case DoubleLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1328;
				_localctx.Literal = Match(DoubleLiteral);
				}
				break;
			case FloatLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1329;
				_localctx.Literal = Match(FloatLiteral);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1330;
				_localctx.Literal = Match(IntegerLiteral);
				}
				break;
			case UnsignedIntegerLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1331;
				_localctx.Literal = Match(UnsignedIntegerLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1332;
				_localctx.Literal = Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
	 
		public ConstantExpressionContext() { }
		public virtual void CopyFrom(ConstantExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UserDefinedConstantExpressionContext : ConstantExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UserDefinedConstantExpressionContext(ConstantExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUserDefinedConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUserDefinedConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveConstantExpressionContext : ConstantExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public PrimitiveConstantExpressionContext(ConstantExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 184, RULE_constantExpression);
		try {
			State = 1337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
				_localctx = new PrimitiveConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1335;
				primitiveExpression();
				}
				break;
			case IDENTIFIER:
				_localctx = new UserDefinedConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1336;
				namespacedTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LanguageDataTypeContext : ParserRuleContext {
		public bool IsArray;
		public DataTypeKind DataType;
		public IToken ArraySize;
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveDataTypeContext primitiveDataType() {
			return GetRuleContext<PrimitiveDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinDataTypeContext builtinDataType() {
			return GetRuleContext<BuiltinDataTypeContext>(0);
		}
		public LanguageDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_languageDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterLanguageDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitLanguageDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLanguageDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LanguageDataTypeContext languageDataType() {
		LanguageDataTypeContext _localctx = new LanguageDataTypeContext(Context, State);
		EnterRule(_localctx, 186, RULE_languageDataType);
		int _la;
		try {
			State = 1361;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1339;
				primitiveDataType();
				State = 1346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1340;
					Match(TOK_OPEN_BRACKET);
					State = 1342;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1341;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1344;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.Primitive;
				}
				break;
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2D:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3D:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4D:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_MATRIX2D:
			case TYPE_MATRIX3D:
			case TYPE_MATRIX4D:
			case TYPE_MATRIX2X3D:
			case TYPE_MATRIX2X4D:
			case TYPE_MATRIX3X2D:
			case TYPE_MATRIX3X4D:
			case TYPE_MATRIX4X2D:
			case TYPE_MATRIX4X3D:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1350;
				builtinDataType();
				State = 1357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1351;
					Match(TOK_OPEN_BRACKET);
					State = 1353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1352;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1355;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.BuiltIn;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomDataTypeContext : ParserRuleContext {
		public bool IsArray;
		public DataTypeKind DataType;
		public IToken ArraySize;
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedDataTypeContext userDefinedDataType() {
			return GetRuleContext<UserDefinedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		public CustomDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCustomDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCustomDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomDataTypeContext customDataType() {
		CustomDataTypeContext _localctx = new CustomDataTypeContext(Context, State);
		EnterRule(_localctx, 188, RULE_customDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1363;
			userDefinedDataType();
			State = 1370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOK_OPEN_BRACKET) {
				{
				State = 1364;
				Match(TOK_OPEN_BRACKET);
				State = 1366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IntegerLiteral) {
					{
					State = 1365;
					_localctx.ArraySize = Match(IntegerLiteral);
					}
				}

				State = 1368;
				Match(TOK_CLOSE_BRACKET);
				_localctx.IsArray =  true;
				}
			}

			_localctx.DataType =  DataTypeKind.UserDefined;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LanguageDataTypeContext languageDataType() {
			return GetRuleContext<LanguageDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CustomDataTypeContext customDataType() {
			return GetRuleContext<CustomDataTypeContext>(0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 190, RULE_dataType);
		try {
			State = 1376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2D:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3D:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4D:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_MATRIX2D:
			case TYPE_MATRIX3D:
			case TYPE_MATRIX4D:
			case TYPE_MATRIX2X3D:
			case TYPE_MATRIX2X4D:
			case TYPE_MATRIX3X2D:
			case TYPE_MATRIX3X4D:
			case TYPE_MATRIX4X2D:
			case TYPE_MATRIX4X3D:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1374;
				languageDataType();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1375;
				customDataType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserDefinedDataTypeContext : ParserRuleContext {
		public NamespacedTypeNameContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UserDefinedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUserDefinedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUserDefinedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedDataTypeContext userDefinedDataType() {
		UserDefinedDataTypeContext _localctx = new UserDefinedDataTypeContext(Context, State);
		EnterRule(_localctx, 192, RULE_userDefinedDataType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1378;
			_localctx.Type = namespacedTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveDataTypeContext : ParserRuleContext {
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VOID() { return GetToken(SPSLParser.TYPE_VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(SPSLParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(SPSLParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT() { return GetToken(SPSLParser.TYPE_UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(SPSLParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_DOUBLE() { return GetToken(SPSLParser.TYPE_DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(SPSLParser.TYPE_STRING, 0); }
		public PrimitiveDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveDataTypeContext primitiveDataType() {
		PrimitiveDataTypeContext _localctx = new PrimitiveDataTypeContext(Context, State);
		EnterRule(_localctx, 194, RULE_primitiveDataType);
		try {
			State = 1387;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1380;
				_localctx.Type = Match(TYPE_VOID);
				}
				break;
			case TYPE_BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1381;
				_localctx.Type = Match(TYPE_BOOL);
				}
				break;
			case TYPE_INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1382;
				_localctx.Type = Match(TYPE_INT);
				}
				break;
			case TYPE_UINT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1383;
				_localctx.Type = Match(TYPE_UINT);
				}
				break;
			case TYPE_FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1384;
				_localctx.Type = Match(TYPE_FLOAT);
				}
				break;
			case TYPE_DOUBLE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1385;
				_localctx.Type = Match(TYPE_DOUBLE);
				}
				break;
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1386;
				_localctx.Type = Match(TYPE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinDataTypeContext : ParserRuleContext {
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2B() { return GetToken(SPSLParser.TYPE_VECTOR2B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2F() { return GetToken(SPSLParser.TYPE_VECTOR2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2D() { return GetToken(SPSLParser.TYPE_VECTOR2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2I() { return GetToken(SPSLParser.TYPE_VECTOR2I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2UI() { return GetToken(SPSLParser.TYPE_VECTOR2UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3B() { return GetToken(SPSLParser.TYPE_VECTOR3B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3F() { return GetToken(SPSLParser.TYPE_VECTOR3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3D() { return GetToken(SPSLParser.TYPE_VECTOR3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3I() { return GetToken(SPSLParser.TYPE_VECTOR3I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3UI() { return GetToken(SPSLParser.TYPE_VECTOR3UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4B() { return GetToken(SPSLParser.TYPE_VECTOR4B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4F() { return GetToken(SPSLParser.TYPE_VECTOR4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4D() { return GetToken(SPSLParser.TYPE_VECTOR4D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4I() { return GetToken(SPSLParser.TYPE_VECTOR4I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4UI() { return GetToken(SPSLParser.TYPE_VECTOR4UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2F() { return GetToken(SPSLParser.TYPE_MATRIX2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2D() { return GetToken(SPSLParser.TYPE_MATRIX2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3F() { return GetToken(SPSLParser.TYPE_MATRIX3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3D() { return GetToken(SPSLParser.TYPE_MATRIX3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4F() { return GetToken(SPSLParser.TYPE_MATRIX4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4D() { return GetToken(SPSLParser.TYPE_MATRIX4D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X3F() { return GetToken(SPSLParser.TYPE_MATRIX2X3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X3D() { return GetToken(SPSLParser.TYPE_MATRIX2X3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X4F() { return GetToken(SPSLParser.TYPE_MATRIX2X4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X4D() { return GetToken(SPSLParser.TYPE_MATRIX2X4D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X2F() { return GetToken(SPSLParser.TYPE_MATRIX3X2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X2D() { return GetToken(SPSLParser.TYPE_MATRIX3X2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X4F() { return GetToken(SPSLParser.TYPE_MATRIX3X4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X4D() { return GetToken(SPSLParser.TYPE_MATRIX3X4D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X2F() { return GetToken(SPSLParser.TYPE_MATRIX4X2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X2D() { return GetToken(SPSLParser.TYPE_MATRIX4X2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X3F() { return GetToken(SPSLParser.TYPE_MATRIX4X3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X3D() { return GetToken(SPSLParser.TYPE_MATRIX4X3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COLOR3() { return GetToken(SPSLParser.TYPE_COLOR3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COLOR4() { return GetToken(SPSLParser.TYPE_COLOR4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SAMPLER() { return GetToken(SPSLParser.TYPE_SAMPLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE1D() { return GetToken(SPSLParser.TYPE_TEXTURE1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE1DARRAY() { return GetToken(SPSLParser.TYPE_TEXTURE1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE2D() { return GetToken(SPSLParser.TYPE_TEXTURE2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE2DARRAY() { return GetToken(SPSLParser.TYPE_TEXTURE2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE3D() { return GetToken(SPSLParser.TYPE_TEXTURE3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CUBEMAP() { return GetToken(SPSLParser.TYPE_CUBEMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CUBEMAPARRAY() { return GetToken(SPSLParser.TYPE_CUBEMAPARRAY, 0); }
		public BuiltinDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBuiltinDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBuiltinDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinDataTypeContext builtinDataType() {
		BuiltinDataTypeContext _localctx = new BuiltinDataTypeContext(Context, State);
		EnterRule(_localctx, 196, RULE_builtinDataType);
		try {
			State = 1432;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VECTOR2B:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1389;
				_localctx.Type = Match(TYPE_VECTOR2B);
				}
				break;
			case TYPE_VECTOR2F:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1390;
				_localctx.Type = Match(TYPE_VECTOR2F);
				}
				break;
			case TYPE_VECTOR2D:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1391;
				_localctx.Type = Match(TYPE_VECTOR2D);
				}
				break;
			case TYPE_VECTOR2I:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1392;
				_localctx.Type = Match(TYPE_VECTOR2I);
				}
				break;
			case TYPE_VECTOR2UI:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1393;
				_localctx.Type = Match(TYPE_VECTOR2UI);
				}
				break;
			case TYPE_VECTOR3B:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1394;
				_localctx.Type = Match(TYPE_VECTOR3B);
				}
				break;
			case TYPE_VECTOR3F:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1395;
				_localctx.Type = Match(TYPE_VECTOR3F);
				}
				break;
			case TYPE_VECTOR3D:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1396;
				_localctx.Type = Match(TYPE_VECTOR3D);
				}
				break;
			case TYPE_VECTOR3I:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1397;
				_localctx.Type = Match(TYPE_VECTOR3I);
				}
				break;
			case TYPE_VECTOR3UI:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1398;
				_localctx.Type = Match(TYPE_VECTOR3UI);
				}
				break;
			case TYPE_VECTOR4B:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1399;
				_localctx.Type = Match(TYPE_VECTOR4B);
				}
				break;
			case TYPE_VECTOR4F:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1400;
				_localctx.Type = Match(TYPE_VECTOR4F);
				}
				break;
			case TYPE_VECTOR4D:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1401;
				_localctx.Type = Match(TYPE_VECTOR4D);
				}
				break;
			case TYPE_VECTOR4I:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1402;
				_localctx.Type = Match(TYPE_VECTOR4I);
				}
				break;
			case TYPE_VECTOR4UI:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1403;
				_localctx.Type = Match(TYPE_VECTOR4UI);
				}
				break;
			case TYPE_MATRIX2F:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1404;
				_localctx.Type = Match(TYPE_MATRIX2F);
				}
				break;
			case TYPE_MATRIX2D:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1405;
				_localctx.Type = Match(TYPE_MATRIX2D);
				}
				break;
			case TYPE_MATRIX3F:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1406;
				_localctx.Type = Match(TYPE_MATRIX3F);
				}
				break;
			case TYPE_MATRIX3D:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1407;
				_localctx.Type = Match(TYPE_MATRIX3D);
				}
				break;
			case TYPE_MATRIX4F:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1408;
				_localctx.Type = Match(TYPE_MATRIX4F);
				}
				break;
			case TYPE_MATRIX4D:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1409;
				_localctx.Type = Match(TYPE_MATRIX4D);
				}
				break;
			case TYPE_MATRIX2X3F:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1410;
				_localctx.Type = Match(TYPE_MATRIX2X3F);
				}
				break;
			case TYPE_MATRIX2X3D:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1411;
				_localctx.Type = Match(TYPE_MATRIX2X3D);
				}
				break;
			case TYPE_MATRIX2X4F:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1412;
				_localctx.Type = Match(TYPE_MATRIX2X4F);
				}
				break;
			case TYPE_MATRIX2X4D:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1413;
				_localctx.Type = Match(TYPE_MATRIX2X4D);
				}
				break;
			case TYPE_MATRIX3X2F:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1414;
				_localctx.Type = Match(TYPE_MATRIX3X2F);
				}
				break;
			case TYPE_MATRIX3X2D:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1415;
				_localctx.Type = Match(TYPE_MATRIX3X2D);
				}
				break;
			case TYPE_MATRIX3X4F:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1416;
				_localctx.Type = Match(TYPE_MATRIX3X4F);
				}
				break;
			case TYPE_MATRIX3X4D:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1417;
				_localctx.Type = Match(TYPE_MATRIX3X4D);
				}
				break;
			case TYPE_MATRIX4X2F:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1418;
				_localctx.Type = Match(TYPE_MATRIX4X2F);
				}
				break;
			case TYPE_MATRIX4X2D:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1419;
				_localctx.Type = Match(TYPE_MATRIX4X2D);
				}
				break;
			case TYPE_MATRIX4X3F:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1420;
				_localctx.Type = Match(TYPE_MATRIX4X3F);
				}
				break;
			case TYPE_MATRIX4X3D:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1421;
				_localctx.Type = Match(TYPE_MATRIX4X3D);
				}
				break;
			case TYPE_COLOR3:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1422;
				_localctx.Type = Match(TYPE_COLOR3);
				}
				break;
			case TYPE_COLOR4:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1423;
				_localctx.Type = Match(TYPE_COLOR4);
				}
				break;
			case TYPE_SAMPLER:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1424;
				_localctx.Type = Match(TYPE_SAMPLER);
				}
				break;
			case TYPE_TEXTURE1D:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1425;
				_localctx.Type = Match(TYPE_TEXTURE1D);
				}
				break;
			case TYPE_TEXTURE1DARRAY:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1426;
				_localctx.Type = Match(TYPE_TEXTURE1DARRAY);
				}
				break;
			case TYPE_TEXTURE2D:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1427;
				_localctx.Type = Match(TYPE_TEXTURE2D);
				}
				break;
			case TYPE_TEXTURE2DARRAY:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1428;
				_localctx.Type = Match(TYPE_TEXTURE2DARRAY);
				}
				break;
			case TYPE_TEXTURE3D:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1429;
				_localctx.Type = Match(TYPE_TEXTURE3D);
				}
				break;
			case TYPE_CUBEMAP:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1430;
				_localctx.Type = Match(TYPE_CUBEMAP);
				}
				break;
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1431;
				_localctx.Type = Match(TYPE_CUBEMAPARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 71: return caseStatement_sempred((CaseStatementContext)_localctx, predIndex);
		case 81: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		}
		return true;
	}
	private bool caseStatement_sempred(CaseStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return _localctx.IsBraceOpen == _localctx.IsBraceClose;
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 32);
		case 2: return Precpred(Context, 31);
		case 3: return Precpred(Context, 30);
		case 4: return Precpred(Context, 29);
		case 5: return Precpred(Context, 28);
		case 6: return Precpred(Context, 27);
		case 7: return Precpred(Context, 26);
		case 8: return Precpred(Context, 25);
		case 9: return Precpred(Context, 24);
		case 10: return Precpred(Context, 23);
		case 11: return Precpred(Context, 22);
		case 12: return Precpred(Context, 21);
		case 13: return Precpred(Context, 20);
		case 14: return Precpred(Context, 19);
		case 15: return Precpred(Context, 18);
		case 16: return Precpred(Context, 17);
		case 17: return Precpred(Context, 16);
		case 18: return Precpred(Context, 15);
		case 19: return Precpred(Context, 14);
		case 20: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,178,1435,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		1,0,3,0,200,8,0,1,0,5,0,203,8,0,10,0,12,0,206,9,0,1,0,3,0,209,8,0,1,0,
		5,0,212,8,0,10,0,12,0,215,9,0,1,0,5,0,218,8,0,10,0,12,0,221,9,0,1,0,5,
		0,224,8,0,10,0,12,0,227,9,0,1,0,1,0,1,1,3,1,232,8,1,1,1,5,1,235,8,1,10,
		1,12,1,238,9,1,1,1,3,1,241,8,1,1,1,5,1,244,8,1,10,1,12,1,247,9,1,1,1,5,
		1,250,8,1,10,1,12,1,253,9,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,5,
		3,265,8,3,10,3,12,3,268,9,3,1,4,1,4,1,4,1,4,1,4,3,4,275,8,4,1,5,3,5,278,
		8,5,1,5,1,5,3,5,282,8,5,1,5,1,5,1,5,1,5,1,5,1,6,3,6,290,8,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,7,3,7,300,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,309,
		8,7,10,7,12,7,312,9,7,1,7,1,7,1,7,1,7,1,7,1,8,3,8,320,8,8,1,8,5,8,323,
		8,8,10,8,12,8,326,9,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,338,
		8,9,1,10,3,10,341,8,10,1,10,1,10,1,10,1,10,5,10,347,8,10,10,10,12,10,350,
		9,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,3,12,360,8,12,1,12,1,12,1,
		12,5,12,365,8,12,10,12,12,12,368,9,12,1,12,1,12,1,12,3,12,373,8,12,1,12,
		1,12,1,12,5,12,378,8,12,10,12,12,12,381,9,12,1,12,1,12,3,12,385,8,12,1,
		13,1,13,1,13,1,13,1,13,1,13,3,13,393,8,13,1,14,1,14,1,14,1,14,1,14,1,15,
		3,15,401,8,15,1,15,1,15,1,15,1,15,1,15,5,15,408,8,15,10,15,12,15,411,9,
		15,1,15,1,15,1,16,1,16,1,16,1,16,3,16,419,8,16,1,17,1,17,1,17,5,17,424,
		8,17,10,17,12,17,427,9,17,1,18,3,18,430,8,18,1,18,1,18,1,18,1,18,5,18,
		436,8,18,10,18,12,18,439,9,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,447,8,
		19,1,19,1,19,3,19,451,8,19,1,20,3,20,454,8,20,1,20,1,20,1,20,5,20,459,
		8,20,10,20,12,20,462,9,20,1,20,1,20,1,21,3,21,467,8,21,1,21,1,21,1,21,
		5,21,472,8,21,10,21,12,21,475,9,21,1,21,1,21,3,21,479,8,21,5,21,481,8,
		21,10,21,12,21,484,9,21,1,21,1,21,1,22,3,22,489,8,22,1,22,1,22,1,22,5,
		22,494,8,22,10,22,12,22,497,9,22,1,22,5,22,500,8,22,10,22,12,22,503,9,
		22,1,22,1,22,1,23,1,23,3,23,509,8,23,1,23,1,23,1,23,1,23,3,23,515,8,23,
		1,24,1,24,3,24,519,8,24,1,24,3,24,522,8,24,1,24,1,24,1,24,1,24,3,24,528,
		8,24,1,24,1,24,3,24,532,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,1,24,1,24,3,24,546,8,24,1,24,1,24,3,24,550,8,24,3,24,552,8,24,
		1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,5,27,565,8,27,10,
		27,12,27,568,9,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,
		28,580,8,28,1,29,3,29,583,8,29,1,29,1,29,1,29,1,29,1,29,3,29,590,8,29,
		1,29,1,29,1,29,1,29,4,29,596,8,29,11,29,12,29,597,1,29,1,29,3,29,602,8,
		29,1,30,3,30,605,8,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
		3,31,617,8,31,1,32,1,32,3,32,621,8,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
		33,1,33,1,33,3,33,632,8,33,1,33,1,33,5,33,636,8,33,10,33,12,33,639,9,33,
		1,33,1,33,3,33,643,8,33,5,33,645,8,33,10,33,12,33,648,9,33,1,33,1,33,3,
		33,652,8,33,1,34,1,34,1,34,1,34,1,34,1,34,5,34,660,8,34,10,34,12,34,663,
		9,34,3,34,665,8,34,1,34,3,34,668,8,34,1,35,1,35,3,35,672,8,35,1,36,1,36,
		1,36,1,36,1,37,1,37,1,37,1,37,1,38,5,38,683,8,38,10,38,12,38,686,9,38,
		1,38,1,38,3,38,690,8,38,1,38,1,38,1,38,1,38,5,38,696,8,38,10,38,12,38,
		699,9,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,707,8,39,10,39,12,39,710,9,
		39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,718,8,39,1,40,1,40,1,40,1,40,1,40,
		1,41,3,41,726,8,41,1,41,5,41,729,8,41,10,41,12,41,732,9,41,1,41,3,41,735,
		8,41,1,41,3,41,738,8,41,1,41,1,41,1,41,1,41,5,41,744,8,41,10,41,12,41,
		747,9,41,1,41,1,41,3,41,751,8,41,1,41,5,41,754,8,41,10,41,12,41,757,9,
		41,1,41,3,41,760,8,41,1,41,3,41,763,8,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,3,41,772,8,41,1,42,5,42,775,8,42,10,42,12,42,778,9,42,1,42,1,42,1,
		42,1,42,1,43,5,43,785,8,43,10,43,12,43,788,9,43,1,43,1,43,1,43,1,43,3,
		43,794,8,43,1,43,1,43,1,43,3,43,799,8,43,1,44,3,44,802,8,44,1,44,5,44,
		805,8,44,10,44,12,44,808,9,44,1,44,1,44,1,44,1,44,1,44,5,44,815,8,44,10,
		44,12,44,818,9,44,1,44,3,44,821,8,44,1,45,3,45,824,8,45,1,45,5,45,827,
		8,45,10,45,12,45,830,9,45,1,45,1,45,1,45,3,45,835,8,45,1,45,1,45,1,46,
		1,46,3,46,841,8,46,1,46,1,46,1,46,1,46,5,46,847,8,46,10,46,12,46,850,9,
		46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,859,8,46,1,47,1,47,1,47,1,47,
		1,48,1,48,1,48,1,48,3,48,869,8,48,1,49,3,49,872,8,49,1,49,5,49,875,8,49,
		10,49,12,49,878,9,49,1,49,1,49,3,49,882,8,49,1,49,1,49,3,49,886,8,49,1,
		49,5,49,889,8,49,10,49,12,49,892,9,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,3,49,901,8,49,1,50,1,50,1,50,1,50,1,50,1,51,3,51,909,8,51,1,51,1,51,
		1,51,1,51,1,52,1,52,3,52,917,8,52,1,52,1,52,1,53,1,53,1,53,5,53,924,8,
		53,10,53,12,53,927,9,53,1,54,3,54,930,8,54,1,54,5,54,933,8,54,10,54,12,
		54,936,9,54,1,54,3,54,939,8,54,1,54,1,54,1,54,1,54,3,54,945,8,54,1,55,
		5,55,948,8,55,10,55,12,55,951,9,55,1,55,3,55,954,8,55,1,56,1,56,5,56,958,
		8,56,10,56,12,56,961,9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,3,57,
		971,8,57,1,58,1,58,1,58,3,58,976,8,58,1,59,1,59,1,59,4,59,981,8,59,11,
		59,12,59,982,1,60,1,60,3,60,987,8,60,1,61,1,61,1,61,4,61,992,8,61,11,61,
		12,61,993,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,64,1,64,3,64,1006,
		8,64,1,65,1,65,1,65,3,65,1011,8,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,
		1,66,1,66,1,66,3,66,1023,8,66,1,67,1,67,1,67,1,67,1,67,1,67,5,67,1031,
		8,67,10,67,12,67,1034,9,67,1,67,3,67,1037,8,67,1,68,1,68,1,68,3,68,1042,
		8,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,
		1,70,5,70,1058,8,70,10,70,12,70,1061,9,70,1,70,1,70,1,71,1,71,1,71,1,71,
		1,71,3,71,1070,8,71,1,71,5,71,1073,8,71,10,71,12,71,1076,9,71,1,71,1,71,
		1,71,3,71,1081,8,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,
		1,75,1,75,1,75,1,75,1,76,1,76,1,76,3,76,1114,8,76,1,76,1,76,1,77,1,77,
		1,77,5,77,1121,8,77,10,77,12,77,1124,9,77,1,78,1,78,1,79,1,79,1,80,1,80,
		1,80,3,80,1133,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,3,81,1203,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,1268,
		8,81,10,81,12,81,1271,9,81,1,82,1,82,1,82,3,82,1276,8,82,1,82,1,82,1,82,
		1,82,1,83,1,83,1,83,1,83,3,83,1286,8,83,1,84,1,84,3,84,1290,8,84,1,84,
		1,84,1,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,1,88,1,88,1,88,1,88,
		3,88,1307,8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
		1,89,1,89,3,89,1322,8,89,1,90,1,90,3,90,1326,8,90,1,91,1,91,1,91,1,91,
		1,91,1,91,3,91,1334,8,91,1,92,1,92,3,92,1338,8,92,1,93,1,93,1,93,3,93,
		1343,8,93,1,93,1,93,3,93,1347,8,93,1,93,1,93,1,93,1,93,1,93,3,93,1354,
		8,93,1,93,1,93,3,93,1358,8,93,1,93,1,93,3,93,1362,8,93,1,94,1,94,1,94,
		3,94,1367,8,94,1,94,1,94,3,94,1371,8,94,1,94,1,94,1,95,1,95,3,95,1377,
		8,95,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1388,8,97,1,98,
		1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
		1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
		1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
		3,98,1433,8,98,1,98,0,1,162,99,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
		192,194,196,0,12,2,0,12,12,14,18,1,0,35,37,2,0,12,12,14,17,1,0,2,4,1,0,
		6,8,2,0,57,57,64,66,1,0,64,66,3,0,27,27,29,30,57,57,1,0,144,149,1,0,40,
		41,1,0,150,151,1,0,137,138,1616,0,199,1,0,0,0,2,231,1,0,0,0,4,257,1,0,
		0,0,6,261,1,0,0,0,8,274,1,0,0,0,10,277,1,0,0,0,12,289,1,0,0,0,14,299,1,
		0,0,0,16,319,1,0,0,0,18,337,1,0,0,0,20,340,1,0,0,0,22,353,1,0,0,0,24,384,
		1,0,0,0,26,386,1,0,0,0,28,394,1,0,0,0,30,400,1,0,0,0,32,414,1,0,0,0,34,
		420,1,0,0,0,36,429,1,0,0,0,38,442,1,0,0,0,40,453,1,0,0,0,42,466,1,0,0,
		0,44,488,1,0,0,0,46,508,1,0,0,0,48,551,1,0,0,0,50,553,1,0,0,0,52,558,1,
		0,0,0,54,566,1,0,0,0,56,579,1,0,0,0,58,601,1,0,0,0,60,604,1,0,0,0,62,616,
		1,0,0,0,64,618,1,0,0,0,66,651,1,0,0,0,68,653,1,0,0,0,70,671,1,0,0,0,72,
		673,1,0,0,0,74,677,1,0,0,0,76,684,1,0,0,0,78,717,1,0,0,0,80,719,1,0,0,
		0,82,771,1,0,0,0,84,776,1,0,0,0,86,798,1,0,0,0,88,820,1,0,0,0,90,823,1,
		0,0,0,92,858,1,0,0,0,94,860,1,0,0,0,96,868,1,0,0,0,98,900,1,0,0,0,100,
		902,1,0,0,0,102,908,1,0,0,0,104,914,1,0,0,0,106,920,1,0,0,0,108,929,1,
		0,0,0,110,949,1,0,0,0,112,955,1,0,0,0,114,970,1,0,0,0,116,975,1,0,0,0,
		118,977,1,0,0,0,120,986,1,0,0,0,122,988,1,0,0,0,124,995,1,0,0,0,126,999,
		1,0,0,0,128,1005,1,0,0,0,130,1007,1,0,0,0,132,1014,1,0,0,0,134,1024,1,
		0,0,0,136,1041,1,0,0,0,138,1048,1,0,0,0,140,1051,1,0,0,0,142,1064,1,0,
		0,0,144,1084,1,0,0,0,146,1090,1,0,0,0,148,1100,1,0,0,0,150,1106,1,0,0,
		0,152,1110,1,0,0,0,154,1117,1,0,0,0,156,1125,1,0,0,0,158,1127,1,0,0,0,
		160,1132,1,0,0,0,162,1202,1,0,0,0,164,1275,1,0,0,0,166,1285,1,0,0,0,168,
		1287,1,0,0,0,170,1293,1,0,0,0,172,1296,1,0,0,0,174,1299,1,0,0,0,176,1306,
		1,0,0,0,178,1321,1,0,0,0,180,1325,1,0,0,0,182,1333,1,0,0,0,184,1337,1,
		0,0,0,186,1361,1,0,0,0,188,1363,1,0,0,0,190,1376,1,0,0,0,192,1378,1,0,
		0,0,194,1387,1,0,0,0,196,1432,1,0,0,0,198,200,5,169,0,0,199,198,1,0,0,
		0,199,200,1,0,0,0,200,204,1,0,0,0,201,203,3,70,35,0,202,201,1,0,0,0,203,
		206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,208,1,0,0,0,206,204,1,
		0,0,0,207,209,3,4,2,0,208,207,1,0,0,0,208,209,1,0,0,0,209,219,1,0,0,0,
		210,212,5,169,0,0,211,210,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,
		214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,0,0,216,218,3,50,25,0,217,213,
		1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,225,1,0,0,
		0,221,219,1,0,0,0,222,224,3,8,4,0,223,222,1,0,0,0,224,227,1,0,0,0,225,
		223,1,0,0,0,225,226,1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,
		0,0,1,229,1,1,0,0,0,230,232,5,169,0,0,231,230,1,0,0,0,231,232,1,0,0,0,
		232,236,1,0,0,0,233,235,3,70,35,0,234,233,1,0,0,0,235,238,1,0,0,0,236,
		234,1,0,0,0,236,237,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,239,241,3,
		4,2,0,240,239,1,0,0,0,240,241,1,0,0,0,241,251,1,0,0,0,242,244,5,169,0,
		0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,
		248,1,0,0,0,247,245,1,0,0,0,248,250,3,50,25,0,249,245,1,0,0,0,250,253,
		1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,
		0,254,255,3,42,21,0,255,256,5,0,0,1,256,3,1,0,0,0,257,258,5,10,0,0,258,
		259,3,6,3,0,259,260,5,128,0,0,260,5,1,0,0,0,261,266,5,178,0,0,262,263,
		5,134,0,0,263,265,5,178,0,0,264,262,1,0,0,0,265,268,1,0,0,0,266,264,1,
		0,0,0,266,267,1,0,0,0,267,7,1,0,0,0,268,266,1,0,0,0,269,275,3,18,9,0,270,
		275,3,24,12,0,271,275,3,30,15,0,272,275,3,36,18,0,273,275,3,40,20,0,274,
		269,1,0,0,0,274,270,1,0,0,0,274,271,1,0,0,0,274,272,1,0,0,0,274,273,1,
		0,0,0,275,9,1,0,0,0,276,278,5,169,0,0,277,276,1,0,0,0,277,278,1,0,0,0,
		278,281,1,0,0,0,279,280,5,56,0,0,280,282,6,5,-1,0,281,279,1,0,0,0,281,
		282,1,0,0,0,282,283,1,0,0,0,283,284,5,57,0,0,284,285,3,190,95,0,285,286,
		3,94,47,0,286,287,5,128,0,0,287,11,1,0,0,0,288,290,5,169,0,0,289,288,1,
		0,0,0,289,290,1,0,0,0,290,291,1,0,0,0,291,292,5,58,0,0,292,293,5,68,0,
		0,293,294,3,158,79,0,294,295,5,143,0,0,295,296,5,172,0,0,296,297,5,128,
		0,0,297,13,1,0,0,0,298,300,5,169,0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,
		301,1,0,0,0,301,302,5,58,0,0,302,303,5,43,0,0,303,304,3,158,79,0,304,305,
		5,121,0,0,305,310,5,178,0,0,306,307,5,129,0,0,307,309,5,178,0,0,308,306,
		1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,
		0,312,310,1,0,0,0,313,314,5,122,0,0,314,315,5,143,0,0,315,316,3,158,79,
		0,316,317,5,128,0,0,317,15,1,0,0,0,318,320,5,169,0,0,319,318,1,0,0,0,319,
		320,1,0,0,0,320,324,1,0,0,0,321,323,3,68,34,0,322,321,1,0,0,0,323,326,
		1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,
		0,327,328,5,58,0,0,328,329,5,69,0,0,329,330,3,158,79,0,330,331,5,143,0,
		0,331,332,5,175,0,0,332,333,5,128,0,0,333,17,1,0,0,0,334,338,3,12,6,0,
		335,338,3,14,7,0,336,338,3,16,8,0,337,334,1,0,0,0,337,335,1,0,0,0,337,
		336,1,0,0,0,338,19,1,0,0,0,339,341,5,169,0,0,340,339,1,0,0,0,340,341,1,
		0,0,0,341,342,1,0,0,0,342,343,5,59,0,0,343,344,5,178,0,0,344,348,5,121,
		0,0,345,347,3,22,11,0,346,345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,
		348,349,1,0,0,0,349,351,1,0,0,0,350,348,1,0,0,0,351,352,5,122,0,0,352,
		21,1,0,0,0,353,354,5,178,0,0,354,355,5,143,0,0,355,356,3,184,92,0,356,
		357,5,128,0,0,357,23,1,0,0,0,358,360,5,169,0,0,359,358,1,0,0,0,359,360,
		1,0,0,0,360,361,1,0,0,0,361,362,3,26,13,0,362,366,5,121,0,0,363,365,3,
		88,44,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,
		0,367,369,1,0,0,0,368,366,1,0,0,0,369,370,5,122,0,0,370,385,1,0,0,0,371,
		373,5,169,0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,0,374,375,
		3,28,14,0,375,379,5,121,0,0,376,378,3,90,45,0,377,376,1,0,0,0,378,381,
		1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,382,1,0,0,0,381,379,1,0,0,
		0,382,383,5,122,0,0,383,385,1,0,0,0,384,359,1,0,0,0,384,372,1,0,0,0,385,
		25,1,0,0,0,386,387,5,25,0,0,387,388,5,178,0,0,388,389,5,26,0,0,389,392,
		5,42,0,0,390,391,5,31,0,0,391,393,3,6,3,0,392,390,1,0,0,0,392,393,1,0,
		0,0,393,27,1,0,0,0,394,395,5,25,0,0,395,396,5,178,0,0,396,397,5,26,0,0,
		397,398,5,43,0,0,398,29,1,0,0,0,399,401,5,169,0,0,400,399,1,0,0,0,400,
		401,1,0,0,0,401,402,1,0,0,0,402,403,3,32,16,0,403,409,5,121,0,0,404,405,
		3,102,51,0,405,406,5,128,0,0,406,408,1,0,0,0,407,404,1,0,0,0,408,411,1,
		0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,409,1,0,0,0,
		412,413,5,122,0,0,413,31,1,0,0,0,414,415,5,21,0,0,415,418,5,178,0,0,416,
		417,5,31,0,0,417,419,3,34,17,0,418,416,1,0,0,0,418,419,1,0,0,0,419,33,
		1,0,0,0,420,425,3,6,3,0,421,422,5,129,0,0,422,424,3,6,3,0,423,421,1,0,
		0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,35,1,0,0,0,427,
		425,1,0,0,0,428,430,5,169,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,
		1,0,0,0,431,432,3,38,19,0,432,437,5,121,0,0,433,436,3,56,28,0,434,436,
		3,18,9,0,435,433,1,0,0,0,435,434,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,
		0,437,438,1,0,0,0,438,440,1,0,0,0,439,437,1,0,0,0,440,441,5,122,0,0,441,
		37,1,0,0,0,442,443,5,13,0,0,443,446,5,178,0,0,444,445,5,31,0,0,445,447,
		3,6,3,0,446,444,1,0,0,0,446,447,1,0,0,0,447,450,1,0,0,0,448,449,5,32,0,
		0,449,451,3,34,17,0,450,448,1,0,0,0,450,451,1,0,0,0,451,39,1,0,0,0,452,
		454,5,169,0,0,453,452,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,456,
		3,48,24,0,456,460,5,121,0,0,457,459,3,56,28,0,458,457,1,0,0,0,459,462,
		1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,460,1,0,0,
		0,463,464,5,122,0,0,464,41,1,0,0,0,465,467,5,169,0,0,466,465,1,0,0,0,466,
		467,1,0,0,0,467,468,1,0,0,0,468,469,3,46,23,0,469,482,5,121,0,0,470,472,
		5,169,0,0,471,470,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,
		0,0,474,478,1,0,0,0,475,473,1,0,0,0,476,479,3,62,31,0,477,479,3,52,26,
		0,478,476,1,0,0,0,478,477,1,0,0,0,479,481,1,0,0,0,480,473,1,0,0,0,481,
		484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,482,1,
		0,0,0,485,486,5,122,0,0,486,43,1,0,0,0,487,489,5,169,0,0,488,487,1,0,0,
		0,488,489,1,0,0,0,489,490,1,0,0,0,490,491,5,61,0,0,491,501,5,121,0,0,492,
		494,5,169,0,0,493,492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,
		1,0,0,0,496,498,1,0,0,0,497,495,1,0,0,0,498,500,3,54,27,0,499,495,1,0,
		0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,
		501,1,0,0,0,504,505,5,122,0,0,505,45,1,0,0,0,506,507,5,11,0,0,507,509,
		6,23,-1,0,508,506,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,511,5,22,
		0,0,511,514,5,178,0,0,512,513,5,31,0,0,513,515,3,6,3,0,514,512,1,0,0,0,
		514,515,1,0,0,0,515,47,1,0,0,0,516,517,5,11,0,0,517,519,6,24,-1,0,518,
		516,1,0,0,0,518,519,1,0,0,0,519,521,1,0,0,0,520,522,7,0,0,0,521,520,1,
		0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,524,5,20,0,0,524,527,5,178,0,
		0,525,526,5,31,0,0,526,528,3,6,3,0,527,525,1,0,0,0,527,528,1,0,0,0,528,
		531,1,0,0,0,529,530,5,32,0,0,530,532,3,34,17,0,531,529,1,0,0,0,531,532,
		1,0,0,0,532,552,1,0,0,0,533,534,5,18,0,0,534,535,5,20,0,0,535,536,5,178,
		0,0,536,537,5,147,0,0,537,538,5,175,0,0,538,539,5,129,0,0,539,540,5,175,
		0,0,540,541,5,129,0,0,541,542,5,175,0,0,542,545,5,146,0,0,543,544,5,31,
		0,0,544,546,3,6,3,0,545,543,1,0,0,0,545,546,1,0,0,0,546,549,1,0,0,0,547,
		548,5,32,0,0,548,550,3,34,17,0,549,547,1,0,0,0,549,550,1,0,0,0,550,552,
		1,0,0,0,551,518,1,0,0,0,551,533,1,0,0,0,552,49,1,0,0,0,553,554,5,33,0,
		0,554,555,5,10,0,0,555,556,3,6,3,0,556,557,5,128,0,0,557,51,1,0,0,0,558,
		559,5,33,0,0,559,560,5,13,0,0,560,561,3,6,3,0,561,562,5,128,0,0,562,53,
		1,0,0,0,563,565,3,68,34,0,564,563,1,0,0,0,565,568,1,0,0,0,566,564,1,0,
		0,0,566,567,1,0,0,0,567,569,1,0,0,0,568,566,1,0,0,0,569,570,7,1,0,0,570,
		571,3,84,42,0,571,55,1,0,0,0,572,580,3,10,5,0,573,580,3,82,41,0,574,580,
		3,24,12,0,575,580,3,44,22,0,576,580,3,58,29,0,577,580,3,98,49,0,578,580,
		3,52,26,0,579,572,1,0,0,0,579,573,1,0,0,0,579,574,1,0,0,0,579,575,1,0,
		0,0,579,576,1,0,0,0,579,577,1,0,0,0,579,578,1,0,0,0,580,57,1,0,0,0,581,
		583,5,169,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,584,1,0,0,0,584,585,
		5,109,0,0,585,586,5,178,0,0,586,587,5,143,0,0,587,602,5,178,0,0,588,590,
		5,169,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,591,1,0,0,0,591,592,5,109,
		0,0,592,593,5,178,0,0,593,595,5,121,0,0,594,596,3,60,30,0,595,594,1,0,
		0,0,596,597,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,
		600,5,122,0,0,600,602,1,0,0,0,601,582,1,0,0,0,601,589,1,0,0,0,602,59,1,
		0,0,0,603,605,5,169,0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,
		0,606,607,5,178,0,0,607,608,5,143,0,0,608,609,3,182,91,0,609,61,1,0,0,
		0,610,617,3,76,38,0,611,617,3,78,39,0,612,617,3,24,12,0,613,617,3,98,49,
		0,614,617,3,66,33,0,615,617,3,20,10,0,616,610,1,0,0,0,616,611,1,0,0,0,
		616,612,1,0,0,0,616,613,1,0,0,0,616,614,1,0,0,0,616,615,1,0,0,0,617,63,
		1,0,0,0,618,620,5,33,0,0,619,621,7,2,0,0,620,619,1,0,0,0,620,621,1,0,0,
		0,621,622,1,0,0,0,622,623,5,20,0,0,623,624,3,6,3,0,624,65,1,0,0,0,625,
		626,3,64,32,0,626,627,5,128,0,0,627,652,1,0,0,0,628,631,3,64,32,0,629,
		630,5,26,0,0,630,632,5,178,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,633,
		1,0,0,0,633,646,5,121,0,0,634,636,5,169,0,0,635,634,1,0,0,0,636,639,1,
		0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,642,1,0,0,0,639,637,1,0,0,0,
		640,643,3,98,49,0,641,643,3,52,26,0,642,640,1,0,0,0,642,641,1,0,0,0,643,
		645,1,0,0,0,644,637,1,0,0,0,645,648,1,0,0,0,646,644,1,0,0,0,646,647,1,
		0,0,0,647,649,1,0,0,0,648,646,1,0,0,0,649,650,5,122,0,0,650,652,1,0,0,
		0,651,625,1,0,0,0,651,628,1,0,0,0,652,67,1,0,0,0,653,654,5,132,0,0,654,
		667,5,178,0,0,655,664,5,117,0,0,656,661,3,184,92,0,657,658,5,129,0,0,658,
		660,3,184,92,0,659,657,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,
		1,0,0,0,662,665,1,0,0,0,663,661,1,0,0,0,664,656,1,0,0,0,664,665,1,0,0,
		0,665,666,1,0,0,0,666,668,5,118,0,0,667,655,1,0,0,0,667,668,1,0,0,0,668,
		69,1,0,0,0,669,672,3,72,36,0,670,672,3,74,37,0,671,669,1,0,0,0,671,670,
		1,0,0,0,672,71,1,0,0,0,673,674,5,130,0,0,674,675,5,1,0,0,675,676,7,3,0,
		0,676,73,1,0,0,0,677,678,5,130,0,0,678,679,5,5,0,0,679,680,7,4,0,0,680,
		75,1,0,0,0,681,683,3,68,34,0,682,681,1,0,0,0,683,686,1,0,0,0,684,682,1,
		0,0,0,684,685,1,0,0,0,685,689,1,0,0,0,686,684,1,0,0,0,687,688,5,23,0,0,
		688,690,6,38,-1,0,689,687,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,
		692,5,24,0,0,692,693,5,178,0,0,693,697,5,121,0,0,694,696,3,86,43,0,695,
		694,1,0,0,0,696,699,1,0,0,0,697,695,1,0,0,0,697,698,1,0,0,0,698,700,1,
		0,0,0,699,697,1,0,0,0,700,701,5,122,0,0,701,77,1,0,0,0,702,703,5,9,0,0,
		703,704,5,178,0,0,704,708,5,121,0,0,705,707,3,80,40,0,706,705,1,0,0,0,
		707,710,1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,711,1,0,0,0,710,708,
		1,0,0,0,711,718,5,122,0,0,712,713,5,9,0,0,713,714,5,178,0,0,714,715,5,
		143,0,0,715,716,5,178,0,0,716,718,5,128,0,0,717,702,1,0,0,0,717,712,1,
		0,0,0,718,79,1,0,0,0,719,720,5,178,0,0,720,721,5,143,0,0,721,722,3,160,
		80,0,722,723,5,128,0,0,723,81,1,0,0,0,724,726,5,169,0,0,725,724,1,0,0,
		0,725,726,1,0,0,0,726,730,1,0,0,0,727,729,3,68,34,0,728,727,1,0,0,0,729,
		732,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,734,1,0,0,0,732,730,1,
		0,0,0,733,735,5,62,0,0,734,733,1,0,0,0,734,735,1,0,0,0,735,737,1,0,0,0,
		736,738,7,5,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,740,
		5,38,0,0,740,741,5,178,0,0,741,745,5,121,0,0,742,744,3,84,42,0,743,742,
		1,0,0,0,744,747,1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,748,1,0,0,
		0,747,745,1,0,0,0,748,772,5,122,0,0,749,751,5,169,0,0,750,749,1,0,0,0,
		750,751,1,0,0,0,751,755,1,0,0,0,752,754,3,68,34,0,753,752,1,0,0,0,754,
		757,1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,759,1,0,0,0,757,755,1,
		0,0,0,758,760,5,62,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,762,1,0,0,0,
		761,763,7,6,0,0,762,761,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,765,
		5,38,0,0,765,766,5,147,0,0,766,767,3,190,95,0,767,768,5,146,0,0,768,769,
		5,178,0,0,769,770,5,128,0,0,770,772,1,0,0,0,771,725,1,0,0,0,771,750,1,
		0,0,0,772,83,1,0,0,0,773,775,3,68,34,0,774,773,1,0,0,0,775,778,1,0,0,0,
		776,774,1,0,0,0,776,777,1,0,0,0,777,779,1,0,0,0,778,776,1,0,0,0,779,780,
		3,190,95,0,780,781,5,178,0,0,781,782,5,128,0,0,782,85,1,0,0,0,783,785,
		3,68,34,0,784,783,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,787,1,0,
		0,0,787,789,1,0,0,0,788,786,1,0,0,0,789,790,3,190,95,0,790,793,5,178,0,
		0,791,792,5,143,0,0,792,794,3,160,80,0,793,791,1,0,0,0,793,794,1,0,0,0,
		794,795,1,0,0,0,795,796,5,128,0,0,796,799,1,0,0,0,797,799,3,18,9,0,798,
		786,1,0,0,0,798,797,1,0,0,0,799,87,1,0,0,0,800,802,5,169,0,0,801,800,1,
		0,0,0,801,802,1,0,0,0,802,806,1,0,0,0,803,805,3,68,34,0,804,803,1,0,0,
		0,805,808,1,0,0,0,806,804,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,
		806,1,0,0,0,809,810,3,190,95,0,810,811,5,178,0,0,811,812,5,128,0,0,812,
		821,1,0,0,0,813,815,3,68,34,0,814,813,1,0,0,0,815,818,1,0,0,0,816,814,
		1,0,0,0,816,817,1,0,0,0,817,819,1,0,0,0,818,816,1,0,0,0,819,821,3,100,
		50,0,820,801,1,0,0,0,820,816,1,0,0,0,821,89,1,0,0,0,822,824,5,169,0,0,
		823,822,1,0,0,0,823,824,1,0,0,0,824,828,1,0,0,0,825,827,3,68,34,0,826,
		825,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,831,1,
		0,0,0,830,828,1,0,0,0,831,834,5,178,0,0,832,833,5,143,0,0,833,835,3,184,
		92,0,834,832,1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,837,5,129,0,0,
		837,91,1,0,0,0,838,839,5,57,0,0,839,841,6,46,-1,0,840,838,1,0,0,0,840,
		841,1,0,0,0,841,842,1,0,0,0,842,843,3,190,95,0,843,848,3,96,48,0,844,845,
		5,129,0,0,845,847,3,96,48,0,846,844,1,0,0,0,847,850,1,0,0,0,848,846,1,
		0,0,0,848,849,1,0,0,0,849,859,1,0,0,0,850,848,1,0,0,0,851,852,6,46,-1,
		0,852,853,5,57,0,0,853,854,5,34,0,0,854,855,3,158,79,0,855,856,5,143,0,
		0,856,857,3,182,91,0,857,859,1,0,0,0,858,840,1,0,0,0,858,851,1,0,0,0,859,
		93,1,0,0,0,860,861,3,158,79,0,861,862,5,143,0,0,862,863,3,162,81,0,863,
		95,1,0,0,0,864,869,3,158,79,0,865,866,3,94,47,0,866,867,6,48,-1,0,867,
		869,1,0,0,0,868,864,1,0,0,0,868,865,1,0,0,0,869,97,1,0,0,0,870,872,5,169,
		0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,876,1,0,0,0,873,875,3,68,34,0,
		874,873,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,881,
		1,0,0,0,878,876,1,0,0,0,879,880,5,39,0,0,880,882,6,49,-1,0,881,879,1,0,
		0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,901,3,100,50,0,884,886,5,169,0,
		0,885,884,1,0,0,0,885,886,1,0,0,0,886,890,1,0,0,0,887,889,3,68,34,0,888,
		887,1,0,0,0,889,892,1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,893,1,
		0,0,0,892,890,1,0,0,0,893,894,5,178,0,0,894,895,5,117,0,0,895,896,5,118,
		0,0,896,897,5,121,0,0,897,898,3,110,55,0,898,899,5,122,0,0,899,901,1,0,
		0,0,900,871,1,0,0,0,900,885,1,0,0,0,901,99,1,0,0,0,902,903,3,102,51,0,
		903,904,5,121,0,0,904,905,3,110,55,0,905,906,5,122,0,0,906,101,1,0,0,0,
		907,909,5,169,0,0,908,907,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,
		911,3,190,95,0,911,912,5,178,0,0,912,913,3,104,52,0,913,103,1,0,0,0,914,
		916,5,117,0,0,915,917,3,106,53,0,916,915,1,0,0,0,916,917,1,0,0,0,917,918,
		1,0,0,0,918,919,5,118,0,0,919,105,1,0,0,0,920,925,3,108,54,0,921,922,5,
		129,0,0,922,924,3,108,54,0,923,921,1,0,0,0,924,927,1,0,0,0,925,923,1,0,
		0,0,925,926,1,0,0,0,926,107,1,0,0,0,927,925,1,0,0,0,928,930,5,169,0,0,
		929,928,1,0,0,0,929,930,1,0,0,0,930,934,1,0,0,0,931,933,3,68,34,0,932,
		931,1,0,0,0,933,936,1,0,0,0,934,932,1,0,0,0,934,935,1,0,0,0,935,938,1,
		0,0,0,936,934,1,0,0,0,937,939,7,7,0,0,938,937,1,0,0,0,938,939,1,0,0,0,
		939,940,1,0,0,0,940,941,3,190,95,0,941,944,5,178,0,0,942,943,5,143,0,0,
		943,945,3,184,92,0,944,942,1,0,0,0,944,945,1,0,0,0,945,109,1,0,0,0,946,
		948,3,178,89,0,947,946,1,0,0,0,948,951,1,0,0,0,949,947,1,0,0,0,949,950,
		1,0,0,0,950,953,1,0,0,0,951,949,1,0,0,0,952,954,3,168,84,0,953,952,1,0,
		0,0,953,954,1,0,0,0,954,111,1,0,0,0,955,959,5,121,0,0,956,958,3,180,90,
		0,957,956,1,0,0,0,958,961,1,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,
		962,1,0,0,0,961,959,1,0,0,0,962,963,5,122,0,0,963,113,1,0,0,0,964,971,
		3,158,79,0,965,971,3,150,75,0,966,971,3,130,65,0,967,971,3,124,62,0,968,
		971,3,126,63,0,969,971,3,164,82,0,970,964,1,0,0,0,970,965,1,0,0,0,970,
		966,1,0,0,0,970,967,1,0,0,0,970,968,1,0,0,0,970,969,1,0,0,0,971,115,1,
		0,0,0,972,976,3,158,79,0,973,976,3,130,65,0,974,976,3,164,82,0,975,972,
		1,0,0,0,975,973,1,0,0,0,975,974,1,0,0,0,976,117,1,0,0,0,977,980,3,114,
		57,0,978,979,5,123,0,0,979,981,3,116,58,0,980,978,1,0,0,0,981,982,1,0,
		0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,119,1,0,0,0,984,987,3,158,79,0,
		985,987,3,164,82,0,986,984,1,0,0,0,986,985,1,0,0,0,987,121,1,0,0,0,988,
		991,3,114,57,0,989,990,5,123,0,0,990,992,3,120,60,0,991,989,1,0,0,0,992,
		993,1,0,0,0,993,991,1,0,0,0,993,994,1,0,0,0,994,123,1,0,0,0,995,996,3,
		156,78,0,996,997,5,123,0,0,997,998,3,158,79,0,998,125,1,0,0,0,999,1000,
		3,156,78,0,1000,1001,5,123,0,0,1001,1002,3,130,65,0,1002,127,1,0,0,0,1003,
		1006,3,124,62,0,1004,1006,3,126,63,0,1005,1003,1,0,0,0,1005,1004,1,0,0,
		0,1006,129,1,0,0,0,1007,1008,3,6,3,0,1008,1010,5,117,0,0,1009,1011,3,154,
		77,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1012,1,0,0,0,1012,1013,5,
		118,0,0,1013,131,1,0,0,0,1014,1015,5,60,0,0,1015,1016,5,117,0,0,1016,1017,
		3,158,79,0,1017,1018,7,8,0,0,1018,1019,3,184,92,0,1019,1020,5,118,0,0,
		1020,1022,3,112,56,0,1021,1023,3,138,69,0,1022,1021,1,0,0,0,1022,1023,
		1,0,0,0,1023,133,1,0,0,0,1024,1025,5,45,0,0,1025,1026,5,117,0,0,1026,1027,
		3,162,81,0,1027,1028,5,118,0,0,1028,1032,3,112,56,0,1029,1031,3,136,68,
		0,1030,1029,1,0,0,0,1031,1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,
		0,0,1033,1036,1,0,0,0,1034,1032,1,0,0,0,1035,1037,3,138,69,0,1036,1035,
		1,0,0,0,1036,1037,1,0,0,0,1037,135,1,0,0,0,1038,1042,5,46,0,0,1039,1040,
		5,47,0,0,1040,1042,5,45,0,0,1041,1038,1,0,0,0,1041,1039,1,0,0,0,1042,1043,
		1,0,0,0,1043,1044,5,117,0,0,1044,1045,3,162,81,0,1045,1046,5,118,0,0,1046,
		1047,3,112,56,0,1047,137,1,0,0,0,1048,1049,5,47,0,0,1049,1050,3,112,56,
		0,1050,139,1,0,0,0,1051,1052,5,48,0,0,1052,1053,5,117,0,0,1053,1054,3,
		162,81,0,1054,1055,5,118,0,0,1055,1059,5,121,0,0,1056,1058,3,142,71,0,
		1057,1056,1,0,0,0,1058,1061,1,0,0,0,1059,1057,1,0,0,0,1059,1060,1,0,0,
		0,1060,1062,1,0,0,0,1061,1059,1,0,0,0,1062,1063,5,122,0,0,1063,141,1,0,
		0,0,1064,1065,5,55,0,0,1065,1066,3,184,92,0,1066,1069,5,127,0,0,1067,1068,
		5,121,0,0,1068,1070,6,71,-1,0,1069,1067,1,0,0,0,1069,1070,1,0,0,0,1070,
		1074,1,0,0,0,1071,1073,3,178,89,0,1072,1071,1,0,0,0,1073,1076,1,0,0,0,
		1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,1077,1,0,0,0,1076,1074,1,0,0,
		0,1077,1080,3,176,88,0,1078,1079,5,122,0,0,1079,1081,6,71,-1,0,1080,1078,
		1,0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,1083,4,71,0,1,1083,143,
		1,0,0,0,1084,1085,5,51,0,0,1085,1086,5,117,0,0,1086,1087,3,162,81,0,1087,
		1088,5,118,0,0,1088,1089,3,112,56,0,1089,145,1,0,0,0,1090,1091,5,49,0,
		0,1091,1092,5,117,0,0,1092,1093,3,162,81,0,1093,1094,5,128,0,0,1094,1095,
		3,162,81,0,1095,1096,5,128,0,0,1096,1097,3,162,81,0,1097,1098,5,118,0,
		0,1098,1099,3,112,56,0,1099,147,1,0,0,0,1100,1101,5,50,0,0,1101,1102,3,
		112,56,0,1102,1103,5,51,0,0,1103,1104,3,150,75,0,1104,1105,5,128,0,0,1105,
		149,1,0,0,0,1106,1107,5,117,0,0,1107,1108,3,162,81,0,1108,1109,5,118,0,
		0,1109,151,1,0,0,0,1110,1111,3,186,93,0,1111,1113,5,117,0,0,1112,1114,
		3,154,77,0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,
		1116,5,118,0,0,1116,153,1,0,0,0,1117,1122,3,162,81,0,1118,1119,5,129,0,
		0,1119,1121,3,162,81,0,1120,1118,1,0,0,0,1121,1124,1,0,0,0,1122,1120,1,
		0,0,0,1122,1123,1,0,0,0,1123,155,1,0,0,0,1124,1122,1,0,0,0,1125,1126,7,
		9,0,0,1126,157,1,0,0,0,1127,1128,5,178,0,0,1128,159,1,0,0,0,1129,1133,
		3,158,79,0,1130,1133,3,182,91,0,1131,1133,3,152,76,0,1132,1129,1,0,0,0,
		1132,1130,1,0,0,0,1132,1131,1,0,0,0,1133,161,1,0,0,0,1134,1135,6,81,-1,
		0,1135,1203,3,158,79,0,1136,1203,3,182,91,0,1137,1203,3,152,76,0,1138,
		1203,3,150,75,0,1139,1203,3,124,62,0,1140,1203,3,126,63,0,1141,1203,3,
		118,59,0,1142,1203,3,130,65,0,1143,1203,3,164,82,0,1144,1145,3,166,83,
		0,1145,1146,7,10,0,0,1146,1203,1,0,0,0,1147,1148,7,10,0,0,1148,1203,3,
		166,83,0,1149,1150,5,164,0,0,1150,1203,3,162,81,34,1151,1152,7,11,0,0,
		1152,1203,3,162,81,33,1153,1154,3,166,83,0,1154,1155,5,143,0,0,1155,1156,
		3,162,81,12,1156,1203,1,0,0,0,1157,1158,3,166,83,0,1158,1159,5,152,0,0,
		1159,1160,3,162,81,11,1160,1203,1,0,0,0,1161,1162,3,166,83,0,1162,1163,
		5,153,0,0,1163,1164,3,162,81,10,1164,1203,1,0,0,0,1165,1166,3,166,83,0,
		1166,1167,5,154,0,0,1167,1168,3,162,81,9,1168,1203,1,0,0,0,1169,1170,3,
		166,83,0,1170,1171,5,155,0,0,1171,1172,3,162,81,8,1172,1203,1,0,0,0,1173,
		1174,3,166,83,0,1174,1175,5,156,0,0,1175,1176,3,162,81,7,1176,1203,1,0,
		0,0,1177,1178,3,166,83,0,1178,1179,5,157,0,0,1179,1180,3,162,81,6,1180,
		1203,1,0,0,0,1181,1182,3,166,83,0,1182,1183,5,158,0,0,1183,1184,3,162,
		81,5,1184,1203,1,0,0,0,1185,1186,3,166,83,0,1186,1187,5,159,0,0,1187,1188,
		3,162,81,4,1188,1203,1,0,0,0,1189,1190,3,166,83,0,1190,1191,5,160,0,0,
		1191,1192,3,162,81,3,1192,1203,1,0,0,0,1193,1194,3,166,83,0,1194,1195,
		5,161,0,0,1195,1196,3,162,81,2,1196,1203,1,0,0,0,1197,1198,5,117,0,0,1198,
		1199,3,190,95,0,1199,1200,5,118,0,0,1200,1201,3,162,81,1,1201,1203,1,0,
		0,0,1202,1134,1,0,0,0,1202,1136,1,0,0,0,1202,1137,1,0,0,0,1202,1138,1,
		0,0,0,1202,1139,1,0,0,0,1202,1140,1,0,0,0,1202,1141,1,0,0,0,1202,1142,
		1,0,0,0,1202,1143,1,0,0,0,1202,1144,1,0,0,0,1202,1147,1,0,0,0,1202,1149,
		1,0,0,0,1202,1151,1,0,0,0,1202,1153,1,0,0,0,1202,1157,1,0,0,0,1202,1161,
		1,0,0,0,1202,1165,1,0,0,0,1202,1169,1,0,0,0,1202,1173,1,0,0,0,1202,1177,
		1,0,0,0,1202,1181,1,0,0,0,1202,1185,1,0,0,0,1202,1189,1,0,0,0,1202,1193,
		1,0,0,0,1202,1197,1,0,0,0,1203,1269,1,0,0,0,1204,1205,10,32,0,0,1205,1206,
		5,149,0,0,1206,1268,3,162,81,33,1207,1208,10,31,0,0,1208,1209,5,148,0,
		0,1209,1268,3,162,81,32,1210,1211,10,30,0,0,1211,1212,5,147,0,0,1212,1268,
		3,162,81,31,1213,1214,10,29,0,0,1214,1215,5,146,0,0,1215,1268,3,162,81,
		30,1216,1217,10,28,0,0,1217,1218,5,144,0,0,1218,1268,3,162,81,29,1219,
		1220,10,27,0,0,1220,1221,5,145,0,0,1221,1268,3,162,81,28,1222,1223,10,
		26,0,0,1223,1224,5,137,0,0,1224,1268,3,162,81,27,1225,1226,10,25,0,0,1226,
		1227,5,138,0,0,1227,1268,3,162,81,26,1228,1229,10,24,0,0,1229,1230,5,142,
		0,0,1230,1268,3,162,81,25,1231,1232,10,23,0,0,1232,1233,5,141,0,0,1233,
		1268,3,162,81,24,1234,1235,10,22,0,0,1235,1236,5,139,0,0,1236,1268,3,162,
		81,23,1237,1238,10,21,0,0,1238,1239,5,135,0,0,1239,1268,3,162,81,22,1240,
		1241,10,20,0,0,1241,1242,5,136,0,0,1242,1268,3,162,81,21,1243,1244,10,
		19,0,0,1244,1245,5,140,0,0,1245,1268,3,162,81,19,1246,1247,10,18,0,0,1247,
		1248,5,166,0,0,1248,1268,3,162,81,18,1249,1250,10,17,0,0,1250,1251,5,167,
		0,0,1251,1268,3,162,81,17,1252,1253,10,16,0,0,1253,1254,5,163,0,0,1254,
		1268,3,162,81,17,1255,1256,10,15,0,0,1256,1257,5,162,0,0,1257,1268,3,162,
		81,16,1258,1259,10,14,0,0,1259,1260,5,165,0,0,1260,1268,3,162,81,15,1261,
		1262,10,13,0,0,1262,1263,5,126,0,0,1263,1264,3,162,81,0,1264,1265,5,127,
		0,0,1265,1266,3,162,81,13,1266,1268,1,0,0,0,1267,1204,1,0,0,0,1267,1207,
		1,0,0,0,1267,1210,1,0,0,0,1267,1213,1,0,0,0,1267,1216,1,0,0,0,1267,1219,
		1,0,0,0,1267,1222,1,0,0,0,1267,1225,1,0,0,0,1267,1228,1,0,0,0,1267,1231,
		1,0,0,0,1267,1234,1,0,0,0,1267,1237,1,0,0,0,1267,1240,1,0,0,0,1267,1243,
		1,0,0,0,1267,1246,1,0,0,0,1267,1249,1,0,0,0,1267,1252,1,0,0,0,1267,1255,
		1,0,0,0,1267,1258,1,0,0,0,1267,1261,1,0,0,0,1268,1271,1,0,0,0,1269,1267,
		1,0,0,0,1269,1270,1,0,0,0,1270,163,1,0,0,0,1271,1269,1,0,0,0,1272,1276,
		3,158,79,0,1273,1276,3,128,64,0,1274,1276,3,130,65,0,1275,1272,1,0,0,0,
		1275,1273,1,0,0,0,1275,1274,1,0,0,0,1276,1277,1,0,0,0,1277,1278,5,119,
		0,0,1278,1279,3,162,81,0,1279,1280,5,120,0,0,1280,165,1,0,0,0,1281,1286,
		3,158,79,0,1282,1286,3,164,82,0,1283,1286,3,124,62,0,1284,1286,3,122,61,
		0,1285,1281,1,0,0,0,1285,1282,1,0,0,0,1285,1283,1,0,0,0,1285,1284,1,0,
		0,0,1286,167,1,0,0,0,1287,1289,5,44,0,0,1288,1290,3,162,81,0,1289,1288,
		1,0,0,0,1289,1290,1,0,0,0,1290,1291,1,0,0,0,1291,1292,5,128,0,0,1292,169,
		1,0,0,0,1293,1294,5,52,0,0,1294,1295,5,128,0,0,1295,171,1,0,0,0,1296,1297,
		5,53,0,0,1297,1298,5,128,0,0,1298,173,1,0,0,0,1299,1300,5,54,0,0,1300,
		1301,5,128,0,0,1301,175,1,0,0,0,1302,1307,3,170,85,0,1303,1307,3,168,84,
		0,1304,1307,3,172,86,0,1305,1307,3,174,87,0,1306,1302,1,0,0,0,1306,1303,
		1,0,0,0,1306,1304,1,0,0,0,1306,1305,1,0,0,0,1307,177,1,0,0,0,1308,1309,
		3,92,46,0,1309,1310,5,128,0,0,1310,1322,1,0,0,0,1311,1312,3,162,81,0,1312,
		1313,5,128,0,0,1313,1322,1,0,0,0,1314,1322,3,112,56,0,1315,1322,3,134,
		67,0,1316,1322,3,140,70,0,1317,1322,3,144,72,0,1318,1322,3,146,73,0,1319,
		1322,3,148,74,0,1320,1322,3,132,66,0,1321,1308,1,0,0,0,1321,1311,1,0,0,
		0,1321,1314,1,0,0,0,1321,1315,1,0,0,0,1321,1316,1,0,0,0,1321,1317,1,0,
		0,0,1321,1318,1,0,0,0,1321,1319,1,0,0,0,1321,1320,1,0,0,0,1322,179,1,0,
		0,0,1323,1326,3,178,89,0,1324,1326,3,176,88,0,1325,1323,1,0,0,0,1325,1324,
		1,0,0,0,1326,181,1,0,0,0,1327,1334,5,172,0,0,1328,1334,5,173,0,0,1329,
		1334,5,174,0,0,1330,1334,5,175,0,0,1331,1334,5,176,0,0,1332,1334,5,177,
		0,0,1333,1327,1,0,0,0,1333,1328,1,0,0,0,1333,1329,1,0,0,0,1333,1330,1,
		0,0,0,1333,1331,1,0,0,0,1333,1332,1,0,0,0,1334,183,1,0,0,0,1335,1338,3,
		182,91,0,1336,1338,3,6,3,0,1337,1335,1,0,0,0,1337,1336,1,0,0,0,1338,185,
		1,0,0,0,1339,1346,3,194,97,0,1340,1342,5,119,0,0,1341,1343,5,175,0,0,1342,
		1341,1,0,0,0,1342,1343,1,0,0,0,1343,1344,1,0,0,0,1344,1345,5,120,0,0,1345,
		1347,6,93,-1,0,1346,1340,1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,
		1349,6,93,-1,0,1349,1362,1,0,0,0,1350,1357,3,196,98,0,1351,1353,5,119,
		0,0,1352,1354,5,175,0,0,1353,1352,1,0,0,0,1353,1354,1,0,0,0,1354,1355,
		1,0,0,0,1355,1356,5,120,0,0,1356,1358,6,93,-1,0,1357,1351,1,0,0,0,1357,
		1358,1,0,0,0,1358,1359,1,0,0,0,1359,1360,6,93,-1,0,1360,1362,1,0,0,0,1361,
		1339,1,0,0,0,1361,1350,1,0,0,0,1362,187,1,0,0,0,1363,1370,3,192,96,0,1364,
		1366,5,119,0,0,1365,1367,5,175,0,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,
		1367,1368,1,0,0,0,1368,1369,5,120,0,0,1369,1371,6,94,-1,0,1370,1364,1,
		0,0,0,1370,1371,1,0,0,0,1371,1372,1,0,0,0,1372,1373,6,94,-1,0,1373,189,
		1,0,0,0,1374,1377,3,186,93,0,1375,1377,3,188,94,0,1376,1374,1,0,0,0,1376,
		1375,1,0,0,0,1377,191,1,0,0,0,1378,1379,3,6,3,0,1379,193,1,0,0,0,1380,
		1388,5,67,0,0,1381,1388,5,68,0,0,1382,1388,5,69,0,0,1383,1388,5,70,0,0,
		1384,1388,5,71,0,0,1385,1388,5,72,0,0,1386,1388,5,73,0,0,1387,1380,1,0,
		0,0,1387,1381,1,0,0,0,1387,1382,1,0,0,0,1387,1383,1,0,0,0,1387,1384,1,
		0,0,0,1387,1385,1,0,0,0,1387,1386,1,0,0,0,1388,195,1,0,0,0,1389,1433,5,
		74,0,0,1390,1433,5,76,0,0,1391,1433,5,75,0,0,1392,1433,5,77,0,0,1393,1433,
		5,78,0,0,1394,1433,5,79,0,0,1395,1433,5,81,0,0,1396,1433,5,80,0,0,1397,
		1433,5,82,0,0,1398,1433,5,83,0,0,1399,1433,5,84,0,0,1400,1433,5,86,0,0,
		1401,1433,5,85,0,0,1402,1433,5,87,0,0,1403,1433,5,88,0,0,1404,1433,5,89,
		0,0,1405,1433,5,98,0,0,1406,1433,5,90,0,0,1407,1433,5,99,0,0,1408,1433,
		5,91,0,0,1409,1433,5,100,0,0,1410,1433,5,92,0,0,1411,1433,5,101,0,0,1412,
		1433,5,93,0,0,1413,1433,5,102,0,0,1414,1433,5,94,0,0,1415,1433,5,103,0,
		0,1416,1433,5,95,0,0,1417,1433,5,104,0,0,1418,1433,5,96,0,0,1419,1433,
		5,105,0,0,1420,1433,5,97,0,0,1421,1433,5,106,0,0,1422,1433,5,107,0,0,1423,
		1433,5,108,0,0,1424,1433,5,109,0,0,1425,1433,5,110,0,0,1426,1433,5,112,
		0,0,1427,1433,5,111,0,0,1428,1433,5,113,0,0,1429,1433,5,114,0,0,1430,1433,
		5,115,0,0,1431,1433,5,116,0,0,1432,1389,1,0,0,0,1432,1390,1,0,0,0,1432,
		1391,1,0,0,0,1432,1392,1,0,0,0,1432,1393,1,0,0,0,1432,1394,1,0,0,0,1432,
		1395,1,0,0,0,1432,1396,1,0,0,0,1432,1397,1,0,0,0,1432,1398,1,0,0,0,1432,
		1399,1,0,0,0,1432,1400,1,0,0,0,1432,1401,1,0,0,0,1432,1402,1,0,0,0,1432,
		1403,1,0,0,0,1432,1404,1,0,0,0,1432,1405,1,0,0,0,1432,1406,1,0,0,0,1432,
		1407,1,0,0,0,1432,1408,1,0,0,0,1432,1409,1,0,0,0,1432,1410,1,0,0,0,1432,
		1411,1,0,0,0,1432,1412,1,0,0,0,1432,1413,1,0,0,0,1432,1414,1,0,0,0,1432,
		1415,1,0,0,0,1432,1416,1,0,0,0,1432,1417,1,0,0,0,1432,1418,1,0,0,0,1432,
		1419,1,0,0,0,1432,1420,1,0,0,0,1432,1421,1,0,0,0,1432,1422,1,0,0,0,1432,
		1423,1,0,0,0,1432,1424,1,0,0,0,1432,1425,1,0,0,0,1432,1426,1,0,0,0,1432,
		1427,1,0,0,0,1432,1428,1,0,0,0,1432,1429,1,0,0,0,1432,1430,1,0,0,0,1432,
		1431,1,0,0,0,1433,197,1,0,0,0,159,199,204,208,213,219,225,231,236,240,
		245,251,266,274,277,281,289,299,310,319,324,337,340,348,359,366,372,379,
		384,392,400,409,418,425,429,435,437,446,450,453,460,466,473,478,482,488,
		495,501,508,514,518,521,527,531,545,549,551,566,579,582,589,597,601,604,
		616,620,631,637,642,646,651,661,664,667,671,684,689,697,708,717,725,730,
		734,737,745,750,755,759,762,771,776,786,793,798,801,806,816,820,823,828,
		834,840,848,858,868,871,876,881,885,890,900,908,916,925,929,934,938,944,
		949,953,959,970,975,982,986,993,1005,1010,1022,1032,1036,1041,1059,1069,
		1074,1080,1113,1122,1132,1202,1267,1269,1275,1285,1289,1306,1321,1325,
		1333,1337,1342,1346,1353,1357,1361,1366,1370,1376,1387,1432
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
