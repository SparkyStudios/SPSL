group Base;

// Base template for SPSL translations. Provides minimal utility functions for HLSL or GLSL shader generation.

// Generates a struct property.
prop(p) ::= "<p.type> <p.name>"

// Generates a function argument.
arg(a) ::= "<if(a.flow)><a.flow> <endif><a.type> <a.name><if(a.value)> = <a.value><endif>"

// Generates a function head.
func_head(type, name, args) ::= <%
<type> <name>(<args:arg(); separator=", ">)
%>

// Generates a function body.
statements_block(stats) ::= <<
{
  <stats; separator="\n">
}
>>

// Generates a function.
func(type, name, args, stats) ::= <<
<func_head(type, name, args)>
<statements_block(stats)>
>>

// Generates a if condition block.
if(condition, stats) ::= <<
if (<condition>)
<statements_block(stats)>
>>

// Generates a while loop.
while(condition, stats) ::= <<
while (<condition>)
<statements_block(stats)>
>>

// Generates an array access statement.
array_access(var, idx) ::= "<var>[<idx>]"

// Generates a postfixed or prefixed unary operation.
unary_op(op, expression, isPostfix) ::= <%
<if(isPostfix)>
  <expression><op>
<else>
  <op><expression>
<endif>
%>

// Generates a simple binary operation.
binary_op(lhs, op, rhs) ::= "<lhs> <op> <rhs>"

// Generates a ternary conditional expression.
ternary_op(condition, lhs, rhs) ::= "<condition> ? <lhs> : <rhs>"

// Generates a function call expression.
invocation(function, params) ::= "<function>(<params; separator=\", \">)"

// Generates a variable declaration expression.
variable_declaration(isConst, type, name, initializer, isArray, arraySize) ::= <%
<if(isConst)>const <endif>
<type> <name>
<if(isArray)>[<arraySize>]<endif>
<if(initializer)> = <initializer><endif>
%>

// Shader macro
macro(m) ::= "#define <m.name> <m.value>"
