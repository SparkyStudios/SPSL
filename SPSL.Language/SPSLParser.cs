//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\sparky_studios\SPSL\SPSL.Language\SPSL.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SPSL.Language {

using SPSL.Language.AST;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class SPSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, KEYWORD_NAMESPACE=15, 
		KEYWORD_ABSTRACT=16, KEYWORD_VERTEX=17, KEYWORD_FRAGMENT=18, KEYWORD_PIXEL=19, 
		KEYWORD_GEOMETRY=20, KEYWORD_HULL=21, KEYWORD_DOMAIN=22, KEYWORD_COMPUTE=23, 
		KEYWORD_GRAPHIC=24, KEYWORD_SHADER=25, KEYWORD_INTERFACE=26, KEYWORD_MATERIAL=27, 
		KEYWORD_PARTIAL=28, KEYWORD_PARAMS=29, KEYWORD_TYPE=30, KEYWORD_AS=31, 
		KEYWORD_IN=32, KEYWORD_OF=33, KEYWORD_OUT=34, KEYWORD_INOUT=35, KEYWORD_EXTENDS=36, 
		KEYWORD_IMPLEMENTS=37, KEYWORD_USE=38, KEYWORD_VAR=39, KEYWORD_INPUT=40, 
		KEYWORD_OUTPUT=41, KEYWORD_TRANSIENT=42, KEYWORD_BUFFER=43, KEYWORD_LOCAL=44, 
		KEYWORD_GLOBAL=45, KEYWORD_OVERRIDE=46, KEYWORD_THIS=47, KEYWORD_BASE=48, 
		KEYWORD_STRUCT=49, KEYWORD_ENUM=50, KEYWORD_RETURN=51, KEYWORD_IF=52, 
		KEYWORD_ELIF=53, KEYWORD_ELSE=54, KEYWORD_SWITCH=55, KEYWORD_FOR=56, KEYWORD_DO=57, 
		KEYWORD_WHILE=58, KEYWORD_BREAK=59, KEYWORD_CONTINUE=60, KEYWORD_DISCARD=61, 
		KEYWORD_CASE=62, KEYWORD_STATIC=63, KEYWORD_CONST=64, KEYWORD_PERMUTATION=65, 
		KEYWORD_PERMUTE=66, KEYWORD_STREAM=67, TYPE_VOID=68, TYPE_BOOL=69, TYPE_INT=70, 
		TYPE_UINT=71, TYPE_FLOAT=72, TYPE_DOUBLE=73, TYPE_STRING=74, TYPE_VECTOR2B=75, 
		TYPE_VECTOR2F=76, TYPE_VECTOR2I=77, TYPE_VECTOR2UI=78, TYPE_VECTOR3B=79, 
		TYPE_VECTOR3F=80, TYPE_VECTOR3I=81, TYPE_VECTOR3UI=82, TYPE_VECTOR4B=83, 
		TYPE_VECTOR4F=84, TYPE_VECTOR4I=85, TYPE_VECTOR4UI=86, TYPE_MATRIX2F=87, 
		TYPE_MATRIX3F=88, TYPE_MATRIX4F=89, TYPE_MATRIX2X3F=90, TYPE_MATRIX2X4F=91, 
		TYPE_MATRIX3X2F=92, TYPE_MATRIX3X4F=93, TYPE_MATRIX4X2F=94, TYPE_MATRIX4X3F=95, 
		TYPE_COLOR3=96, TYPE_COLOR4=97, TYPE_SAMPLER=98, TYPE_TEXTURE1D=99, TYPE_TEXTURE2D=100, 
		TYPE_TEXTURE1DARRAY=101, TYPE_TEXTURE2DARRAY=102, TYPE_TEXTURE3D=103, 
		TYPE_CUBEMAP=104, TYPE_CUBEMAPARRAY=105, TOK_OPEN_PAREN=106, TOK_CLOSE_PAREN=107, 
		TOK_OPEN_BRACKET=108, TOK_CLOSE_BRACKET=109, TOK_OPEN_BRACE=110, TOK_CLOSE_BRACE=111, 
		TOK_DOT=112, TOK_UNDERSCORE=113, TOK_TILDE=114, TOK_EXCLAMATION=115, TOK_QUESTION=116, 
		TOK_COLON=117, TOK_SEMICOLON=118, TOK_COMMA=119, TOK_HASHTAG=120, TOK_DOLLAR=121, 
		TOK_AT=122, TOK_BACKSLASH=123, TOK_NAMESPACE_SEPARATOR=124, OP_PIPE=125, 
		OP_AMPERSAND=126, OP_PLUS=127, OP_MINUS=128, OP_ASTERISK=129, OP_EXPONENT=130, 
		OP_MODULUS=131, OP_DIV=132, OP_ASSIGN=133, OP_EQUAL=134, OP_DIFFERENT=135, 
		OP_GREATER_THAN=136, OP_LESSER_THAN=137, OP_GEQ_THAN=138, OP_LEQ_THAN=139, 
		OP_INCREMENT=140, OP_DECREMENT=141, OP_PLUS_ASSIGN=142, OP_MINUS_ASSIGN=143, 
		OP_MUL_ASSIGN=144, OP_DIV_ASSIGN=145, OP_MODULUS_ASSIGN=146, OP_BITWISE_OR_ASSIGN=147, 
		OP_BITWISE_AND_ASSIGN=148, OP_EXPONENT_ASSIGN=149, OP_LSHIFT_ASSIGN=150, 
		OP_RSHIFT_ASSIGN=151, OP_OR=152, OP_AND=153, OP_XOR=154, OP_LSHIFT=155, 
		OP_RSHIFT=156, WHITESPACE=157, DOC_COMMENT=158, BLOCK_COMMENT=159, LINE_COMMENT=160, 
		BoolLiteral=161, DoubleLiteral=162, FloatLiteral=163, IntegerLiteral=164, 
		UnsignedIntegerLiteral=165, StringLiteral=166, IDENTIFIER=167;
	public const int
		RULE_shaderFile = 0, RULE_materialFile = 1, RULE_namespaceDefinition = 2, 
		RULE_namespacedTypeName = 3, RULE_fileLevelDefinition = 4, RULE_globalVariable = 5, 
		RULE_permutationVariableBool = 6, RULE_permutationVariableEnum = 7, RULE_permutationVariableInteger = 8, 
		RULE_permutationVariable = 9, RULE_type = 10, RULE_structDefinition = 11, 
		RULE_enumDefinition = 12, RULE_interface = 13, RULE_interfaceDefinition = 14, 
		RULE_interfacesList = 15, RULE_shaderFragment = 16, RULE_shaderFragmentDefinition = 17, 
		RULE_shader = 18, RULE_material = 19, RULE_stream = 20, RULE_materialDefinition = 21, 
		RULE_shaderDefinition = 22, RULE_useDirective = 23, RULE_streamProperty = 24, 
		RULE_shaderMember = 25, RULE_materialMember = 26, RULE_annotation = 27, 
		RULE_directive = 28, RULE_precisionDirective = 29, RULE_shaderLangDirective = 30, 
		RULE_materialParams = 31, RULE_materialState = 32, RULE_localVarDeclaration = 33, 
		RULE_bufferDefinition = 34, RULE_bufferComponent = 35, RULE_materialParamsComponent = 36, 
		RULE_structComponent = 37, RULE_enumComponent = 38, RULE_variableDeclaration = 39, 
		RULE_variableDeclarationAssignment = 40, RULE_variableIdentity = 41, RULE_shaderFunction = 42, 
		RULE_function = 43, RULE_functionHead = 44, RULE_functionSignature = 45, 
		RULE_argList = 46, RULE_argDef = 47, RULE_functionBody = 48, RULE_statementBlock = 49, 
		RULE_referencableExpression = 50, RULE_chainableExpression = 51, RULE_chainedExpression = 52, 
		RULE_assignableChainableExpression = 53, RULE_assignableChainedExpression = 54, 
		RULE_propertyMemberReferenceExpression = 55, RULE_methodMemberReferenceExpression = 56, 
		RULE_memberReferenceExpression = 57, RULE_invocationExpression = 58, RULE_permuteStatement = 59, 
		RULE_ifStatement = 60, RULE_elifStatement = 61, RULE_elseStatement = 62, 
		RULE_switchStatement = 63, RULE_caseStatement = 64, RULE_whileStatement = 65, 
		RULE_forStatement = 66, RULE_doWhileStatement = 67, RULE_parenthesizedExpression = 68, 
		RULE_newInstanceExpression = 69, RULE_parametersList = 70, RULE_contextAccessExpression = 71, 
		RULE_basicExpression = 72, RULE_expressionStatement = 73, RULE_arrayAccessExpression = 74, 
		RULE_assignableExpression = 75, RULE_returnStatement = 76, RULE_breakStatement = 77, 
		RULE_continueStatement = 78, RULE_discardStatement = 79, RULE_leaveControlFlowStatement = 80, 
		RULE_stayControlFlowStatement = 81, RULE_statement = 82, RULE_primitiveExpression = 83, 
		RULE_constantExpression = 84, RULE_dataType = 85, RULE_userDefinedDataType = 86, 
		RULE_primitiveDataType = 87, RULE_builtinDataType = 88;
	public static readonly string[] ruleNames = {
		"shaderFile", "materialFile", "namespaceDefinition", "namespacedTypeName", 
		"fileLevelDefinition", "globalVariable", "permutationVariableBool", "permutationVariableEnum", 
		"permutationVariableInteger", "permutationVariable", "type", "structDefinition", 
		"enumDefinition", "interface", "interfaceDefinition", "interfacesList", 
		"shaderFragment", "shaderFragmentDefinition", "shader", "material", "stream", 
		"materialDefinition", "shaderDefinition", "useDirective", "streamProperty", 
		"shaderMember", "materialMember", "annotation", "directive", "precisionDirective", 
		"shaderLangDirective", "materialParams", "materialState", "localVarDeclaration", 
		"bufferDefinition", "bufferComponent", "materialParamsComponent", "structComponent", 
		"enumComponent", "variableDeclaration", "variableDeclarationAssignment", 
		"variableIdentity", "shaderFunction", "function", "functionHead", "functionSignature", 
		"argList", "argDef", "functionBody", "statementBlock", "referencableExpression", 
		"chainableExpression", "chainedExpression", "assignableChainableExpression", 
		"assignableChainedExpression", "propertyMemberReferenceExpression", "methodMemberReferenceExpression", 
		"memberReferenceExpression", "invocationExpression", "permuteStatement", 
		"ifStatement", "elifStatement", "elseStatement", "switchStatement", "caseStatement", 
		"whileStatement", "forStatement", "doWhileStatement", "parenthesizedExpression", 
		"newInstanceExpression", "parametersList", "contextAccessExpression", 
		"basicExpression", "expressionStatement", "arrayAccessExpression", "assignableExpression", 
		"returnStatement", "breakStatement", "continueStatement", "discardStatement", 
		"leaveControlFlowStatement", "stayControlFlowStatement", "statement", 
		"primitiveExpression", "constantExpression", "dataType", "userDefinedDataType", 
		"primitiveDataType", "builtinDataType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'precision'", "'low'", "'medium'", "'high'", "'shaderLang'", "'GLSL'", 
		"'HLSL'", "'MSL'", "'state'", "'coherent'", "'readonly'", "'writeonly'", 
		"'readwrite'", "'constant'", "'namespace'", "'abstract'", "'vertex'", 
		"'fragment'", "'pixel'", "'geometry'", "'hull'", "'domain'", "'compute'", 
		"'graphic'", "'shader'", "'interface'", "'material'", "'partial'", "'params'", 
		"'type'", "'as'", "'in'", "'of'", "'out'", "'inout'", "'extends'", "'implements'", 
		"'use'", "'var'", "'input'", "'output'", "'transient'", "'buffer'", "'local'", 
		"'global'", "'override'", "'this'", "'base'", "'struct'", "'enum'", "'return'", 
		"'if'", "'elif'", "'else'", "'switch'", "'for'", "'do'", "'while'", "'break'", 
		"'continue'", "'discard'", "'case'", "'static'", "'const'", "'permutation'", 
		"'permute'", "'stream'", "'void'", "'bool'", "'int'", "'uint'", "'float'", 
		"'double'", "'string'", "'vector2b'", "'vector2f'", "'vector2i'", "'vector2ui'", 
		"'vector3b'", "'vector3f'", "'vector3i'", "'vector3ui'", "'vector4b'", 
		"'vector4f'", "'vector4i'", "'vector4ui'", "'matrix2f'", "'matrix3f'", 
		"'matrix4f'", "'matrix2x3f'", "'matrix2x4f'", "'matrix3x2f'", "'matrix3x4f'", 
		"'matrix4x2f'", "'matrix4x3f'", "'color3'", "'color4'", "'sampler'", "'texture1d'", 
		"'texture2d'", "'texture1dArray'", "'texture2dArray'", "'texture3d'", 
		"'cubemap'", "'cubemapArray'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"'.'", "'_'", "'~'", "'!'", "'?'", "':'", "';'", "','", "'#'", "'$'", 
		"'@'", "'\\'", "'::'", "'|'", "'&'", "'+'", "'-'", "'*'", "'^'", "'%'", 
		"'/'", "'='", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'++'", "'--'", 
		"'+='", "'-='", "'*='", "'/='", "'%='", "'|='", "'&='", "'^='", "'<<='", 
		"'>>='", null, null, "'^^'", "'<<'", "'>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "KEYWORD_NAMESPACE", "KEYWORD_ABSTRACT", "KEYWORD_VERTEX", 
		"KEYWORD_FRAGMENT", "KEYWORD_PIXEL", "KEYWORD_GEOMETRY", "KEYWORD_HULL", 
		"KEYWORD_DOMAIN", "KEYWORD_COMPUTE", "KEYWORD_GRAPHIC", "KEYWORD_SHADER", 
		"KEYWORD_INTERFACE", "KEYWORD_MATERIAL", "KEYWORD_PARTIAL", "KEYWORD_PARAMS", 
		"KEYWORD_TYPE", "KEYWORD_AS", "KEYWORD_IN", "KEYWORD_OF", "KEYWORD_OUT", 
		"KEYWORD_INOUT", "KEYWORD_EXTENDS", "KEYWORD_IMPLEMENTS", "KEYWORD_USE", 
		"KEYWORD_VAR", "KEYWORD_INPUT", "KEYWORD_OUTPUT", "KEYWORD_TRANSIENT", 
		"KEYWORD_BUFFER", "KEYWORD_LOCAL", "KEYWORD_GLOBAL", "KEYWORD_OVERRIDE", 
		"KEYWORD_THIS", "KEYWORD_BASE", "KEYWORD_STRUCT", "KEYWORD_ENUM", "KEYWORD_RETURN", 
		"KEYWORD_IF", "KEYWORD_ELIF", "KEYWORD_ELSE", "KEYWORD_SWITCH", "KEYWORD_FOR", 
		"KEYWORD_DO", "KEYWORD_WHILE", "KEYWORD_BREAK", "KEYWORD_CONTINUE", "KEYWORD_DISCARD", 
		"KEYWORD_CASE", "KEYWORD_STATIC", "KEYWORD_CONST", "KEYWORD_PERMUTATION", 
		"KEYWORD_PERMUTE", "KEYWORD_STREAM", "TYPE_VOID", "TYPE_BOOL", "TYPE_INT", 
		"TYPE_UINT", "TYPE_FLOAT", "TYPE_DOUBLE", "TYPE_STRING", "TYPE_VECTOR2B", 
		"TYPE_VECTOR2F", "TYPE_VECTOR2I", "TYPE_VECTOR2UI", "TYPE_VECTOR3B", "TYPE_VECTOR3F", 
		"TYPE_VECTOR3I", "TYPE_VECTOR3UI", "TYPE_VECTOR4B", "TYPE_VECTOR4F", "TYPE_VECTOR4I", 
		"TYPE_VECTOR4UI", "TYPE_MATRIX2F", "TYPE_MATRIX3F", "TYPE_MATRIX4F", "TYPE_MATRIX2X3F", 
		"TYPE_MATRIX2X4F", "TYPE_MATRIX3X2F", "TYPE_MATRIX3X4F", "TYPE_MATRIX4X2F", 
		"TYPE_MATRIX4X3F", "TYPE_COLOR3", "TYPE_COLOR4", "TYPE_SAMPLER", "TYPE_TEXTURE1D", 
		"TYPE_TEXTURE2D", "TYPE_TEXTURE1DARRAY", "TYPE_TEXTURE2DARRAY", "TYPE_TEXTURE3D", 
		"TYPE_CUBEMAP", "TYPE_CUBEMAPARRAY", "TOK_OPEN_PAREN", "TOK_CLOSE_PAREN", 
		"TOK_OPEN_BRACKET", "TOK_CLOSE_BRACKET", "TOK_OPEN_BRACE", "TOK_CLOSE_BRACE", 
		"TOK_DOT", "TOK_UNDERSCORE", "TOK_TILDE", "TOK_EXCLAMATION", "TOK_QUESTION", 
		"TOK_COLON", "TOK_SEMICOLON", "TOK_COMMA", "TOK_HASHTAG", "TOK_DOLLAR", 
		"TOK_AT", "TOK_BACKSLASH", "TOK_NAMESPACE_SEPARATOR", "OP_PIPE", "OP_AMPERSAND", 
		"OP_PLUS", "OP_MINUS", "OP_ASTERISK", "OP_EXPONENT", "OP_MODULUS", "OP_DIV", 
		"OP_ASSIGN", "OP_EQUAL", "OP_DIFFERENT", "OP_GREATER_THAN", "OP_LESSER_THAN", 
		"OP_GEQ_THAN", "OP_LEQ_THAN", "OP_INCREMENT", "OP_DECREMENT", "OP_PLUS_ASSIGN", 
		"OP_MINUS_ASSIGN", "OP_MUL_ASSIGN", "OP_DIV_ASSIGN", "OP_MODULUS_ASSIGN", 
		"OP_BITWISE_OR_ASSIGN", "OP_BITWISE_AND_ASSIGN", "OP_EXPONENT_ASSIGN", 
		"OP_LSHIFT_ASSIGN", "OP_RSHIFT_ASSIGN", "OP_OR", "OP_AND", "OP_XOR", "OP_LSHIFT", 
		"OP_RSHIFT", "WHITESPACE", "DOC_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT", 
		"BoolLiteral", "DoubleLiteral", "FloatLiteral", "IntegerLiteral", "UnsignedIntegerLiteral", 
		"StringLiteral", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SPSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SPSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SPSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SPSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ShaderFileContext : ParserRuleContext {
		public DirectiveContext Directives;
		public NamespaceDefinitionContext Namespace;
		public FileLevelDefinitionContext FileLevelDefinitions;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SPSLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDefinitionContext namespaceDefinition() {
			return GetRuleContext<NamespaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelDefinitionContext[] fileLevelDefinition() {
			return GetRuleContexts<FileLevelDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelDefinitionContext fileLevelDefinition(int i) {
			return GetRuleContext<FileLevelDefinitionContext>(i);
		}
		public ShaderFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFileContext shaderFile() {
		ShaderFileContext _localctx = new ShaderFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_shaderFile);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_HASHTAG) {
				{
				{
				State = 178;
				_localctx.Directives = directive();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 187;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 184;
					Match(DOC_COMMENT);
					}
					} 
				}
				State = 189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_NAMESPACE) {
				{
				State = 190;
				_localctx.Namespace = namespaceDefinition();
				}
			}

			State = 202;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 196;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 193;
						Match(DOC_COMMENT);
						}
						}
						State = 198;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 199;
					useDirective();
					}
					} 
				}
				State = 204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 16)) & ~0x3f) == 0 && ((1L << (_la - 16)) & 985162418505727L) != 0) || _la==DOC_COMMENT) {
				{
				{
				State = 205;
				_localctx.FileLevelDefinitions = fileLevelDefinition();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 211;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialFileContext : ParserRuleContext {
		public DirectiveContext Directives;
		public NamespaceDefinitionContext Namespace;
		public MaterialContext Material;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SPSLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialContext material() {
			return GetRuleContext<MaterialContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDefinitionContext namespaceDefinition() {
			return GetRuleContext<NamespaceDefinitionContext>(0);
		}
		public MaterialFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialFileContext materialFile() {
		MaterialFileContext _localctx = new MaterialFileContext(Context, State);
		EnterRule(_localctx, 2, RULE_materialFile);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_HASHTAG) {
				{
				{
				State = 213;
				_localctx.Directives = directive();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 222;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 219;
					Match(DOC_COMMENT);
					}
					} 
				}
				State = 224;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_NAMESPACE) {
				{
				State = 225;
				_localctx.Namespace = namespaceDefinition();
				}
			}

			State = 237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 231;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 228;
						Match(DOC_COMMENT);
						}
						}
						State = 233;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 234;
					useDirective();
					}
					} 
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			State = 240;
			_localctx.Material = material();
			State = 241;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDefinitionContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_NAMESPACE() { return GetToken(SPSLParser.KEYWORD_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public NamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDefinitionContext namespaceDefinition() {
		NamespaceDefinitionContext _localctx = new NamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(KEYWORD_NAMESPACE);
			State = 244;
			_localctx.Name = namespacedTypeName();
			State = 245;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_NAMESPACE_SEPARATOR() { return GetTokens(SPSLParser.TOK_NAMESPACE_SEPARATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_NAMESPACE_SEPARATOR(int i) {
			return GetToken(SPSLParser.TOK_NAMESPACE_SEPARATOR, i);
		}
		public NamespacedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNamespacedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNamespacedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacedTypeNameContext namespacedTypeName() {
		NamespacedTypeNameContext _localctx = new NamespacedTypeNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespacedTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(IDENTIFIER);
			State = 252;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 248;
					Match(TOK_NAMESPACE_SEPARATOR);
					State = 249;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileLevelDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext permutationVariable() {
			return GetRuleContext<PermutationVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface() {
			return GetRuleContext<InterfaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFragmentContext shaderFragment() {
			return GetRuleContext<ShaderFragmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderContext shader() {
			return GetRuleContext<ShaderContext>(0);
		}
		public FileLevelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileLevelDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFileLevelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFileLevelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileLevelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileLevelDefinitionContext fileLevelDefinition() {
		FileLevelDefinitionContext _localctx = new FileLevelDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_fileLevelDefinition);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				globalVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				permutationVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 257;
				type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 258;
				@interface();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 259;
				shaderFragment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 260;
				shader();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public bool IsStatic;
		public DataTypeContext Type;
		public VariableDeclarationAssignmentContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STATIC() { return GetToken(SPSLParser.KEYWORD_STATIC, 0); }
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 10, RULE_globalVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_STATIC) {
				{
				State = 263;
				Match(KEYWORD_STATIC);
				_localctx.IsStatic =  true;
				}
			}

			State = 267;
			Match(KEYWORD_CONST);
			State = 268;
			_localctx.Type = dataType();
			State = 269;
			_localctx.Definition = variableDeclarationAssignment();
			State = 270;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableBoolContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(SPSLParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(SPSLParser.BoolLiteral, 0); }
		public PermutationVariableBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableBoolContext permutationVariableBool() {
		PermutationVariableBoolContext _localctx = new PermutationVariableBoolContext(Context, State);
		EnterRule(_localctx, 12, RULE_permutationVariableBool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(KEYWORD_PERMUTATION);
			State = 273;
			Match(TYPE_BOOL);
			State = 274;
			_localctx.Identifier = basicExpression();
			State = 275;
			Match(OP_ASSIGN);
			State = 276;
			_localctx.Value = Match(BoolLiteral);
			State = 277;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableEnumContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public BasicExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ENUM() { return GetToken(SPSLParser.KEYWORD_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext[] basicExpression() {
			return GetRuleContexts<BasicExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression(int i) {
			return GetRuleContext<BasicExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public PermutationVariableEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableEnumContext permutationVariableEnum() {
		PermutationVariableEnumContext _localctx = new PermutationVariableEnumContext(Context, State);
		EnterRule(_localctx, 14, RULE_permutationVariableEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(KEYWORD_PERMUTATION);
			State = 280;
			Match(KEYWORD_ENUM);
			State = 281;
			_localctx.Identifier = basicExpression();
			State = 282;
			Match(TOK_OPEN_BRACE);
			State = 283;
			Match(IDENTIFIER);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 284;
				Match(TOK_COMMA);
				State = 285;
				Match(IDENTIFIER);
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 291;
			Match(TOK_CLOSE_BRACE);
			State = 292;
			Match(OP_ASSIGN);
			State = 293;
			_localctx.Value = basicExpression();
			State = 294;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableIntegerContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(SPSLParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		public PermutationVariableIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableIntegerContext permutationVariableInteger() {
		PermutationVariableIntegerContext _localctx = new PermutationVariableIntegerContext(Context, State);
		EnterRule(_localctx, 16, RULE_permutationVariableInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(KEYWORD_PERMUTATION);
			State = 297;
			Match(TYPE_INT);
			State = 298;
			_localctx.Identifier = basicExpression();
			State = 299;
			Match(OP_ASSIGN);
			State = 300;
			_localctx.Value = Match(IntegerLiteral);
			State = 301;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableBoolContext permutationVariableBool() {
			return GetRuleContext<PermutationVariableBoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableEnumContext permutationVariableEnum() {
			return GetRuleContext<PermutationVariableEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableIntegerContext permutationVariableInteger() {
			return GetRuleContext<PermutationVariableIntegerContext>(0);
		}
		public PermutationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableContext permutationVariable() {
		PermutationVariableContext _localctx = new PermutationVariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_permutationVariable);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303;
				permutationVariableBool();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304;
				permutationVariableEnum();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 305;
				permutationVariableInteger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumContext : TypeContext {
		public EnumDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumComponentContext[] enumComponent() {
			return GetRuleContexts<EnumComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumComponentContext enumComponent(int i) {
			return GetRuleContext<EnumComponentContext>(i);
		}
		public EnumContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructContext : TypeContext {
		public StructDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructComponentContext[] structComponent() {
			return GetRuleContexts<StructComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructComponentContext structComponent(int i) {
			return GetRuleContext<StructComponentContext>(i);
		}
		public StructContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_type);
		int _la;
		try {
			State = 352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new StructContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 308;
					Match(DOC_COMMENT);
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 314;
				((StructContext)_localctx).Definition = structDefinition();
				State = 315;
				Match(TOK_OPEN_BRACE);
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 18014673387388927L) != 0) || _la==DOC_COMMENT || _la==IDENTIFIER) {
					{
					{
					State = 319;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 316;
						Match(DOC_COMMENT);
						}
						}
						State = 321;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 322;
					structComponent();
					}
					}
					State = 327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 328;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			case 2:
				_localctx = new EnumContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 330;
					Match(DOC_COMMENT);
					}
					}
					State = 335;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 336;
				((EnumContext)_localctx).Definition = enumDefinition();
				State = 337;
				Match(TOK_OPEN_BRACE);
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT || _la==IDENTIFIER) {
					{
					{
					State = 341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 338;
						Match(DOC_COMMENT);
						}
						}
						State = 343;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 344;
					enumComponent();
					}
					}
					State = 349;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 350;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public IToken Name;
		public NamespacedTypeNameContext ExtendedType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TYPE() { return GetToken(SPSLParser.KEYWORD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STRUCT() { return GetToken(SPSLParser.KEYWORD_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 22, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(KEYWORD_TYPE);
			State = 355;
			_localctx.Name = Match(IDENTIFIER);
			State = 356;
			Match(KEYWORD_AS);
			State = 357;
			Match(KEYWORD_STRUCT);
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 358;
				Match(KEYWORD_EXTENDS);
				State = 359;
				_localctx.ExtendedType = namespacedTypeName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TYPE() { return GetToken(SPSLParser.KEYWORD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ENUM() { return GetToken(SPSLParser.KEYWORD_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			Match(KEYWORD_TYPE);
			State = 363;
			_localctx.Name = Match(IDENTIFIER);
			State = 364;
			Match(KEYWORD_AS);
			State = 365;
			Match(KEYWORD_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		public InterfaceDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDefinitionContext interfaceDefinition() {
			return GetRuleContext<InterfaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext[] functionHead() {
			return GetRuleContexts<FunctionHeadContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead(int i) {
			return GetRuleContext<FunctionHeadContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_SEMICOLON() { return GetTokens(SPSLParser.TOK_SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON(int i) {
			return GetToken(SPSLParser.TOK_SEMICOLON, i);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 26, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 367;
				Match(DOC_COMMENT);
				}
				}
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 373;
			_localctx.Definition = interfaceDefinition();
			State = 374;
			Match(TOK_OPEN_BRACE);
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 274877906943L) != 0) || _la==DOC_COMMENT || _la==IDENTIFIER) {
				{
				{
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 375;
					Match(DOC_COMMENT);
					}
					}
					State = 380;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 381;
				functionHead();
				State = 382;
				Match(TOK_SEMICOLON);
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 389;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDefinitionContext : ParserRuleContext {
		public IToken Name;
		public InterfacesListContext ExtendedInterfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INTERFACE() { return GetToken(SPSLParser.KEYWORD_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public InterfaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterfaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterfaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefinitionContext interfaceDefinition() {
		InterfaceDefinitionContext _localctx = new InterfaceDefinitionContext(Context, State);
		EnterRule(_localctx, 28, RULE_interfaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(KEYWORD_INTERFACE);
			State = 392;
			_localctx.Name = Match(IDENTIFIER);
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 393;
				Match(KEYWORD_EXTENDS);
				State = 394;
				_localctx.ExtendedInterfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfacesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext[] namespacedTypeName() {
			return GetRuleContexts<NamespacedTypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName(int i) {
			return GetRuleContext<NamespacedTypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public InterfacesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfacesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterfacesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterfacesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfacesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfacesListContext interfacesList() {
		InterfacesListContext _localctx = new InterfacesListContext(Context, State);
		EnterRule(_localctx, 30, RULE_interfacesList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			namespacedTypeName();
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 398;
				Match(TOK_COMMA);
				State = 399;
				namespacedTypeName();
				}
				}
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFragmentContext : ParserRuleContext {
		public ShaderFragmentDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFragmentDefinitionContext shaderFragmentDefinition() {
			return GetRuleContext<ShaderFragmentDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext[] shaderMember() {
			return GetRuleContexts<ShaderMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext shaderMember(int i) {
			return GetRuleContext<ShaderMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext[] permutationVariable() {
			return GetRuleContexts<PermutationVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext permutationVariable(int i) {
			return GetRuleContext<PermutationVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext[] globalVariable() {
			return GetRuleContexts<GlobalVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext globalVariable(int i) {
			return GetRuleContext<GlobalVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public ShaderFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFragment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFragment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFragment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFragmentContext shaderFragment() {
		ShaderFragmentContext _localctx = new ShaderFragmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_shaderFragment);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 405;
				Match(DOC_COMMENT);
				}
				}
				State = 410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 411;
			_localctx.Definition = shaderFragmentDefinition();
			State = 412;
			Match(TOK_OPEN_BRACE);
			State = 422;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 416;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 413;
						Match(DOC_COMMENT);
						}
						}
						State = 418;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 419;
					useDirective();
					}
					} 
				}
				State = 424;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223292870943802368L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 288234774198222843L) != 0) || _la==DOC_COMMENT || _la==IDENTIFIER) {
				{
				{
				State = 428;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 425;
						Match(DOC_COMMENT);
						}
						} 
					}
					State = 430;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
				}
				State = 435;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 431;
					shaderMember();
					}
					break;
				case 2:
					{
					State = 432;
					permutationVariable();
					}
					break;
				case 3:
					{
					State = 433;
					globalVariable();
					}
					break;
				case 4:
					{
					State = 434;
					shaderFunction();
					}
					break;
				}
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 442;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFragmentDefinitionContext : ParserRuleContext {
		public IToken Name;
		public NamespacedTypeNameContext ExtendedFragment;
		public InterfacesListContext ExtendedInterfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FRAGMENT() { return GetToken(SPSLParser.KEYWORD_FRAGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public ShaderFragmentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFragmentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFragmentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFragmentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFragmentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFragmentDefinitionContext shaderFragmentDefinition() {
		ShaderFragmentDefinitionContext _localctx = new ShaderFragmentDefinitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_shaderFragmentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444;
			Match(KEYWORD_FRAGMENT);
			State = 445;
			_localctx.Name = Match(IDENTIFIER);
			State = 448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 446;
				Match(KEYWORD_EXTENDS);
				State = 447;
				_localctx.ExtendedFragment = namespacedTypeName();
				}
			}

			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_IMPLEMENTS) {
				{
				State = 450;
				Match(KEYWORD_IMPLEMENTS);
				State = 451;
				_localctx.ExtendedInterfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderContext : ParserRuleContext {
		public ShaderDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDefinitionContext shaderDefinition() {
			return GetRuleContext<ShaderDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext[] shaderMember() {
			return GetRuleContexts<ShaderMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext shaderMember(int i) {
			return GetRuleContext<ShaderMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public ShaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderContext shader() {
		ShaderContext _localctx = new ShaderContext(Context, State);
		EnterRule(_localctx, 36, RULE_shader);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 454;
				Match(DOC_COMMENT);
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 460;
			_localctx.Definition = shaderDefinition();
			State = 461;
			Match(TOK_OPEN_BRACE);
			State = 471;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 465;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 462;
						Match(DOC_COMMENT);
						}
						}
						State = 467;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 468;
					useDirective();
					}
					} 
				}
				State = 473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			State = 483;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 477;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 474;
							Match(DOC_COMMENT);
							}
							} 
						}
						State = 479;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
					}
					State = 480;
					shaderMember();
					}
					} 
				}
				State = 485;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 1152921504602652673L) != 0) || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 35253091565569L) != 0)) {
				{
				{
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 486;
					Match(DOC_COMMENT);
					}
					}
					State = 491;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 492;
				shaderFunction();
				}
				}
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 498;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialContext : ParserRuleContext {
		public MaterialDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialDefinitionContext materialDefinition() {
			return GetRuleContext<MaterialDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialMemberContext[] materialMember() {
			return GetRuleContexts<MaterialMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialMemberContext materialMember(int i) {
			return GetRuleContext<MaterialMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public MaterialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_material; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialContext material() {
		MaterialContext _localctx = new MaterialContext(Context, State);
		EnterRule(_localctx, 38, RULE_material);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 500;
				Match(DOC_COMMENT);
				}
				}
				State = 505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 506;
			_localctx.Definition = materialDefinition();
			State = 507;
			Match(TOK_OPEN_BRACE);
			State = 517;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 511;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 508;
						Match(DOC_COMMENT);
						}
						}
						State = 513;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 514;
					useDirective();
					}
					} 
				}
				State = 519;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			State = 529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 523;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 520;
							Match(DOC_COMMENT);
							}
							} 
						}
						State = 525;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
					}
					State = 526;
					materialMember();
					}
					} 
				}
				State = 531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 1152921504602652673L) != 0) || ((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 35253091565569L) != 0)) {
				{
				{
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 532;
					Match(DOC_COMMENT);
					}
					}
					State = 537;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 538;
				shaderFunction();
				}
				}
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 544;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreamContext : ParserRuleContext {
		public bool IsPartial;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STREAM() { return GetToken(SPSLParser.KEYWORD_STREAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreamPropertyContext[] streamProperty() {
			return GetRuleContexts<StreamPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreamPropertyContext streamProperty(int i) {
			return GetRuleContext<StreamPropertyContext>(i);
		}
		public StreamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stream; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStream(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStream(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStream(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreamContext stream() {
		StreamContext _localctx = new StreamContext(Context, State);
		EnterRule(_localctx, 40, RULE_stream);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 546;
				Match(DOC_COMMENT);
				}
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 552;
			Match(KEYWORD_STREAM);
			State = 553;
			Match(TOK_OPEN_BRACE);
			State = 563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0) || _la==TOK_AT || _la==DOC_COMMENT) {
				{
				{
				State = 557;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 554;
					Match(DOC_COMMENT);
					}
					}
					State = 559;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 560;
				streamProperty();
				}
				}
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 566;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialDefinitionContext : ParserRuleContext {
		public bool IsAbstract;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedMaterial;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_MATERIAL() { return GetToken(SPSLParser.KEYWORD_MATERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public MaterialDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialDefinitionContext materialDefinition() {
		MaterialDefinitionContext _localctx = new MaterialDefinitionContext(Context, State);
		EnterRule(_localctx, 42, RULE_materialDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ABSTRACT) {
				{
				State = 568;
				Match(KEYWORD_ABSTRACT);
				_localctx.IsAbstract =  true;
				}
			}

			State = 572;
			Match(KEYWORD_MATERIAL);
			State = 573;
			_localctx.Name = Match(IDENTIFIER);
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 574;
				Match(KEYWORD_EXTENDS);
				State = 575;
				_localctx.ExtendedMaterial = namespacedTypeName();
				}
			}

			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_IMPLEMENTS) {
				{
				State = 578;
				Match(KEYWORD_IMPLEMENTS);
				State = 579;
				_localctx.Interfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderDefinitionContext : ParserRuleContext {
		public bool IsAbstract;
		public ShaderDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderDefinition; } }
	 
		public ShaderDefinitionContext() { }
		public virtual void CopyFrom(ShaderDefinitionContext context) {
			base.CopyFrom(context);
			this.IsAbstract = context.IsAbstract;
		}
	}
	public partial class GenericShaderDefinitionContext : ShaderDefinitionContext {
		public IToken Type;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedShader;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VERTEX() { return GetToken(SPSLParser.KEYWORD_VERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PIXEL() { return GetToken(SPSLParser.KEYWORD_PIXEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_GEOMETRY() { return GetToken(SPSLParser.KEYWORD_GEOMETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_HULL() { return GetToken(SPSLParser.KEYWORD_HULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DOMAIN() { return GetToken(SPSLParser.KEYWORD_DOMAIN, 0); }
		public GenericShaderDefinitionContext(ShaderDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterGenericShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitGenericShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericShaderDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputeShaderDefinitionContext : ShaderDefinitionContext {
		public IToken Type;
		public IToken Name;
		public IToken ThreadCountX;
		public IToken ThreadCountY;
		public IToken ThreadCountZ;
		public NamespacedTypeNameContext ExtendedShader;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_COMPUTE() { return GetToken(SPSLParser.KEYWORD_COMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IntegerLiteral() { return GetTokens(SPSLParser.IntegerLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral(int i) {
			return GetToken(SPSLParser.IntegerLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public ComputeShaderDefinitionContext(ShaderDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterComputeShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitComputeShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputeShaderDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GraphicShaderDefinitionContext : ShaderDefinitionContext {
		public IToken Type;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedShader;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_GRAPHIC() { return GetToken(SPSLParser.KEYWORD_GRAPHIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public GraphicShaderDefinitionContext(ShaderDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterGraphicShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitGraphicShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphicShaderDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderDefinitionContext shaderDefinition() {
		ShaderDefinitionContext _localctx = new ShaderDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_shaderDefinition);
		int _la;
		try {
			State = 628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_ABSTRACT:
			case KEYWORD_VERTEX:
			case KEYWORD_PIXEL:
			case KEYWORD_GEOMETRY:
			case KEYWORD_HULL:
			case KEYWORD_DOMAIN:
			case KEYWORD_SHADER:
				_localctx = new GenericShaderDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_ABSTRACT) {
					{
					State = 582;
					Match(KEYWORD_ABSTRACT);
					((GenericShaderDefinitionContext)_localctx).IsAbstract =  true;
					}
				}

				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7995392L) != 0)) {
					{
					State = 586;
					((GenericShaderDefinitionContext)_localctx).Type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7995392L) != 0)) ) {
						((GenericShaderDefinitionContext)_localctx).Type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 589;
				Match(KEYWORD_SHADER);
				State = 590;
				((GenericShaderDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_EXTENDS) {
					{
					State = 591;
					Match(KEYWORD_EXTENDS);
					State = 592;
					((GenericShaderDefinitionContext)_localctx).ExtendedShader = namespacedTypeName();
					}
				}

				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_IMPLEMENTS) {
					{
					State = 595;
					Match(KEYWORD_IMPLEMENTS);
					State = 596;
					((GenericShaderDefinitionContext)_localctx).Interfaces = interfacesList();
					}
				}

				}
				break;
			case KEYWORD_COMPUTE:
				_localctx = new ComputeShaderDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 599;
				((ComputeShaderDefinitionContext)_localctx).Type = Match(KEYWORD_COMPUTE);
				State = 600;
				Match(KEYWORD_SHADER);
				State = 601;
				((ComputeShaderDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 602;
				Match(OP_LESSER_THAN);
				State = 603;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountX = Match(IntegerLiteral);
				State = 604;
				Match(TOK_COMMA);
				State = 605;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountY = Match(IntegerLiteral);
				State = 606;
				Match(TOK_COMMA);
				State = 607;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountZ = Match(IntegerLiteral);
				State = 608;
				Match(OP_GREATER_THAN);
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_EXTENDS) {
					{
					State = 609;
					Match(KEYWORD_EXTENDS);
					State = 610;
					((ComputeShaderDefinitionContext)_localctx).ExtendedShader = namespacedTypeName();
					}
				}

				State = 615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_IMPLEMENTS) {
					{
					State = 613;
					Match(KEYWORD_IMPLEMENTS);
					State = 614;
					((ComputeShaderDefinitionContext)_localctx).Interfaces = interfacesList();
					}
				}

				}
				break;
			case KEYWORD_GRAPHIC:
				_localctx = new GraphicShaderDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 617;
				((GraphicShaderDefinitionContext)_localctx).Type = Match(KEYWORD_GRAPHIC);
				State = 618;
				Match(KEYWORD_SHADER);
				State = 619;
				((GraphicShaderDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_EXTENDS) {
					{
					State = 620;
					Match(KEYWORD_EXTENDS);
					State = 621;
					((GraphicShaderDefinitionContext)_localctx).ExtendedShader = namespacedTypeName();
					}
				}

				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_IMPLEMENTS) {
					{
					State = 624;
					Match(KEYWORD_IMPLEMENTS);
					State = 625;
					((GraphicShaderDefinitionContext)_localctx).Interfaces = interfacesList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDirectiveContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_USE() { return GetToken(SPSLParser.KEYWORD_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UseDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUseDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUseDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDirectiveContext useDirective() {
		UseDirectiveContext _localctx = new UseDirectiveContext(Context, State);
		EnterRule(_localctx, 46, RULE_useDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			Match(KEYWORD_USE);
			State = 631;
			_localctx.Name = namespacedTypeName();
			State = 632;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreamPropertyContext : ParserRuleContext {
		public IToken Flow;
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext bufferComponent() {
			return GetRuleContext<BufferComponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INPUT() { return GetToken(SPSLParser.KEYWORD_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OUTPUT() { return GetToken(SPSLParser.KEYWORD_OUTPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TRANSIENT() { return GetToken(SPSLParser.KEYWORD_TRANSIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StreamPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streamProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStreamProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStreamProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreamProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreamPropertyContext streamProperty() {
		StreamPropertyContext _localctx = new StreamPropertyContext(Context, State);
		EnterRule(_localctx, 48, RULE_streamProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 634;
				annotation();
				}
				}
				State = 639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 640;
			_localctx.Flow = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0)) ) {
				_localctx.Flow = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 641;
			bufferComponent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext bufferDefinition() {
			return GetRuleContext<BufferDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StreamContext stream() {
			return GetRuleContext<StreamContext>(0);
		}
		public ShaderMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderMemberContext shaderMember() {
		ShaderMemberContext _localctx = new ShaderMemberContext(Context, State);
		EnterRule(_localctx, 50, RULE_shaderMember);
		try {
			State = 646;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 643;
				bufferDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 644;
				type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 645;
				stream();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MaterialParamsContext materialParams() {
			return GetRuleContext<MaterialParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialStateContext materialState() {
			return GetRuleContext<MaterialStateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclarationContext localVarDeclaration() {
			return GetRuleContext<LocalVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MaterialMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialMemberContext materialMember() {
		MaterialMemberContext _localctx = new MaterialMemberContext(Context, State);
		EnterRule(_localctx, 52, RULE_materialMember);
		try {
			State = 652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 648;
				materialParams();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 649;
				materialState();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 650;
				localVarDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 651;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_AT() { return GetToken(SPSLParser.TOK_AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext[] constantExpression() {
			return GetRuleContexts<ConstantExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression(int i) {
			return GetRuleContext<ConstantExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 54, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			Match(TOK_AT);
			State = 655;
			_localctx.Name = Match(IDENTIFIER);
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOK_OPEN_PAREN) {
				{
				State = 656;
				Match(TOK_OPEN_PAREN);
				State = 665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 127L) != 0)) {
					{
					State = 657;
					constantExpression();
					State = 662;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TOK_COMMA) {
						{
						{
						State = 658;
						Match(TOK_COMMA);
						State = 659;
						constantExpression();
						}
						}
						State = 664;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 667;
				Match(TOK_CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionDirectiveContext precisionDirective() {
			return GetRuleContext<PrecisionDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderLangDirectiveContext shaderLangDirective() {
			return GetRuleContext<ShaderLangDirectiveContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 56, RULE_directive);
		try {
			State = 672;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 670;
				precisionDirective();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 671;
				shaderLangDirective();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public PrecisionDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precisionDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrecisionDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrecisionDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecisionDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionDirectiveContext precisionDirective() {
		PrecisionDirectiveContext _localctx = new PrecisionDirectiveContext(Context, State);
		EnterRule(_localctx, 58, RULE_precisionDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			Match(TOK_HASHTAG);
			State = 675;
			Match(T__0);
			State = 676;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderLangDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public ShaderLangDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderLangDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderLangDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderLangDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderLangDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderLangDirectiveContext shaderLangDirective() {
		ShaderLangDirectiveContext _localctx = new ShaderLangDirectiveContext(Context, State);
		EnterRule(_localctx, 60, RULE_shaderLangDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(TOK_HASHTAG);
			State = 679;
			Match(T__4);
			State = 680;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialParamsContext : ParserRuleContext {
		public bool IsPartial;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PARAMS() { return GetToken(SPSLParser.KEYWORD_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PARTIAL() { return GetToken(SPSLParser.KEYWORD_PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialParamsComponentContext[] materialParamsComponent() {
			return GetRuleContexts<MaterialParamsComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialParamsComponentContext materialParamsComponent(int i) {
			return GetRuleContext<MaterialParamsComponentContext>(i);
		}
		public MaterialParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialParamsContext materialParams() {
		MaterialParamsContext _localctx = new MaterialParamsContext(Context, State);
		EnterRule(_localctx, 62, RULE_materialParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 682;
				annotation();
				}
				}
				State = 687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_PARTIAL) {
				{
				State = 688;
				Match(KEYWORD_PARTIAL);
				_localctx.IsPartial =  true;
				}
			}

			State = 692;
			Match(KEYWORD_PARAMS);
			State = 693;
			_localctx.Name = Match(IDENTIFIER);
			State = 694;
			Match(TOK_OPEN_BRACE);
			State = 698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 18014673387388927L) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 695;
				materialParamsComponent();
				}
				}
				State = 700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 701;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialStateContext : ParserRuleContext {
		public MaterialStateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialState; } }
	 
		public MaterialStateContext() { }
		public virtual void CopyFrom(MaterialStateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MaterialStateValueContext : MaterialStateContext {
		public IToken Name;
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		public MaterialStateValueContext(MaterialStateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialStateValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialStateValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialStateValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MaterialStateBlockContext : MaterialStateContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext[] variableDeclarationAssignment() {
			return GetRuleContexts<VariableDeclarationAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment(int i) {
			return GetRuleContext<VariableDeclarationAssignmentContext>(i);
		}
		public MaterialStateBlockContext(MaterialStateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialStateBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialStateBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialStateBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialStateContext materialState() {
		MaterialStateContext _localctx = new MaterialStateContext(Context, State);
		EnterRule(_localctx, 64, RULE_materialState);
		int _la;
		try {
			State = 718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				_localctx = new MaterialStateBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 703;
				Match(T__8);
				State = 704;
				((MaterialStateBlockContext)_localctx).Name = Match(IDENTIFIER);
				State = 705;
				Match(TOK_OPEN_BRACE);
				State = 709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 706;
					variableDeclarationAssignment();
					}
					}
					State = 711;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 712;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			case 2:
				_localctx = new MaterialStateValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 713;
				Match(T__8);
				State = 714;
				((MaterialStateValueContext)_localctx).Name = Match(IDENTIFIER);
				State = 715;
				Match(OP_ASSIGN);
				State = 716;
				((MaterialStateValueContext)_localctx).Value = Match(IDENTIFIER);
				State = 717;
				Match(TOK_SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarDeclarationContext : ParserRuleContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_LOCAL() { return GetToken(SPSLParser.KEYWORD_LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public LocalVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterLocalVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitLocalVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarDeclarationContext localVarDeclaration() {
		LocalVarDeclarationContext _localctx = new LocalVarDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_localVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 720;
				annotation();
				}
				}
				State = 725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 726;
			Match(KEYWORD_LOCAL);
			State = 727;
			_localctx.Type = dataType();
			State = 728;
			Match(IDENTIFIER);
			State = 733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 729;
				Match(TOK_COMMA);
				State = 730;
				Match(IDENTIFIER);
				}
				}
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 736;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferDefinitionContext : ParserRuleContext {
		public BufferDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferDefinition; } }
	 
		public BufferDefinitionContext() { }
		public virtual void CopyFrom(BufferDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypedBufferDefinitionContext : BufferDefinitionContext {
		public IToken Storage;
		public IToken Access;
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BUFFER() { return GetToken(SPSLParser.KEYWORD_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypedBufferDefinitionContext(BufferDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTypedBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTypedBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedBufferDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InPlaceStructuredBufferDefinitionContext : BufferDefinitionContext {
		public IToken Storage;
		public IToken Access;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BUFFER() { return GetToken(SPSLParser.KEYWORD_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext[] bufferComponent() {
			return GetRuleContexts<BufferComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext bufferComponent(int i) {
			return GetRuleContext<BufferComponentContext>(i);
		}
		public InPlaceStructuredBufferDefinitionContext(BufferDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInPlaceStructuredBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInPlaceStructuredBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInPlaceStructuredBufferDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferDefinitionContext bufferDefinition() {
		BufferDefinitionContext _localctx = new BufferDefinitionContext(Context, State);
		EnterRule(_localctx, 68, RULE_bufferDefinition);
		int _la;
		try {
			State = 779;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				_localctx = new InPlaceStructuredBufferDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 738;
					annotation();
					}
					}
					State = 743;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 744;
					((InPlaceStructuredBufferDefinitionContext)_localctx).Storage = Match(T__9);
					}
				}

				State = 748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) {
					{
					State = 747;
					((InPlaceStructuredBufferDefinitionContext)_localctx).Access = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) ) {
						((InPlaceStructuredBufferDefinitionContext)_localctx).Access = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 750;
				Match(KEYWORD_BUFFER);
				State = 751;
				((InPlaceStructuredBufferDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 752;
				Match(TOK_OPEN_BRACE);
				State = 756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 18014673387388927L) != 0) || _la==IDENTIFIER) {
					{
					{
					State = 753;
					bufferComponent();
					}
					}
					State = 758;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 759;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			case 2:
				_localctx = new TypedBufferDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 763;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 760;
					annotation();
					}
					}
					State = 765;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 766;
					((TypedBufferDefinitionContext)_localctx).Storage = Match(T__9);
					}
				}

				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) {
					{
					State = 769;
					((TypedBufferDefinitionContext)_localctx).Access = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) ) {
						((TypedBufferDefinitionContext)_localctx).Access = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 772;
				Match(KEYWORD_BUFFER);
				State = 773;
				Match(OP_LESSER_THAN);
				State = 774;
				((TypedBufferDefinitionContext)_localctx).Type = dataType();
				State = 775;
				Match(OP_GREATER_THAN);
				State = 776;
				((TypedBufferDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 777;
				Match(TOK_SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferComponentContext : ParserRuleContext {
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public BufferComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBufferComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBufferComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBufferComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferComponentContext bufferComponent() {
		BufferComponentContext _localctx = new BufferComponentContext(Context, State);
		EnterRule(_localctx, 70, RULE_bufferComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 781;
				annotation();
				}
				}
				State = 786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 787;
			_localctx.Type = dataType();
			State = 788;
			_localctx.Name = Match(IDENTIFIER);
			State = 789;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialParamsComponentContext : ParserRuleContext {
		public DataTypeContext Type;
		public IToken Name;
		public ExpressionStatementContext DefaultValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public MaterialParamsComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialParamsComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialParamsComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialParamsComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialParamsComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialParamsComponentContext materialParamsComponent() {
		MaterialParamsComponentContext _localctx = new MaterialParamsComponentContext(Context, State);
		EnterRule(_localctx, 72, RULE_materialParamsComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 791;
				annotation();
				}
				}
				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 797;
			_localctx.Type = dataType();
			State = 798;
			_localctx.Name = Match(IDENTIFIER);
			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASSIGN) {
				{
				State = 799;
				Match(OP_ASSIGN);
				State = 800;
				_localctx.DefaultValue = expressionStatement(0);
				}
			}

			State = 803;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructComponentContext : ParserRuleContext {
		public StructComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structComponent; } }
	 
		public StructComponentContext() { }
		public virtual void CopyFrom(StructComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructPropertyContext : StructComponentContext {
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StructPropertyContext(StructComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructFunctionContext : StructComponentContext {
		public FunctionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StructFunctionContext(StructComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructComponentContext structComponent() {
		StructComponentContext _localctx = new StructComponentContext(Context, State);
		EnterRule(_localctx, 74, RULE_structComponent);
		int _la;
		try {
			State = 822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				_localctx = new StructPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 805;
					annotation();
					}
					}
					State = 810;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 811;
				((StructPropertyContext)_localctx).Type = dataType();
				State = 812;
				((StructPropertyContext)_localctx).Name = Match(IDENTIFIER);
				State = 813;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				_localctx = new StructFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 815;
					annotation();
					}
					}
					State = 820;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 821;
				((StructFunctionContext)_localctx).Function = function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumComponentContext : ParserRuleContext {
		public IToken Name;
		public ConstantExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA() { return GetToken(SPSLParser.TOK_COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnumComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnumComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumComponentContext enumComponent() {
		EnumComponentContext _localctx = new EnumComponentContext(Context, State);
		EnterRule(_localctx, 76, RULE_enumComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			_localctx.Name = Match(IDENTIFIER);
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASSIGN) {
				{
				State = 825;
				Match(OP_ASSIGN);
				State = 826;
				_localctx.Value = constantExpression();
				}
			}

			State = 829;
			Match(TOK_COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public bool IsConst;
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	 
		public VariableDeclarationContext() { }
		public virtual void CopyFrom(VariableDeclarationContext context) {
			base.CopyFrom(context);
			this.IsConst = context.IsConst;
		}
	}
	public partial class UntypedVariableDeclarationContext : VariableDeclarationContext {
		public VariableDeclarationAssignmentContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VAR() { return GetToken(SPSLParser.KEYWORD_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public UntypedVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUntypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUntypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedVariableDeclarationContext : VariableDeclarationContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentityContext[] variableIdentity() {
			return GetRuleContexts<VariableIdentityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentityContext variableIdentity(int i) {
			return GetRuleContext<VariableIdentityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public TypedVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_variableDeclaration);
		int _la;
		try {
			State = 846;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_CONST:
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
			case IDENTIFIER:
				_localctx = new TypedVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_CONST) {
					{
					State = 831;
					Match(KEYWORD_CONST);
					((TypedVariableDeclarationContext)_localctx).IsConst =  true;
					}
				}

				State = 835;
				((TypedVariableDeclarationContext)_localctx).Type = dataType();
				State = 836;
				variableIdentity();
				State = 841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_COMMA) {
					{
					{
					State = 837;
					Match(TOK_COMMA);
					State = 838;
					variableIdentity();
					}
					}
					State = 843;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case KEYWORD_VAR:
				_localctx = new UntypedVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 844;
				Match(KEYWORD_VAR);
				State = 845;
				((UntypedVariableDeclarationContext)_localctx).Declaration = variableDeclarationAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationAssignmentContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public VariableDeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
		VariableDeclarationAssignmentContext _localctx = new VariableDeclarationAssignmentContext(Context, State);
		EnterRule(_localctx, 80, RULE_variableDeclarationAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			_localctx.Identifier = basicExpression();
			State = 849;
			Match(OP_ASSIGN);
			State = 850;
			_localctx.Expression = expressionStatement(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableIdentityContext : ParserRuleContext {
		public bool IsAssignment;
		public BasicExpressionContext Identifier;
		public VariableDeclarationAssignmentContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public VariableIdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableIdentity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterVariableIdentity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitVariableIdentity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableIdentityContext variableIdentity() {
		VariableIdentityContext _localctx = new VariableIdentityContext(Context, State);
		EnterRule(_localctx, 82, RULE_variableIdentity);
		try {
			State = 856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 852;
				_localctx.Identifier = basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 853;
				_localctx.Declaration = variableDeclarationAssignment();
				_localctx.IsAssignment =  true;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFunctionContext : ParserRuleContext {
		public bool IsOverride;
		public FunctionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OVERRIDE() { return GetToken(SPSLParser.KEYWORD_OVERRIDE, 0); }
		public ShaderFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFunctionContext shaderFunction() {
		ShaderFunctionContext _localctx = new ShaderFunctionContext(Context, State);
		EnterRule(_localctx, 84, RULE_shaderFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 858;
				annotation();
				}
				}
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_OVERRIDE) {
				{
				State = 864;
				Match(KEYWORD_OVERRIDE);
				_localctx.IsOverride =  true;
				}
			}

			State = 868;
			_localctx.Function = function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctionHeadContext Head;
		public FunctionBodyContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 86, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870;
			_localctx.Head = functionHead();
			State = 871;
			Match(TOK_OPEN_BRACE);
			State = 872;
			_localctx.Body = functionBody();
			State = 873;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		public DataTypeContext Type;
		public IToken Name;
		public FunctionSignatureContext Signature;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 88, RULE_functionHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 875;
				_localctx.Type = dataType();
				}
				break;
			}
			State = 878;
			_localctx.Name = Match(IDENTIFIER);
			State = 879;
			_localctx.Signature = functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public ArgListContext Arguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 90, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			Match(TOK_OPEN_PAREN);
			State = 883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 55834574848L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4398046511089L) != 0) || _la==IDENTIFIER) {
				{
				State = 882;
				_localctx.Arguments = argList();
				}
			}

			State = 885;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgDefContext[] argDef() {
			return GetRuleContexts<ArgDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgDefContext argDef(int i) {
			return GetRuleContext<ArgDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 92, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 887;
			argDef();
			State = 892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 888;
				Match(TOK_COMMA);
				State = 889;
				argDef();
				}
				}
				State = 894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefContext : ParserRuleContext {
		public IToken Flow;
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IN() { return GetToken(SPSLParser.KEYWORD_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OUT() { return GetToken(SPSLParser.KEYWORD_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INOUT() { return GetToken(SPSLParser.KEYWORD_INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		public ArgDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArgDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArgDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefContext argDef() {
		ArgDefContext _localctx = new ArgDefContext(Context, State);
		EnterRule(_localctx, 94, RULE_argDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & 4294967309L) != 0)) {
				{
				State = 895;
				_localctx.Flow = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & 4294967309L) != 0)) ) {
					_localctx.Flow = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 898;
			_localctx.Type = dataType();
			State = 899;
			_localctx.Name = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public ReturnStatementContext ReturnStatement;
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext[] stayControlFlowStatement() {
			return GetRuleContexts<StayControlFlowStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement(int i) {
			return GetRuleContext<StayControlFlowStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 96, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545358317132709888L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9221041072203890699L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 1090921705473L) != 0)) {
				{
				{
				State = 901;
				stayControlFlowStatement();
				}
				}
				State = 906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_RETURN) {
				{
				State = 907;
				_localctx.ReturnStatement = returnStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 98, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910;
			Match(TOK_OPEN_BRACE);
			State = 914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4582835383070359552L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9221041072203890699L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 1090921705473L) != 0)) {
				{
				{
				State = 911;
				statement();
				}
				}
				State = 916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 917;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		public ReferencableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterReferencableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitReferencableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferencableExpressionContext referencableExpression() {
		ReferencableExpressionContext _localctx = new ReferencableExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_referencableExpression);
		try {
			State = 925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 919;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 920;
				parenthesizedExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 921;
				invocationExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 922;
				propertyMemberReferenceExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 923;
				methodMemberReferenceExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 924;
				arrayAccessExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		public ChainableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableExpressionContext chainableExpression() {
		ChainableExpressionContext _localctx = new ChainableExpressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_chainableExpression);
		try {
			State = 930;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 927;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 928;
				invocationExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 929;
				arrayAccessExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainedExpressionContext : ParserRuleContext {
		public ReferencableExpressionContext Target;
		[System.Diagnostics.DebuggerNonUserCode] public ReferencableExpressionContext referencableExpression() {
			return GetRuleContext<ReferencableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_DOT() { return GetTokens(SPSLParser.TOK_DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT(int i) {
			return GetToken(SPSLParser.TOK_DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableExpressionContext[] chainableExpression() {
			return GetRuleContexts<ChainableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableExpressionContext chainableExpression(int i) {
			return GetRuleContext<ChainableExpressionContext>(i);
		}
		public ChainedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainedExpressionContext chainedExpression() {
		ChainedExpressionContext _localctx = new ChainedExpressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_chainedExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 932;
			_localctx.Target = referencableExpression();
			State = 935;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 933;
					Match(TOK_DOT);
					State = 934;
					chainableExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 937;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableChainableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		public AssignableChainableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableChainableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableChainableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableChainableExpressionContext assignableChainableExpression() {
		AssignableChainableExpressionContext _localctx = new AssignableChainableExpressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_assignableChainableExpression);
		try {
			State = 941;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 939;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 940;
				arrayAccessExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableChainedExpressionContext : ParserRuleContext {
		public ReferencableExpressionContext Target;
		[System.Diagnostics.DebuggerNonUserCode] public ReferencableExpressionContext referencableExpression() {
			return GetRuleContext<ReferencableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_DOT() { return GetTokens(SPSLParser.TOK_DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT(int i) {
			return GetToken(SPSLParser.TOK_DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainableExpressionContext[] assignableChainableExpression() {
			return GetRuleContexts<AssignableChainableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainableExpressionContext assignableChainableExpression(int i) {
			return GetRuleContext<AssignableChainableExpressionContext>(i);
		}
		public AssignableChainedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableChainedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableChainedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableChainedExpressionContext assignableChainedExpression() {
		AssignableChainedExpressionContext _localctx = new AssignableChainedExpressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_assignableChainedExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 943;
			_localctx.Target = referencableExpression();
			State = 946;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 944;
					Match(TOK_DOT);
					State = 945;
					assignableChainableExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 948;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberReferenceExpressionContext : ParserRuleContext {
		public IToken Target;
		public BasicExpressionContext Member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT() { return GetToken(SPSLParser.TOK_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public PropertyMemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPropertyMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPropertyMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
		PropertyMemberReferenceExpressionContext _localctx = new PropertyMemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_propertyMemberReferenceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950;
			_localctx.Target = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE || _la==IDENTIFIER) ) {
				_localctx.Target = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 951;
			Match(TOK_DOT);
			State = 952;
			_localctx.Member = basicExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodMemberReferenceExpressionContext : ParserRuleContext {
		public IToken Target;
		public InvocationExpressionContext Member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT() { return GetToken(SPSLParser.TOK_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public MethodMemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodMemberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMethodMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMethodMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
		MethodMemberReferenceExpressionContext _localctx = new MethodMemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_methodMemberReferenceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954;
			_localctx.Target = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE || _la==IDENTIFIER) ) {
				_localctx.Target = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 955;
			Match(TOK_DOT);
			State = 956;
			_localctx.Member = invocationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberReferenceExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		public MemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberReferenceExpressionContext memberReferenceExpression() {
		MemberReferenceExpressionContext _localctx = new MemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_memberReferenceExpression);
		try {
			State = 960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 958;
				propertyMemberReferenceExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 959;
				methodMemberReferenceExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationExpressionContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		public ParametersListContext Parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersListContext parametersList() {
			return GetRuleContext<ParametersListContext>(0);
		}
		public InvocationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationExpressionContext invocationExpression() {
		InvocationExpressionContext _localctx = new InvocationExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_invocationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962;
			_localctx.Name = namespacedTypeName();
			State = 963;
			Match(TOK_OPEN_PAREN);
			State = 965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & 1152921504604749827L) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 8936830611238913L) != 0)) {
				{
				State = 964;
				_localctx.Parameters = parametersList();
				}
			}

			State = 967;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermuteStatementContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public IToken Operator;
		public ConstantExpressionContext Value;
		public StatementBlockContext Block;
		public ElseStatementContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTE() { return GetToken(SPSLParser.KEYWORD_PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(SPSLParser.OP_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GEQ_THAN() { return GetToken(SPSLParser.OP_GEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEQ_THAN() { return GetToken(SPSLParser.OP_LEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIFFERENT() { return GetToken(SPSLParser.OP_DIFFERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public PermuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permuteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermuteStatementContext permuteStatement() {
		PermuteStatementContext _localctx = new PermuteStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_permuteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			Match(KEYWORD_PERMUTE);
			State = 970;
			Match(TOK_OPEN_PAREN);
			State = 971;
			_localctx.Identifier = basicExpression();
			State = 972;
			_localctx.Operator = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 63L) != 0)) ) {
				_localctx.Operator = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 973;
			_localctx.Value = constantExpression();
			State = 974;
			Match(TOK_CLOSE_PAREN);
			State = 975;
			_localctx.Block = statementBlock();
			State = 977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 976;
				_localctx.Else = elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		public ElseStatementContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(SPSLParser.KEYWORD_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifStatementContext[] elifStatement() {
			return GetRuleContexts<ElifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifStatementContext elifStatement(int i) {
			return GetRuleContext<ElifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			Match(KEYWORD_IF);
			State = 980;
			Match(TOK_OPEN_PAREN);
			State = 981;
			_localctx.Expression = expressionStatement(0);
			State = 982;
			Match(TOK_CLOSE_PAREN);
			State = 983;
			_localctx.Block = statementBlock();
			State = 987;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 984;
					elifStatement();
					}
					} 
				}
				State = 989;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			}
			State = 991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 990;
				_localctx.Else = elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELIF() { return GetToken(SPSLParser.KEYWORD_ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(SPSLParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(SPSLParser.KEYWORD_IF, 0); }
		public ElifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifStatementContext elifStatement() {
		ElifStatementContext _localctx = new ElifStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_elifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 996;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_ELIF:
				{
				State = 993;
				Match(KEYWORD_ELIF);
				}
				break;
			case KEYWORD_ELSE:
				{
				State = 994;
				Match(KEYWORD_ELSE);
				State = 995;
				Match(KEYWORD_IF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 998;
			Match(TOK_OPEN_PAREN);
			State = 999;
			_localctx.Expression = expressionStatement(0);
			State = 1000;
			Match(TOK_CLOSE_PAREN);
			State = 1001;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(SPSLParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1003;
			Match(KEYWORD_ELSE);
			State = 1004;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SWITCH() { return GetToken(SPSLParser.KEYWORD_SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006;
			Match(KEYWORD_SWITCH);
			State = 1007;
			Match(TOK_OPEN_PAREN);
			State = 1008;
			_localctx.Expression = expressionStatement(0);
			State = 1009;
			Match(TOK_CLOSE_PAREN);
			State = 1010;
			Match(TOK_OPEN_BRACE);
			State = 1014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEYWORD_CASE) {
				{
				{
				State = 1011;
				caseStatement();
				}
				}
				State = 1016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1017;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public ConstantExpressionContext Expression;
		public StayControlFlowStatementContext Statements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CASE() { return GetToken(SPSLParser.KEYWORD_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COLON() { return GetToken(SPSLParser.TOK_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeaveControlFlowStatementContext leaveControlFlowStatement() {
			return GetRuleContext<LeaveControlFlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext[] stayControlFlowStatement() {
			return GetRuleContexts<StayControlFlowStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement(int i) {
			return GetRuleContext<StayControlFlowStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1019;
			Match(KEYWORD_CASE);
			State = 1020;
			_localctx.Expression = constantExpression();
			State = 1021;
			Match(TOK_COLON);
			State = 1023;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 1022;
				Match(TOK_OPEN_BRACE);
				}
				break;
			}
			State = 1028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 545358317132709888L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -9221041072203890699L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 1090921705473L) != 0)) {
				{
				{
				State = 1025;
				_localctx.Statements = stayControlFlowStatement();
				}
				}
				State = 1030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1031;
			leaveControlFlowStatement();
			State = 1033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1032;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(SPSLParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 130, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			Match(KEYWORD_WHILE);
			State = 1036;
			Match(TOK_OPEN_PAREN);
			State = 1037;
			_localctx.Expression = expressionStatement(0);
			State = 1038;
			Match(TOK_CLOSE_PAREN);
			State = 1039;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ExpressionStatementContext Initialization;
		public ExpressionStatementContext Condition;
		public ExpressionStatementContext Iteration;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FOR() { return GetToken(SPSLParser.KEYWORD_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_SEMICOLON() { return GetTokens(SPSLParser.TOK_SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON(int i) {
			return GetToken(SPSLParser.TOK_SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 132, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1041;
			Match(KEYWORD_FOR);
			State = 1042;
			Match(TOK_OPEN_PAREN);
			State = 1043;
			_localctx.Initialization = expressionStatement(0);
			State = 1044;
			Match(TOK_SEMICOLON);
			State = 1045;
			_localctx.Condition = expressionStatement(0);
			State = 1046;
			Match(TOK_SEMICOLON);
			State = 1047;
			_localctx.Iteration = expressionStatement(0);
			State = 1048;
			Match(TOK_CLOSE_PAREN);
			State = 1049;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		public StatementBlockContext Block;
		public ParenthesizedExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DO() { return GetToken(SPSLParser.KEYWORD_DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(SPSLParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051;
			Match(KEYWORD_DO);
			State = 1052;
			_localctx.Block = statementBlock();
			State = 1053;
			Match(KEYWORD_WHILE);
			State = 1054;
			_localctx.Expression = parenthesizedExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_parenthesizedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			Match(TOK_OPEN_PAREN);
			State = 1057;
			_localctx.Expression = expressionStatement(0);
			State = 1058;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceExpressionContext : ParserRuleContext {
		public DataTypeContext Type;
		public ParametersListContext Parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersListContext parametersList() {
			return GetRuleContext<ParametersListContext>(0);
		}
		public NewInstanceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstanceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstanceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceExpressionContext newInstanceExpression() {
		NewInstanceExpressionContext _localctx = new NewInstanceExpressionContext(Context, State);
		EnterRule(_localctx, 138, RULE_newInstanceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060;
			_localctx.Type = dataType();
			State = 1061;
			Match(TOK_OPEN_PAREN);
			State = 1063;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & 1152921504604749827L) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 8936830611238913L) != 0)) {
				{
				State = 1062;
				_localctx.Parameters = parametersList();
				}
			}

			State = 1065;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public ParametersListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParametersList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParametersList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersListContext parametersList() {
		ParametersListContext _localctx = new ParametersListContext(Context, State);
		EnterRule(_localctx, 140, RULE_parametersList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			expressionStatement(0);
			State = 1072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 1068;
				Match(TOK_COMMA);
				State = 1069;
				expressionStatement(0);
				}
				}
				State = 1074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextAccessExpressionContext : ParserRuleContext {
		public IToken Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		public ContextAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterContextAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitContextAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextAccessExpressionContext contextAccessExpression() {
		ContextAccessExpressionContext _localctx = new ContextAccessExpressionContext(Context, State);
		EnterRule(_localctx, 142, RULE_contextAccessExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1075;
			_localctx.Identifier = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE) ) {
				_localctx.Identifier = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicExpressionContext : ParserRuleContext {
		public IToken Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public BasicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBasicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBasicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicExpressionContext basicExpression() {
		BasicExpressionContext _localctx = new BasicExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_basicExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077;
			_localctx.Identifier = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
	 
		public ExpressionStatementContext() { }
		public virtual void CopyFrom(ExpressionStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixUnaryOperationExpressionContext : ExpressionStatementContext {
		public AssignableExpressionContext Expression;
		public IToken Operator;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INCREMENT() { return GetToken(SPSLParser.OP_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DECREMENT() { return GetToken(SPSLParser.OP_DECREMENT, 0); }
		public PostfixUnaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPostfixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPostfixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionStatementContext {
		public AssignableExpressionContext Left;
		public IToken Operator;
		public ExpressionStatementContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS_ASSIGN() { return GetToken(SPSLParser.OP_PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS_ASSIGN() { return GetToken(SPSLParser.OP_MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL_ASSIGN() { return GetToken(SPSLParser.OP_MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGN() { return GetToken(SPSLParser.OP_DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MODULUS_ASSIGN() { return GetToken(SPSLParser.OP_MODULUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_OR_ASSIGN() { return GetToken(SPSLParser.OP_BITWISE_OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_AND_ASSIGN() { return GetToken(SPSLParser.OP_BITWISE_AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EXPONENT_ASSIGN() { return GetToken(SPSLParser.OP_EXPONENT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT_ASSIGN() { return GetToken(SPSLParser.OP_LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT_ASSIGN() { return GetToken(SPSLParser.OP_RSHIFT_ASSIGN, 0); }
		public AssignmentExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Condition;
		public ExpressionStatementContext WhenTrue;
		public ExpressionStatementContext WhenFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_QUESTION() { return GetToken(SPSLParser.TOK_QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COLON() { return GetToken(SPSLParser.TOK_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		public TernaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTernaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTernaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContext : ExpressionStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberReferenceExpressionContext memberReferenceExpression() {
			return GetRuleContext<MemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainedExpressionContext chainedExpression() {
			return GetRuleContext<ChainedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceExpressionContext newInstanceExpression() {
			return GetRuleContext<NewInstanceExpressionContext>(0);
		}
		public ExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Left;
		public IToken Operator;
		public ExpressionStatementContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEQ_THAN() { return GetToken(SPSLParser.OP_LEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GEQ_THAN() { return GetToken(SPSLParser.OP_GEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(SPSLParser.OP_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIFFERENT() { return GetToken(SPSLParser.OP_DIFFERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS() { return GetToken(SPSLParser.OP_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS() { return GetToken(SPSLParser.OP_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(SPSLParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MODULUS() { return GetToken(SPSLParser.OP_MODULUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASTERISK() { return GetToken(SPSLParser.OP_ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PIPE() { return GetToken(SPSLParser.OP_PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AMPERSAND() { return GetToken(SPSLParser.OP_AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EXPONENT() { return GetToken(SPSLParser.OP_EXPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT() { return GetToken(SPSLParser.OP_LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT() { return GetToken(SPSLParser.OP_RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(SPSLParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(SPSLParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(SPSLParser.OP_XOR, 0); }
		public BinaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBinaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBinaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixUnaryOperationExpressionContext : ExpressionStatementContext {
		public IToken Operator;
		public AssignableExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INCREMENT() { return GetToken(SPSLParser.OP_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DECREMENT() { return GetToken(SPSLParser.OP_DECREMENT, 0); }
		public PrefixUnaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrefixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrefixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_EXCLAMATION() { return GetToken(SPSLParser.TOK_EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public NegateOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNegateOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNegateOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionStatementContext {
		public DataTypeContext Type;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public CastExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SignedExpressionContext : ExpressionStatementContext {
		public IToken Operator;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS() { return GetToken(SPSLParser.OP_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS() { return GetToken(SPSLParser.OP_PLUS, 0); }
		public SignedExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSignedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSignedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		return expressionStatement(0);
	}

	private ExpressionStatementContext expressionStatement(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, _parentState);
		ExpressionStatementContext _prevctx = _localctx;
		int _startState = 146;
		EnterRecursionRule(_localctx, 146, RULE_expressionStatement, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1080;
				basicExpression();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1081;
				parenthesizedExpression();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1082;
				primitiveExpression();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1083;
				constantExpression();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1084;
				memberReferenceExpression();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1085;
				chainedExpression();
				}
				break;
			case 7:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1086;
				invocationExpression();
				}
				break;
			case 8:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1087;
				arrayAccessExpression();
				}
				break;
			case 9:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1088;
				newInstanceExpression();
				}
				break;
			case 10:
				{
				_localctx = new NegateOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1089;
				Match(TOK_EXCLAMATION);
				State = 1090;
				((NegateOperationExpressionContext)_localctx).Expression = expressionStatement(36);
				}
				break;
			case 11:
				{
				_localctx = new PostfixUnaryOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1091;
				((PostfixUnaryOperationExpressionContext)_localctx).Expression = assignableExpression();
				State = 1092;
				((PostfixUnaryOperationExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_INCREMENT || _la==OP_DECREMENT) ) {
					((PostfixUnaryOperationExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				{
				_localctx = new PrefixUnaryOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1094;
				((PrefixUnaryOperationExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_INCREMENT || _la==OP_DECREMENT) ) {
					((PrefixUnaryOperationExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1095;
				((PrefixUnaryOperationExpressionContext)_localctx).Expression = assignableExpression();
				}
				break;
			case 13:
				{
				_localctx = new SignedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1096;
				((SignedExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_PLUS || _la==OP_MINUS) ) {
					((SignedExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1097;
				((SignedExpressionContext)_localctx).Expression = expressionStatement(33);
				}
				break;
			case 14:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1098;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1099;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_ASSIGN);
				State = 1100;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(12);
				}
				break;
			case 15:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1102;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1103;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_PLUS_ASSIGN);
				State = 1104;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(11);
				}
				break;
			case 16:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1106;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1107;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MINUS_ASSIGN);
				State = 1108;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(10);
				}
				break;
			case 17:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1110;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1111;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MUL_ASSIGN);
				State = 1112;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(9);
				}
				break;
			case 18:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1114;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1115;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_DIV_ASSIGN);
				State = 1116;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(8);
				}
				break;
			case 19:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1118;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1119;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MODULUS_ASSIGN);
				State = 1120;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(7);
				}
				break;
			case 20:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1122;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1123;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_BITWISE_OR_ASSIGN);
				State = 1124;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(6);
				}
				break;
			case 21:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1126;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1127;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_BITWISE_AND_ASSIGN);
				State = 1128;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(5);
				}
				break;
			case 22:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1130;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1131;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_EXPONENT_ASSIGN);
				State = 1132;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(4);
				}
				break;
			case 23:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1134;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1135;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_LSHIFT_ASSIGN);
				State = 1136;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(3);
				}
				break;
			case 24:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1138;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1139;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_RSHIFT_ASSIGN);
				State = 1140;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(2);
				}
				break;
			case 25:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1142;
				Match(TOK_OPEN_PAREN);
				State = 1143;
				((CastExpressionContext)_localctx).Type = dataType();
				State = 1144;
				Match(TOK_CLOSE_PAREN);
				State = 1145;
				((CastExpressionContext)_localctx).Expression = expressionStatement(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1214;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1212;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
					case 1:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1149;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1150;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LEQ_THAN);
						State = 1151;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(33);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1152;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1153;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_GEQ_THAN);
						State = 1154;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(32);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1155;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1156;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LESSER_THAN);
						State = 1157;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(31);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1158;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1159;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_GREATER_THAN);
						State = 1160;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(30);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1161;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1162;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_EQUAL);
						State = 1163;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(29);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1164;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1165;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_DIFFERENT);
						State = 1166;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(28);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1167;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1168;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_PLUS);
						State = 1169;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(27);
						}
						break;
					case 8:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1170;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1171;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_MINUS);
						State = 1172;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(26);
						}
						break;
					case 9:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1173;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1174;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_DIV);
						State = 1175;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(25);
						}
						break;
					case 10:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1176;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1177;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_MODULUS);
						State = 1178;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(24);
						}
						break;
					case 11:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1179;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1180;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_ASTERISK);
						State = 1181;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(23);
						}
						break;
					case 12:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1182;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1183;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_PIPE);
						State = 1184;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(22);
						}
						break;
					case 13:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1185;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1186;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_AMPERSAND);
						State = 1187;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(21);
						}
						break;
					case 14:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1188;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1189;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_EXPONENT);
						State = 1190;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(19);
						}
						break;
					case 15:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1191;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1192;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LSHIFT);
						State = 1193;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(18);
						}
						break;
					case 16:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1194;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1195;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_RSHIFT);
						State = 1196;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(17);
						}
						break;
					case 17:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1197;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1198;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_AND);
						State = 1199;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(17);
						}
						break;
					case 18:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1200;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1201;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_OR);
						State = 1202;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(16);
						}
						break;
					case 19:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1203;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1204;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_XOR);
						State = 1205;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(15);
						}
						break;
					case 20:
						{
						_localctx = new TernaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((TernaryOperationExpressionContext)_localctx).Condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1206;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1207;
						Match(TOK_QUESTION);
						State = 1208;
						((TernaryOperationExpressionContext)_localctx).WhenTrue = expressionStatement(0);
						State = 1209;
						Match(TOK_COLON);
						State = 1210;
						((TernaryOperationExpressionContext)_localctx).WhenFalse = expressionStatement(13);
						}
						break;
					}
					} 
				}
				State = 1216;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayAccessExpressionContext : ParserRuleContext {
		public ExpressionStatementContext Index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberReferenceExpressionContext memberReferenceExpression() {
			return GetRuleContext<MemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		public ArrayAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessExpressionContext arrayAccessExpression() {
		ArrayAccessExpressionContext _localctx = new ArrayAccessExpressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_arrayAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 1217;
				basicExpression();
				}
				break;
			case 2:
				{
				State = 1218;
				memberReferenceExpression();
				}
				break;
			case 3:
				{
				State = 1219;
				invocationExpression();
				}
				break;
			}
			State = 1222;
			Match(TOK_OPEN_BRACKET);
			State = 1223;
			_localctx.Index = expressionStatement(0);
			State = 1224;
			Match(TOK_CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainedExpressionContext assignableChainedExpression() {
			return GetRuleContext<AssignableChainedExpressionContext>(0);
		}
		public AssignableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableExpressionContext assignableExpression() {
		AssignableExpressionContext _localctx = new AssignableExpressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_assignableExpression);
		try {
			State = 1230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1226;
				arrayAccessExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1227;
				basicExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1228;
				propertyMemberReferenceExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1229;
				assignableChainedExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_RETURN() { return GetToken(SPSLParser.KEYWORD_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232;
			Match(KEYWORD_RETURN);
			State = 1233;
			_localctx.Expression = expressionStatement(0);
			State = 1234;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BREAK() { return GetToken(SPSLParser.KEYWORD_BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236;
			Match(KEYWORD_BREAK);
			State = 1237;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONTINUE() { return GetToken(SPSLParser.KEYWORD_CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239;
			Match(KEYWORD_CONTINUE);
			State = 1240;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DISCARD() { return GetToken(SPSLParser.KEYWORD_DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public DiscardStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDiscardStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDiscardStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiscardStatementContext discardStatement() {
		DiscardStatementContext _localctx = new DiscardStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_discardStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1242;
			Match(KEYWORD_DISCARD);
			State = 1243;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveControlFlowStatementContext : ParserRuleContext {
		public BreakStatementContext BreakStatement;
		public ReturnStatementContext ReturnStatement;
		public ContinueStatementContext ContinueStatement;
		public DiscardStatementContext DiscardStatement;
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardStatementContext discardStatement() {
			return GetRuleContext<DiscardStatementContext>(0);
		}
		public LeaveControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveControlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterLeaveControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitLeaveControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveControlFlowStatementContext leaveControlFlowStatement() {
		LeaveControlFlowStatementContext _localctx = new LeaveControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_leaveControlFlowStatement);
		try {
			State = 1249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1245;
				_localctx.BreakStatement = breakStatement();
				}
				break;
			case KEYWORD_RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1246;
				_localctx.ReturnStatement = returnStatement();
				}
				break;
			case KEYWORD_CONTINUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1247;
				_localctx.ContinueStatement = continueStatement();
				}
				break;
			case KEYWORD_DISCARD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1248;
				_localctx.DiscardStatement = discardStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StayControlFlowStatementContext : ParserRuleContext {
		public VariableDeclarationContext VariableDeclaration;
		public ExpressionStatementContext ExpressionStatement;
		public StatementBlockContext StatementBlock;
		public IfStatementContext IfStatement;
		public SwitchStatementContext SwitchStatement;
		public WhileStatementContext WhileStatement;
		public ForStatementContext ForStatement;
		public DoWhileStatementContext DoWhileStatement;
		public PermuteStatementContext PermuteStatement;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermuteStatementContext permuteStatement() {
			return GetRuleContext<PermuteStatementContext>(0);
		}
		public StayControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stayControlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStayControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStayControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStayControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StayControlFlowStatementContext stayControlFlowStatement() {
		StayControlFlowStatementContext _localctx = new StayControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 162, RULE_stayControlFlowStatement);
		try {
			State = 1264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1251;
				_localctx.VariableDeclaration = variableDeclaration();
				State = 1252;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1254;
				_localctx.ExpressionStatement = expressionStatement(0);
				State = 1255;
				Match(TOK_SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1257;
				_localctx.StatementBlock = statementBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1258;
				_localctx.IfStatement = ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1259;
				_localctx.SwitchStatement = switchStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1260;
				_localctx.WhileStatement = whileStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1261;
				_localctx.ForStatement = forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1262;
				_localctx.DoWhileStatement = doWhileStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1263;
				_localctx.PermuteStatement = permuteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StayControlFlowStatementContext StayControlFlowStatement;
		public LeaveControlFlowStatementContext LeaveControlFlowStatement;
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement() {
			return GetRuleContext<StayControlFlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveControlFlowStatementContext leaveControlFlowStatement() {
			return GetRuleContext<LeaveControlFlowStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_statement);
		try {
			State = 1268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_VAR:
			case KEYWORD_THIS:
			case KEYWORD_BASE:
			case KEYWORD_IF:
			case KEYWORD_SWITCH:
			case KEYWORD_FOR:
			case KEYWORD_DO:
			case KEYWORD_WHILE:
			case KEYWORD_CONST:
			case KEYWORD_PERMUTE:
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
			case TOK_OPEN_PAREN:
			case TOK_OPEN_BRACE:
			case TOK_EXCLAMATION:
			case OP_PLUS:
			case OP_MINUS:
			case OP_INCREMENT:
			case OP_DECREMENT:
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1266;
				_localctx.StayControlFlowStatement = stayControlFlowStatement();
				}
				break;
			case KEYWORD_RETURN:
			case KEYWORD_BREAK:
			case KEYWORD_CONTINUE:
			case KEYWORD_DISCARD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1267;
				_localctx.LeaveControlFlowStatement = leaveControlFlowStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		public IToken Literal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(SPSLParser.BoolLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleLiteral() { return GetToken(SPSLParser.DoubleLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatLiteral() { return GetToken(SPSLParser.FloatLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnsignedIntegerLiteral() { return GetToken(SPSLParser.UnsignedIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SPSLParser.StringLiteral, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_primitiveExpression);
		try {
			State = 1276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1270;
				_localctx.Literal = Match(BoolLiteral);
				}
				break;
			case DoubleLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1271;
				_localctx.Literal = Match(DoubleLiteral);
				}
				break;
			case FloatLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1272;
				_localctx.Literal = Match(FloatLiteral);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1273;
				_localctx.Literal = Match(IntegerLiteral);
				}
				break;
			case UnsignedIntegerLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1274;
				_localctx.Literal = Match(UnsignedIntegerLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1275;
				_localctx.Literal = Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
	 
		public ConstantExpressionContext() { }
		public virtual void CopyFrom(ConstantExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UserDefinedConstantExpressionContext : ConstantExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UserDefinedConstantExpressionContext(ConstantExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUserDefinedConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUserDefinedConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveConstantExpressionContext : ConstantExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public PrimitiveConstantExpressionContext(ConstantExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 168, RULE_constantExpression);
		try {
			State = 1280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
				_localctx = new PrimitiveConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1278;
				primitiveExpression();
				}
				break;
			case IDENTIFIER:
				_localctx = new UserDefinedConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1279;
				namespacedTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public bool IsArray;
		public DataTypeKind DataType;
		public IToken ArraySize;
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveDataTypeContext primitiveDataType() {
			return GetRuleContext<PrimitiveDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinDataTypeContext builtinDataType() {
			return GetRuleContext<BuiltinDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedDataTypeContext userDefinedDataType() {
			return GetRuleContext<UserDefinedDataTypeContext>(0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 170, RULE_dataType);
		int _la;
		try {
			State = 1315;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1282;
				primitiveDataType();
				State = 1289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1283;
					Match(TOK_OPEN_BRACKET);
					State = 1285;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1284;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1287;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.Primitive;
				}
				break;
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1293;
				builtinDataType();
				State = 1300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1294;
					Match(TOK_OPEN_BRACKET);
					State = 1296;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1295;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1298;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.BuiltIn;
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1304;
				userDefinedDataType();
				State = 1311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1305;
					Match(TOK_OPEN_BRACKET);
					State = 1307;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1306;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1309;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.UserDefined;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserDefinedDataTypeContext : ParserRuleContext {
		public NamespacedTypeNameContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UserDefinedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUserDefinedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUserDefinedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedDataTypeContext userDefinedDataType() {
		UserDefinedDataTypeContext _localctx = new UserDefinedDataTypeContext(Context, State);
		EnterRule(_localctx, 172, RULE_userDefinedDataType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1317;
			_localctx.Type = namespacedTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveDataTypeContext : ParserRuleContext {
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VOID() { return GetToken(SPSLParser.TYPE_VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(SPSLParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(SPSLParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT() { return GetToken(SPSLParser.TYPE_UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(SPSLParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_DOUBLE() { return GetToken(SPSLParser.TYPE_DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(SPSLParser.TYPE_STRING, 0); }
		public PrimitiveDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveDataTypeContext primitiveDataType() {
		PrimitiveDataTypeContext _localctx = new PrimitiveDataTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_primitiveDataType);
		try {
			State = 1326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1319;
				_localctx.Type = Match(TYPE_VOID);
				}
				break;
			case TYPE_BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1320;
				_localctx.Type = Match(TYPE_BOOL);
				}
				break;
			case TYPE_INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1321;
				_localctx.Type = Match(TYPE_INT);
				}
				break;
			case TYPE_UINT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1322;
				_localctx.Type = Match(TYPE_UINT);
				}
				break;
			case TYPE_FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1323;
				_localctx.Type = Match(TYPE_FLOAT);
				}
				break;
			case TYPE_DOUBLE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1324;
				_localctx.Type = Match(TYPE_DOUBLE);
				}
				break;
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1325;
				_localctx.Type = Match(TYPE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinDataTypeContext : ParserRuleContext {
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2B() { return GetToken(SPSLParser.TYPE_VECTOR2B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2F() { return GetToken(SPSLParser.TYPE_VECTOR2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2I() { return GetToken(SPSLParser.TYPE_VECTOR2I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2UI() { return GetToken(SPSLParser.TYPE_VECTOR2UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3B() { return GetToken(SPSLParser.TYPE_VECTOR3B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3F() { return GetToken(SPSLParser.TYPE_VECTOR3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3I() { return GetToken(SPSLParser.TYPE_VECTOR3I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3UI() { return GetToken(SPSLParser.TYPE_VECTOR3UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4B() { return GetToken(SPSLParser.TYPE_VECTOR4B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4F() { return GetToken(SPSLParser.TYPE_VECTOR4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4I() { return GetToken(SPSLParser.TYPE_VECTOR4I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4UI() { return GetToken(SPSLParser.TYPE_VECTOR4UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2F() { return GetToken(SPSLParser.TYPE_MATRIX2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3F() { return GetToken(SPSLParser.TYPE_MATRIX3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4F() { return GetToken(SPSLParser.TYPE_MATRIX4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X3F() { return GetToken(SPSLParser.TYPE_MATRIX2X3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X4F() { return GetToken(SPSLParser.TYPE_MATRIX2X4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X2F() { return GetToken(SPSLParser.TYPE_MATRIX3X2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X4F() { return GetToken(SPSLParser.TYPE_MATRIX3X4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X2F() { return GetToken(SPSLParser.TYPE_MATRIX4X2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X3F() { return GetToken(SPSLParser.TYPE_MATRIX4X3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COLOR3() { return GetToken(SPSLParser.TYPE_COLOR3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COLOR4() { return GetToken(SPSLParser.TYPE_COLOR4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SAMPLER() { return GetToken(SPSLParser.TYPE_SAMPLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE1D() { return GetToken(SPSLParser.TYPE_TEXTURE1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE1DARRAY() { return GetToken(SPSLParser.TYPE_TEXTURE1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE2D() { return GetToken(SPSLParser.TYPE_TEXTURE2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE2DARRAY() { return GetToken(SPSLParser.TYPE_TEXTURE2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE3D() { return GetToken(SPSLParser.TYPE_TEXTURE3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CUBEMAP() { return GetToken(SPSLParser.TYPE_CUBEMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CUBEMAPARRAY() { return GetToken(SPSLParser.TYPE_CUBEMAPARRAY, 0); }
		public BuiltinDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBuiltinDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBuiltinDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinDataTypeContext builtinDataType() {
		BuiltinDataTypeContext _localctx = new BuiltinDataTypeContext(Context, State);
		EnterRule(_localctx, 176, RULE_builtinDataType);
		try {
			State = 1359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VECTOR2B:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1328;
				_localctx.Type = Match(TYPE_VECTOR2B);
				}
				break;
			case TYPE_VECTOR2F:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1329;
				_localctx.Type = Match(TYPE_VECTOR2F);
				}
				break;
			case TYPE_VECTOR2I:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1330;
				_localctx.Type = Match(TYPE_VECTOR2I);
				}
				break;
			case TYPE_VECTOR2UI:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1331;
				_localctx.Type = Match(TYPE_VECTOR2UI);
				}
				break;
			case TYPE_VECTOR3B:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1332;
				_localctx.Type = Match(TYPE_VECTOR3B);
				}
				break;
			case TYPE_VECTOR3F:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1333;
				_localctx.Type = Match(TYPE_VECTOR3F);
				}
				break;
			case TYPE_VECTOR3I:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1334;
				_localctx.Type = Match(TYPE_VECTOR3I);
				}
				break;
			case TYPE_VECTOR3UI:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1335;
				_localctx.Type = Match(TYPE_VECTOR3UI);
				}
				break;
			case TYPE_VECTOR4B:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1336;
				_localctx.Type = Match(TYPE_VECTOR4B);
				}
				break;
			case TYPE_VECTOR4F:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1337;
				_localctx.Type = Match(TYPE_VECTOR4F);
				}
				break;
			case TYPE_VECTOR4I:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1338;
				_localctx.Type = Match(TYPE_VECTOR4I);
				}
				break;
			case TYPE_VECTOR4UI:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1339;
				_localctx.Type = Match(TYPE_VECTOR4UI);
				}
				break;
			case TYPE_MATRIX2F:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1340;
				_localctx.Type = Match(TYPE_MATRIX2F);
				}
				break;
			case TYPE_MATRIX3F:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1341;
				_localctx.Type = Match(TYPE_MATRIX3F);
				}
				break;
			case TYPE_MATRIX4F:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1342;
				_localctx.Type = Match(TYPE_MATRIX4F);
				}
				break;
			case TYPE_MATRIX2X3F:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1343;
				_localctx.Type = Match(TYPE_MATRIX2X3F);
				}
				break;
			case TYPE_MATRIX2X4F:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1344;
				_localctx.Type = Match(TYPE_MATRIX2X4F);
				}
				break;
			case TYPE_MATRIX3X2F:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1345;
				_localctx.Type = Match(TYPE_MATRIX3X2F);
				}
				break;
			case TYPE_MATRIX3X4F:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1346;
				_localctx.Type = Match(TYPE_MATRIX3X4F);
				}
				break;
			case TYPE_MATRIX4X2F:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1347;
				_localctx.Type = Match(TYPE_MATRIX4X2F);
				}
				break;
			case TYPE_MATRIX4X3F:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1348;
				_localctx.Type = Match(TYPE_MATRIX4X3F);
				}
				break;
			case TYPE_COLOR3:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1349;
				_localctx.Type = Match(TYPE_COLOR3);
				}
				break;
			case TYPE_COLOR4:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1350;
				_localctx.Type = Match(TYPE_COLOR4);
				}
				break;
			case TYPE_SAMPLER:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1351;
				_localctx.Type = Match(TYPE_SAMPLER);
				}
				break;
			case TYPE_TEXTURE1D:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1352;
				_localctx.Type = Match(TYPE_TEXTURE1D);
				}
				break;
			case TYPE_TEXTURE1DARRAY:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1353;
				_localctx.Type = Match(TYPE_TEXTURE1DARRAY);
				}
				break;
			case TYPE_TEXTURE2D:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1354;
				_localctx.Type = Match(TYPE_TEXTURE2D);
				}
				break;
			case TYPE_TEXTURE2DARRAY:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1355;
				_localctx.Type = Match(TYPE_TEXTURE2DARRAY);
				}
				break;
			case TYPE_TEXTURE3D:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1356;
				_localctx.Type = Match(TYPE_TEXTURE3D);
				}
				break;
			case TYPE_CUBEMAP:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1357;
				_localctx.Type = Match(TYPE_CUBEMAP);
				}
				break;
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1358;
				_localctx.Type = Match(TYPE_CUBEMAPARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 73: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 32);
		case 1: return Precpred(Context, 31);
		case 2: return Precpred(Context, 30);
		case 3: return Precpred(Context, 29);
		case 4: return Precpred(Context, 28);
		case 5: return Precpred(Context, 27);
		case 6: return Precpred(Context, 26);
		case 7: return Precpred(Context, 25);
		case 8: return Precpred(Context, 24);
		case 9: return Precpred(Context, 23);
		case 10: return Precpred(Context, 22);
		case 11: return Precpred(Context, 21);
		case 12: return Precpred(Context, 20);
		case 13: return Precpred(Context, 19);
		case 14: return Precpred(Context, 18);
		case 15: return Precpred(Context, 17);
		case 16: return Precpred(Context, 16);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 14);
		case 19: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,167,1362,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,1,0,5,0,180,8,0,10,0,12,0,183,
		9,0,1,0,5,0,186,8,0,10,0,12,0,189,9,0,1,0,3,0,192,8,0,1,0,5,0,195,8,0,
		10,0,12,0,198,9,0,1,0,5,0,201,8,0,10,0,12,0,204,9,0,1,0,5,0,207,8,0,10,
		0,12,0,210,9,0,1,0,1,0,1,1,5,1,215,8,1,10,1,12,1,218,9,1,1,1,5,1,221,8,
		1,10,1,12,1,224,9,1,1,1,3,1,227,8,1,1,1,5,1,230,8,1,10,1,12,1,233,9,1,
		1,1,5,1,236,8,1,10,1,12,1,239,9,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,
		1,3,5,3,251,8,3,10,3,12,3,254,9,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,262,8,4,
		1,5,1,5,3,5,266,8,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,287,8,7,10,7,12,7,290,9,7,1,7,1,7,1,7,1,
		7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,3,9,307,8,9,1,10,5,10,310,
		8,10,10,10,12,10,313,9,10,1,10,1,10,1,10,5,10,318,8,10,10,10,12,10,321,
		9,10,1,10,5,10,324,8,10,10,10,12,10,327,9,10,1,10,1,10,1,10,5,10,332,8,
		10,10,10,12,10,335,9,10,1,10,1,10,1,10,5,10,340,8,10,10,10,12,10,343,9,
		10,1,10,5,10,346,8,10,10,10,12,10,349,9,10,1,10,1,10,3,10,353,8,10,1,11,
		1,11,1,11,1,11,1,11,1,11,3,11,361,8,11,1,12,1,12,1,12,1,12,1,12,1,13,5,
		13,369,8,13,10,13,12,13,372,9,13,1,13,1,13,1,13,5,13,377,8,13,10,13,12,
		13,380,9,13,1,13,1,13,1,13,5,13,385,8,13,10,13,12,13,388,9,13,1,13,1,13,
		1,14,1,14,1,14,1,14,3,14,396,8,14,1,15,1,15,1,15,5,15,401,8,15,10,15,12,
		15,404,9,15,1,16,5,16,407,8,16,10,16,12,16,410,9,16,1,16,1,16,1,16,5,16,
		415,8,16,10,16,12,16,418,9,16,1,16,5,16,421,8,16,10,16,12,16,424,9,16,
		1,16,5,16,427,8,16,10,16,12,16,430,9,16,1,16,1,16,1,16,1,16,3,16,436,8,
		16,5,16,438,8,16,10,16,12,16,441,9,16,1,16,1,16,1,17,1,17,1,17,1,17,3,
		17,449,8,17,1,17,1,17,3,17,453,8,17,1,18,5,18,456,8,18,10,18,12,18,459,
		9,18,1,18,1,18,1,18,5,18,464,8,18,10,18,12,18,467,9,18,1,18,5,18,470,8,
		18,10,18,12,18,473,9,18,1,18,5,18,476,8,18,10,18,12,18,479,9,18,1,18,5,
		18,482,8,18,10,18,12,18,485,9,18,1,18,5,18,488,8,18,10,18,12,18,491,9,
		18,1,18,5,18,494,8,18,10,18,12,18,497,9,18,1,18,1,18,1,19,5,19,502,8,19,
		10,19,12,19,505,9,19,1,19,1,19,1,19,5,19,510,8,19,10,19,12,19,513,9,19,
		1,19,5,19,516,8,19,10,19,12,19,519,9,19,1,19,5,19,522,8,19,10,19,12,19,
		525,9,19,1,19,5,19,528,8,19,10,19,12,19,531,9,19,1,19,5,19,534,8,19,10,
		19,12,19,537,9,19,1,19,5,19,540,8,19,10,19,12,19,543,9,19,1,19,1,19,1,
		20,5,20,548,8,20,10,20,12,20,551,9,20,1,20,1,20,1,20,5,20,556,8,20,10,
		20,12,20,559,9,20,1,20,5,20,562,8,20,10,20,12,20,565,9,20,1,20,1,20,1,
		21,1,21,3,21,571,8,21,1,21,1,21,1,21,1,21,3,21,577,8,21,1,21,1,21,3,21,
		581,8,21,1,22,1,22,3,22,585,8,22,1,22,3,22,588,8,22,1,22,1,22,1,22,1,22,
		3,22,594,8,22,1,22,1,22,3,22,598,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,3,22,612,8,22,1,22,1,22,3,22,616,8,22,1,22,
		1,22,1,22,1,22,1,22,3,22,623,8,22,1,22,1,22,3,22,627,8,22,3,22,629,8,22,
		1,23,1,23,1,23,1,23,1,24,5,24,636,8,24,10,24,12,24,639,9,24,1,24,1,24,
		1,24,1,25,1,25,1,25,3,25,647,8,25,1,26,1,26,1,26,1,26,3,26,653,8,26,1,
		27,1,27,1,27,1,27,1,27,1,27,5,27,661,8,27,10,27,12,27,664,9,27,3,27,666,
		8,27,1,27,3,27,669,8,27,1,28,1,28,3,28,673,8,28,1,29,1,29,1,29,1,29,1,
		30,1,30,1,30,1,30,1,31,5,31,684,8,31,10,31,12,31,687,9,31,1,31,1,31,3,
		31,691,8,31,1,31,1,31,1,31,1,31,5,31,697,8,31,10,31,12,31,700,9,31,1,31,
		1,31,1,32,1,32,1,32,1,32,5,32,708,8,32,10,32,12,32,711,9,32,1,32,1,32,
		1,32,1,32,1,32,1,32,3,32,719,8,32,1,33,5,33,722,8,33,10,33,12,33,725,9,
		33,1,33,1,33,1,33,1,33,1,33,5,33,732,8,33,10,33,12,33,735,9,33,1,33,1,
		33,1,34,5,34,740,8,34,10,34,12,34,743,9,34,1,34,3,34,746,8,34,1,34,3,34,
		749,8,34,1,34,1,34,1,34,1,34,5,34,755,8,34,10,34,12,34,758,9,34,1,34,1,
		34,5,34,762,8,34,10,34,12,34,765,9,34,1,34,3,34,768,8,34,1,34,3,34,771,
		8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,780,8,34,1,35,5,35,783,8,
		35,10,35,12,35,786,9,35,1,35,1,35,1,35,1,35,1,36,5,36,793,8,36,10,36,12,
		36,796,9,36,1,36,1,36,1,36,1,36,3,36,802,8,36,1,36,1,36,1,37,5,37,807,
		8,37,10,37,12,37,810,9,37,1,37,1,37,1,37,1,37,1,37,5,37,817,8,37,10,37,
		12,37,820,9,37,1,37,3,37,823,8,37,1,38,1,38,1,38,3,38,828,8,38,1,38,1,
		38,1,39,1,39,3,39,834,8,39,1,39,1,39,1,39,1,39,5,39,840,8,39,10,39,12,
		39,843,9,39,1,39,1,39,3,39,847,8,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,
		1,41,3,41,857,8,41,1,42,5,42,860,8,42,10,42,12,42,863,9,42,1,42,1,42,3,
		42,867,8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,3,44,877,8,44,1,44,
		1,44,1,44,1,45,1,45,3,45,884,8,45,1,45,1,45,1,46,1,46,1,46,5,46,891,8,
		46,10,46,12,46,894,9,46,1,47,3,47,897,8,47,1,47,1,47,1,47,1,48,5,48,903,
		8,48,10,48,12,48,906,9,48,1,48,3,48,909,8,48,1,49,1,49,5,49,913,8,49,10,
		49,12,49,916,9,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,926,8,50,
		1,51,1,51,1,51,3,51,931,8,51,1,52,1,52,1,52,4,52,936,8,52,11,52,12,52,
		937,1,53,1,53,3,53,942,8,53,1,54,1,54,1,54,4,54,947,8,54,11,54,12,54,948,
		1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,3,57,961,8,57,1,58,1,
		58,1,58,3,58,966,8,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
		3,59,978,8,59,1,60,1,60,1,60,1,60,1,60,1,60,5,60,986,8,60,10,60,12,60,
		989,9,60,1,60,3,60,992,8,60,1,61,1,61,1,61,3,61,997,8,61,1,61,1,61,1,61,
		1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,5,63,1013,8,63,
		10,63,12,63,1016,9,63,1,63,1,63,1,64,1,64,1,64,1,64,3,64,1024,8,64,1,64,
		5,64,1027,8,64,10,64,12,64,1030,9,64,1,64,1,64,3,64,1034,8,64,1,65,1,65,
		1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
		1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,3,69,1064,
		8,69,1,69,1,69,1,70,1,70,1,70,5,70,1071,8,70,10,70,12,70,1074,9,70,1,71,
		1,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,3,73,1148,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,1213,8,73,
		10,73,12,73,1216,9,73,1,74,1,74,1,74,3,74,1221,8,74,1,74,1,74,1,74,1,74,
		1,75,1,75,1,75,1,75,3,75,1231,8,75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,
		1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,80,3,80,1250,8,80,1,81,
		1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1265,
		8,81,1,82,1,82,3,82,1269,8,82,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1277,
		8,83,1,84,1,84,3,84,1281,8,84,1,85,1,85,1,85,3,85,1286,8,85,1,85,1,85,
		3,85,1290,8,85,1,85,1,85,1,85,1,85,1,85,3,85,1297,8,85,1,85,1,85,3,85,
		1301,8,85,1,85,1,85,1,85,1,85,1,85,3,85,1308,8,85,1,85,1,85,3,85,1312,
		8,85,1,85,1,85,3,85,1316,8,85,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,
		1,87,3,87,1327,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
		1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
		1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1360,8,88,1,88,0,1,146,89,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,0,12,2,0,17,17,19,22,1,0,40,42,1,0,2,4,1,0,6,8,1,0,11,14,1,0,11,
		13,3,0,32,32,34,35,64,64,2,0,47,48,167,167,1,0,134,139,1,0,47,48,1,0,140,
		141,1,0,127,128,1524,0,181,1,0,0,0,2,216,1,0,0,0,4,243,1,0,0,0,6,247,1,
		0,0,0,8,261,1,0,0,0,10,265,1,0,0,0,12,272,1,0,0,0,14,279,1,0,0,0,16,296,
		1,0,0,0,18,306,1,0,0,0,20,352,1,0,0,0,22,354,1,0,0,0,24,362,1,0,0,0,26,
		370,1,0,0,0,28,391,1,0,0,0,30,397,1,0,0,0,32,408,1,0,0,0,34,444,1,0,0,
		0,36,457,1,0,0,0,38,503,1,0,0,0,40,549,1,0,0,0,42,570,1,0,0,0,44,628,1,
		0,0,0,46,630,1,0,0,0,48,637,1,0,0,0,50,646,1,0,0,0,52,652,1,0,0,0,54,654,
		1,0,0,0,56,672,1,0,0,0,58,674,1,0,0,0,60,678,1,0,0,0,62,685,1,0,0,0,64,
		718,1,0,0,0,66,723,1,0,0,0,68,779,1,0,0,0,70,784,1,0,0,0,72,794,1,0,0,
		0,74,822,1,0,0,0,76,824,1,0,0,0,78,846,1,0,0,0,80,848,1,0,0,0,82,856,1,
		0,0,0,84,861,1,0,0,0,86,870,1,0,0,0,88,876,1,0,0,0,90,881,1,0,0,0,92,887,
		1,0,0,0,94,896,1,0,0,0,96,904,1,0,0,0,98,910,1,0,0,0,100,925,1,0,0,0,102,
		930,1,0,0,0,104,932,1,0,0,0,106,941,1,0,0,0,108,943,1,0,0,0,110,950,1,
		0,0,0,112,954,1,0,0,0,114,960,1,0,0,0,116,962,1,0,0,0,118,969,1,0,0,0,
		120,979,1,0,0,0,122,996,1,0,0,0,124,1003,1,0,0,0,126,1006,1,0,0,0,128,
		1019,1,0,0,0,130,1035,1,0,0,0,132,1041,1,0,0,0,134,1051,1,0,0,0,136,1056,
		1,0,0,0,138,1060,1,0,0,0,140,1067,1,0,0,0,142,1075,1,0,0,0,144,1077,1,
		0,0,0,146,1147,1,0,0,0,148,1220,1,0,0,0,150,1230,1,0,0,0,152,1232,1,0,
		0,0,154,1236,1,0,0,0,156,1239,1,0,0,0,158,1242,1,0,0,0,160,1249,1,0,0,
		0,162,1264,1,0,0,0,164,1268,1,0,0,0,166,1276,1,0,0,0,168,1280,1,0,0,0,
		170,1315,1,0,0,0,172,1317,1,0,0,0,174,1326,1,0,0,0,176,1359,1,0,0,0,178,
		180,3,56,28,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,
		1,0,0,0,182,187,1,0,0,0,183,181,1,0,0,0,184,186,5,158,0,0,185,184,1,0,
		0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,191,1,0,0,0,189,
		187,1,0,0,0,190,192,3,4,2,0,191,190,1,0,0,0,191,192,1,0,0,0,192,202,1,
		0,0,0,193,195,5,158,0,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,
		0,196,197,1,0,0,0,197,199,1,0,0,0,198,196,1,0,0,0,199,201,3,46,23,0,200,
		196,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,208,1,
		0,0,0,204,202,1,0,0,0,205,207,3,8,4,0,206,205,1,0,0,0,207,210,1,0,0,0,
		208,206,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,212,
		5,0,0,1,212,1,1,0,0,0,213,215,3,56,28,0,214,213,1,0,0,0,215,218,1,0,0,
		0,216,214,1,0,0,0,216,217,1,0,0,0,217,222,1,0,0,0,218,216,1,0,0,0,219,
		221,5,158,0,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,
		1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,225,227,3,4,2,0,226,225,1,0,0,
		0,226,227,1,0,0,0,227,237,1,0,0,0,228,230,5,158,0,0,229,228,1,0,0,0,230,
		233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,
		0,0,0,234,236,3,46,23,0,235,231,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,
		0,237,238,1,0,0,0,238,240,1,0,0,0,239,237,1,0,0,0,240,241,3,38,19,0,241,
		242,5,0,0,1,242,3,1,0,0,0,243,244,5,15,0,0,244,245,3,6,3,0,245,246,5,118,
		0,0,246,5,1,0,0,0,247,252,5,167,0,0,248,249,5,124,0,0,249,251,5,167,0,
		0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,
		7,1,0,0,0,254,252,1,0,0,0,255,262,3,10,5,0,256,262,3,18,9,0,257,262,3,
		20,10,0,258,262,3,26,13,0,259,262,3,32,16,0,260,262,3,36,18,0,261,255,
		1,0,0,0,261,256,1,0,0,0,261,257,1,0,0,0,261,258,1,0,0,0,261,259,1,0,0,
		0,261,260,1,0,0,0,262,9,1,0,0,0,263,264,5,63,0,0,264,266,6,5,-1,0,265,
		263,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,64,0,0,268,269,3,
		170,85,0,269,270,3,80,40,0,270,271,5,118,0,0,271,11,1,0,0,0,272,273,5,
		65,0,0,273,274,5,69,0,0,274,275,3,144,72,0,275,276,5,133,0,0,276,277,5,
		161,0,0,277,278,5,118,0,0,278,13,1,0,0,0,279,280,5,65,0,0,280,281,5,50,
		0,0,281,282,3,144,72,0,282,283,5,110,0,0,283,288,5,167,0,0,284,285,5,119,
		0,0,285,287,5,167,0,0,286,284,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,
		288,289,1,0,0,0,289,291,1,0,0,0,290,288,1,0,0,0,291,292,5,111,0,0,292,
		293,5,133,0,0,293,294,3,144,72,0,294,295,5,118,0,0,295,15,1,0,0,0,296,
		297,5,65,0,0,297,298,5,70,0,0,298,299,3,144,72,0,299,300,5,133,0,0,300,
		301,5,164,0,0,301,302,5,118,0,0,302,17,1,0,0,0,303,307,3,12,6,0,304,307,
		3,14,7,0,305,307,3,16,8,0,306,303,1,0,0,0,306,304,1,0,0,0,306,305,1,0,
		0,0,307,19,1,0,0,0,308,310,5,158,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,
		309,1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,3,
		22,11,0,315,325,5,110,0,0,316,318,5,158,0,0,317,316,1,0,0,0,318,321,1,
		0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,
		322,324,3,74,37,0,323,319,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,
		326,1,0,0,0,326,328,1,0,0,0,327,325,1,0,0,0,328,329,5,111,0,0,329,353,
		1,0,0,0,330,332,5,158,0,0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,
		0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,333,1,0,0,0,336,337,3,24,12,0,
		337,347,5,110,0,0,338,340,5,158,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,
		339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,346,3,
		76,38,0,345,341,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,
		0,348,350,1,0,0,0,349,347,1,0,0,0,350,351,5,111,0,0,351,353,1,0,0,0,352,
		311,1,0,0,0,352,333,1,0,0,0,353,21,1,0,0,0,354,355,5,30,0,0,355,356,5,
		167,0,0,356,357,5,31,0,0,357,360,5,49,0,0,358,359,5,36,0,0,359,361,3,6,
		3,0,360,358,1,0,0,0,360,361,1,0,0,0,361,23,1,0,0,0,362,363,5,30,0,0,363,
		364,5,167,0,0,364,365,5,31,0,0,365,366,5,50,0,0,366,25,1,0,0,0,367,369,
		5,158,0,0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,
		0,0,371,373,1,0,0,0,372,370,1,0,0,0,373,374,3,28,14,0,374,386,5,110,0,
		0,375,377,5,158,0,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,
		379,1,0,0,0,379,381,1,0,0,0,380,378,1,0,0,0,381,382,3,88,44,0,382,383,
		5,118,0,0,383,385,1,0,0,0,384,378,1,0,0,0,385,388,1,0,0,0,386,384,1,0,
		0,0,386,387,1,0,0,0,387,389,1,0,0,0,388,386,1,0,0,0,389,390,5,111,0,0,
		390,27,1,0,0,0,391,392,5,26,0,0,392,395,5,167,0,0,393,394,5,36,0,0,394,
		396,3,30,15,0,395,393,1,0,0,0,395,396,1,0,0,0,396,29,1,0,0,0,397,402,3,
		6,3,0,398,399,5,119,0,0,399,401,3,6,3,0,400,398,1,0,0,0,401,404,1,0,0,
		0,402,400,1,0,0,0,402,403,1,0,0,0,403,31,1,0,0,0,404,402,1,0,0,0,405,407,
		5,158,0,0,406,405,1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,0,408,409,1,0,
		0,0,409,411,1,0,0,0,410,408,1,0,0,0,411,412,3,34,17,0,412,422,5,110,0,
		0,413,415,5,158,0,0,414,413,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,
		417,1,0,0,0,417,419,1,0,0,0,418,416,1,0,0,0,419,421,3,46,23,0,420,416,
		1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,439,1,0,0,
		0,424,422,1,0,0,0,425,427,5,158,0,0,426,425,1,0,0,0,427,430,1,0,0,0,428,
		426,1,0,0,0,428,429,1,0,0,0,429,435,1,0,0,0,430,428,1,0,0,0,431,436,3,
		50,25,0,432,436,3,18,9,0,433,436,3,10,5,0,434,436,3,84,42,0,435,431,1,
		0,0,0,435,432,1,0,0,0,435,433,1,0,0,0,435,434,1,0,0,0,436,438,1,0,0,0,
		437,428,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,
		1,0,0,0,441,439,1,0,0,0,442,443,5,111,0,0,443,33,1,0,0,0,444,445,5,18,
		0,0,445,448,5,167,0,0,446,447,5,36,0,0,447,449,3,6,3,0,448,446,1,0,0,0,
		448,449,1,0,0,0,449,452,1,0,0,0,450,451,5,37,0,0,451,453,3,30,15,0,452,
		450,1,0,0,0,452,453,1,0,0,0,453,35,1,0,0,0,454,456,5,158,0,0,455,454,1,
		0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,
		459,457,1,0,0,0,460,461,3,44,22,0,461,471,5,110,0,0,462,464,5,158,0,0,
		463,462,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,468,
		1,0,0,0,467,465,1,0,0,0,468,470,3,46,23,0,469,465,1,0,0,0,470,473,1,0,
		0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,483,1,0,0,0,473,471,1,0,0,0,474,
		476,5,158,0,0,475,474,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,
		1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,482,3,50,25,0,481,477,1,0,
		0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,495,1,0,0,0,485,
		483,1,0,0,0,486,488,5,158,0,0,487,486,1,0,0,0,488,491,1,0,0,0,489,487,
		1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,489,1,0,0,0,492,494,3,84,42,
		0,493,489,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,
		498,1,0,0,0,497,495,1,0,0,0,498,499,5,111,0,0,499,37,1,0,0,0,500,502,5,
		158,0,0,501,500,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,
		0,504,506,1,0,0,0,505,503,1,0,0,0,506,507,3,42,21,0,507,517,5,110,0,0,
		508,510,5,158,0,0,509,508,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,
		512,1,0,0,0,512,514,1,0,0,0,513,511,1,0,0,0,514,516,3,46,23,0,515,511,
		1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,529,1,0,0,
		0,519,517,1,0,0,0,520,522,5,158,0,0,521,520,1,0,0,0,522,525,1,0,0,0,523,
		521,1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,525,523,1,0,0,0,526,528,3,
		52,26,0,527,523,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,
		0,530,541,1,0,0,0,531,529,1,0,0,0,532,534,5,158,0,0,533,532,1,0,0,0,534,
		537,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,535,1,
		0,0,0,538,540,3,84,42,0,539,535,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,
		0,541,542,1,0,0,0,542,544,1,0,0,0,543,541,1,0,0,0,544,545,5,111,0,0,545,
		39,1,0,0,0,546,548,5,158,0,0,547,546,1,0,0,0,548,551,1,0,0,0,549,547,1,
		0,0,0,549,550,1,0,0,0,550,552,1,0,0,0,551,549,1,0,0,0,552,553,5,67,0,0,
		553,563,5,110,0,0,554,556,5,158,0,0,555,554,1,0,0,0,556,559,1,0,0,0,557,
		555,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,557,1,0,0,0,560,562,3,
		48,24,0,561,557,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,
		0,564,566,1,0,0,0,565,563,1,0,0,0,566,567,5,111,0,0,567,41,1,0,0,0,568,
		569,5,16,0,0,569,571,6,21,-1,0,570,568,1,0,0,0,570,571,1,0,0,0,571,572,
		1,0,0,0,572,573,5,27,0,0,573,576,5,167,0,0,574,575,5,36,0,0,575,577,3,
		6,3,0,576,574,1,0,0,0,576,577,1,0,0,0,577,580,1,0,0,0,578,579,5,37,0,0,
		579,581,3,30,15,0,580,578,1,0,0,0,580,581,1,0,0,0,581,43,1,0,0,0,582,583,
		5,16,0,0,583,585,6,22,-1,0,584,582,1,0,0,0,584,585,1,0,0,0,585,587,1,0,
		0,0,586,588,7,0,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,
		590,5,25,0,0,590,593,5,167,0,0,591,592,5,36,0,0,592,594,3,6,3,0,593,591,
		1,0,0,0,593,594,1,0,0,0,594,597,1,0,0,0,595,596,5,37,0,0,596,598,3,30,
		15,0,597,595,1,0,0,0,597,598,1,0,0,0,598,629,1,0,0,0,599,600,5,23,0,0,
		600,601,5,25,0,0,601,602,5,167,0,0,602,603,5,137,0,0,603,604,5,164,0,0,
		604,605,5,119,0,0,605,606,5,164,0,0,606,607,5,119,0,0,607,608,5,164,0,
		0,608,611,5,136,0,0,609,610,5,36,0,0,610,612,3,6,3,0,611,609,1,0,0,0,611,
		612,1,0,0,0,612,615,1,0,0,0,613,614,5,37,0,0,614,616,3,30,15,0,615,613,
		1,0,0,0,615,616,1,0,0,0,616,629,1,0,0,0,617,618,5,24,0,0,618,619,5,25,
		0,0,619,622,5,167,0,0,620,621,5,36,0,0,621,623,3,6,3,0,622,620,1,0,0,0,
		622,623,1,0,0,0,623,626,1,0,0,0,624,625,5,37,0,0,625,627,3,30,15,0,626,
		624,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,584,1,0,0,0,628,599,1,
		0,0,0,628,617,1,0,0,0,629,45,1,0,0,0,630,631,5,38,0,0,631,632,3,6,3,0,
		632,633,5,118,0,0,633,47,1,0,0,0,634,636,3,54,27,0,635,634,1,0,0,0,636,
		639,1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,640,1,0,0,0,639,637,1,
		0,0,0,640,641,7,1,0,0,641,642,3,70,35,0,642,49,1,0,0,0,643,647,3,68,34,
		0,644,647,3,20,10,0,645,647,3,40,20,0,646,643,1,0,0,0,646,644,1,0,0,0,
		646,645,1,0,0,0,647,51,1,0,0,0,648,653,3,62,31,0,649,653,3,64,32,0,650,
		653,3,66,33,0,651,653,3,20,10,0,652,648,1,0,0,0,652,649,1,0,0,0,652,650,
		1,0,0,0,652,651,1,0,0,0,653,53,1,0,0,0,654,655,5,122,0,0,655,668,5,167,
		0,0,656,665,5,106,0,0,657,662,3,168,84,0,658,659,5,119,0,0,659,661,3,168,
		84,0,660,658,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,663,1,0,0,0,663,
		666,1,0,0,0,664,662,1,0,0,0,665,657,1,0,0,0,665,666,1,0,0,0,666,667,1,
		0,0,0,667,669,5,107,0,0,668,656,1,0,0,0,668,669,1,0,0,0,669,55,1,0,0,0,
		670,673,3,58,29,0,671,673,3,60,30,0,672,670,1,0,0,0,672,671,1,0,0,0,673,
		57,1,0,0,0,674,675,5,120,0,0,675,676,5,1,0,0,676,677,7,2,0,0,677,59,1,
		0,0,0,678,679,5,120,0,0,679,680,5,5,0,0,680,681,7,3,0,0,681,61,1,0,0,0,
		682,684,3,54,27,0,683,682,1,0,0,0,684,687,1,0,0,0,685,683,1,0,0,0,685,
		686,1,0,0,0,686,690,1,0,0,0,687,685,1,0,0,0,688,689,5,28,0,0,689,691,6,
		31,-1,0,690,688,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,693,5,29,0,
		0,693,694,5,167,0,0,694,698,5,110,0,0,695,697,3,72,36,0,696,695,1,0,0,
		0,697,700,1,0,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,701,1,0,0,0,700,
		698,1,0,0,0,701,702,5,111,0,0,702,63,1,0,0,0,703,704,5,9,0,0,704,705,5,
		167,0,0,705,709,5,110,0,0,706,708,3,80,40,0,707,706,1,0,0,0,708,711,1,
		0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,712,1,0,0,0,711,709,1,0,0,0,
		712,719,5,111,0,0,713,714,5,9,0,0,714,715,5,167,0,0,715,716,5,133,0,0,
		716,717,5,167,0,0,717,719,5,118,0,0,718,703,1,0,0,0,718,713,1,0,0,0,719,
		65,1,0,0,0,720,722,3,54,27,0,721,720,1,0,0,0,722,725,1,0,0,0,723,721,1,
		0,0,0,723,724,1,0,0,0,724,726,1,0,0,0,725,723,1,0,0,0,726,727,5,44,0,0,
		727,728,3,170,85,0,728,733,5,167,0,0,729,730,5,119,0,0,730,732,5,167,0,
		0,731,729,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,
		736,1,0,0,0,735,733,1,0,0,0,736,737,5,118,0,0,737,67,1,0,0,0,738,740,3,
		54,27,0,739,738,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,1,0,0,
		0,742,745,1,0,0,0,743,741,1,0,0,0,744,746,5,10,0,0,745,744,1,0,0,0,745,
		746,1,0,0,0,746,748,1,0,0,0,747,749,7,4,0,0,748,747,1,0,0,0,748,749,1,
		0,0,0,749,750,1,0,0,0,750,751,5,43,0,0,751,752,5,167,0,0,752,756,5,110,
		0,0,753,755,3,70,35,0,754,753,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,
		756,757,1,0,0,0,757,759,1,0,0,0,758,756,1,0,0,0,759,780,5,111,0,0,760,
		762,3,54,27,0,761,760,1,0,0,0,762,765,1,0,0,0,763,761,1,0,0,0,763,764,
		1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,766,768,5,10,0,0,767,766,1,0,0,
		0,767,768,1,0,0,0,768,770,1,0,0,0,769,771,7,5,0,0,770,769,1,0,0,0,770,
		771,1,0,0,0,771,772,1,0,0,0,772,773,5,43,0,0,773,774,5,137,0,0,774,775,
		3,170,85,0,775,776,5,136,0,0,776,777,5,167,0,0,777,778,5,118,0,0,778,780,
		1,0,0,0,779,741,1,0,0,0,779,763,1,0,0,0,780,69,1,0,0,0,781,783,3,54,27,
		0,782,781,1,0,0,0,783,786,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,
		787,1,0,0,0,786,784,1,0,0,0,787,788,3,170,85,0,788,789,5,167,0,0,789,790,
		5,118,0,0,790,71,1,0,0,0,791,793,3,54,27,0,792,791,1,0,0,0,793,796,1,0,
		0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,797,1,0,0,0,796,794,1,0,0,0,797,
		798,3,170,85,0,798,801,5,167,0,0,799,800,5,133,0,0,800,802,3,146,73,0,
		801,799,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,804,5,118,0,0,804,
		73,1,0,0,0,805,807,3,54,27,0,806,805,1,0,0,0,807,810,1,0,0,0,808,806,1,
		0,0,0,808,809,1,0,0,0,809,811,1,0,0,0,810,808,1,0,0,0,811,812,3,170,85,
		0,812,813,5,167,0,0,813,814,5,118,0,0,814,823,1,0,0,0,815,817,3,54,27,
		0,816,815,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,
		821,1,0,0,0,820,818,1,0,0,0,821,823,3,86,43,0,822,808,1,0,0,0,822,818,
		1,0,0,0,823,75,1,0,0,0,824,827,5,167,0,0,825,826,5,133,0,0,826,828,3,168,
		84,0,827,825,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,830,5,119,0,0,
		830,77,1,0,0,0,831,832,5,64,0,0,832,834,6,39,-1,0,833,831,1,0,0,0,833,
		834,1,0,0,0,834,835,1,0,0,0,835,836,3,170,85,0,836,841,3,82,41,0,837,838,
		5,119,0,0,838,840,3,82,41,0,839,837,1,0,0,0,840,843,1,0,0,0,841,839,1,
		0,0,0,841,842,1,0,0,0,842,847,1,0,0,0,843,841,1,0,0,0,844,845,5,39,0,0,
		845,847,3,80,40,0,846,833,1,0,0,0,846,844,1,0,0,0,847,79,1,0,0,0,848,849,
		3,144,72,0,849,850,5,133,0,0,850,851,3,146,73,0,851,81,1,0,0,0,852,857,
		3,144,72,0,853,854,3,80,40,0,854,855,6,41,-1,0,855,857,1,0,0,0,856,852,
		1,0,0,0,856,853,1,0,0,0,857,83,1,0,0,0,858,860,3,54,27,0,859,858,1,0,0,
		0,860,863,1,0,0,0,861,859,1,0,0,0,861,862,1,0,0,0,862,866,1,0,0,0,863,
		861,1,0,0,0,864,865,5,46,0,0,865,867,6,42,-1,0,866,864,1,0,0,0,866,867,
		1,0,0,0,867,868,1,0,0,0,868,869,3,86,43,0,869,85,1,0,0,0,870,871,3,88,
		44,0,871,872,5,110,0,0,872,873,3,96,48,0,873,874,5,111,0,0,874,87,1,0,
		0,0,875,877,3,170,85,0,876,875,1,0,0,0,876,877,1,0,0,0,877,878,1,0,0,0,
		878,879,5,167,0,0,879,880,3,90,45,0,880,89,1,0,0,0,881,883,5,106,0,0,882,
		884,3,92,46,0,883,882,1,0,0,0,883,884,1,0,0,0,884,885,1,0,0,0,885,886,
		5,107,0,0,886,91,1,0,0,0,887,892,3,94,47,0,888,889,5,119,0,0,889,891,3,
		94,47,0,890,888,1,0,0,0,891,894,1,0,0,0,892,890,1,0,0,0,892,893,1,0,0,
		0,893,93,1,0,0,0,894,892,1,0,0,0,895,897,7,6,0,0,896,895,1,0,0,0,896,897,
		1,0,0,0,897,898,1,0,0,0,898,899,3,170,85,0,899,900,5,167,0,0,900,95,1,
		0,0,0,901,903,3,162,81,0,902,901,1,0,0,0,903,906,1,0,0,0,904,902,1,0,0,
		0,904,905,1,0,0,0,905,908,1,0,0,0,906,904,1,0,0,0,907,909,3,152,76,0,908,
		907,1,0,0,0,908,909,1,0,0,0,909,97,1,0,0,0,910,914,5,110,0,0,911,913,3,
		164,82,0,912,911,1,0,0,0,913,916,1,0,0,0,914,912,1,0,0,0,914,915,1,0,0,
		0,915,917,1,0,0,0,916,914,1,0,0,0,917,918,5,111,0,0,918,99,1,0,0,0,919,
		926,3,144,72,0,920,926,3,136,68,0,921,926,3,116,58,0,922,926,3,110,55,
		0,923,926,3,112,56,0,924,926,3,148,74,0,925,919,1,0,0,0,925,920,1,0,0,
		0,925,921,1,0,0,0,925,922,1,0,0,0,925,923,1,0,0,0,925,924,1,0,0,0,926,
		101,1,0,0,0,927,931,3,144,72,0,928,931,3,116,58,0,929,931,3,148,74,0,930,
		927,1,0,0,0,930,928,1,0,0,0,930,929,1,0,0,0,931,103,1,0,0,0,932,935,3,
		100,50,0,933,934,5,112,0,0,934,936,3,102,51,0,935,933,1,0,0,0,936,937,
		1,0,0,0,937,935,1,0,0,0,937,938,1,0,0,0,938,105,1,0,0,0,939,942,3,144,
		72,0,940,942,3,148,74,0,941,939,1,0,0,0,941,940,1,0,0,0,942,107,1,0,0,
		0,943,946,3,100,50,0,944,945,5,112,0,0,945,947,3,106,53,0,946,944,1,0,
		0,0,947,948,1,0,0,0,948,946,1,0,0,0,948,949,1,0,0,0,949,109,1,0,0,0,950,
		951,7,7,0,0,951,952,5,112,0,0,952,953,3,144,72,0,953,111,1,0,0,0,954,955,
		7,7,0,0,955,956,5,112,0,0,956,957,3,116,58,0,957,113,1,0,0,0,958,961,3,
		110,55,0,959,961,3,112,56,0,960,958,1,0,0,0,960,959,1,0,0,0,961,115,1,
		0,0,0,962,963,3,6,3,0,963,965,5,106,0,0,964,966,3,140,70,0,965,964,1,0,
		0,0,965,966,1,0,0,0,966,967,1,0,0,0,967,968,5,107,0,0,968,117,1,0,0,0,
		969,970,5,66,0,0,970,971,5,106,0,0,971,972,3,144,72,0,972,973,7,8,0,0,
		973,974,3,168,84,0,974,975,5,107,0,0,975,977,3,98,49,0,976,978,3,124,62,
		0,977,976,1,0,0,0,977,978,1,0,0,0,978,119,1,0,0,0,979,980,5,52,0,0,980,
		981,5,106,0,0,981,982,3,146,73,0,982,983,5,107,0,0,983,987,3,98,49,0,984,
		986,3,122,61,0,985,984,1,0,0,0,986,989,1,0,0,0,987,985,1,0,0,0,987,988,
		1,0,0,0,988,991,1,0,0,0,989,987,1,0,0,0,990,992,3,124,62,0,991,990,1,0,
		0,0,991,992,1,0,0,0,992,121,1,0,0,0,993,997,5,53,0,0,994,995,5,54,0,0,
		995,997,5,52,0,0,996,993,1,0,0,0,996,994,1,0,0,0,997,998,1,0,0,0,998,999,
		5,106,0,0,999,1000,3,146,73,0,1000,1001,5,107,0,0,1001,1002,3,98,49,0,
		1002,123,1,0,0,0,1003,1004,5,54,0,0,1004,1005,3,98,49,0,1005,125,1,0,0,
		0,1006,1007,5,55,0,0,1007,1008,5,106,0,0,1008,1009,3,146,73,0,1009,1010,
		5,107,0,0,1010,1014,5,110,0,0,1011,1013,3,128,64,0,1012,1011,1,0,0,0,1013,
		1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,1,0,0,0,1015,1017,1,0,0,0,1016,
		1014,1,0,0,0,1017,1018,5,111,0,0,1018,127,1,0,0,0,1019,1020,5,62,0,0,1020,
		1021,3,168,84,0,1021,1023,5,117,0,0,1022,1024,5,110,0,0,1023,1022,1,0,
		0,0,1023,1024,1,0,0,0,1024,1028,1,0,0,0,1025,1027,3,162,81,0,1026,1025,
		1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,1031,
		1,0,0,0,1030,1028,1,0,0,0,1031,1033,3,160,80,0,1032,1034,5,111,0,0,1033,
		1032,1,0,0,0,1033,1034,1,0,0,0,1034,129,1,0,0,0,1035,1036,5,58,0,0,1036,
		1037,5,106,0,0,1037,1038,3,146,73,0,1038,1039,5,107,0,0,1039,1040,3,98,
		49,0,1040,131,1,0,0,0,1041,1042,5,56,0,0,1042,1043,5,106,0,0,1043,1044,
		3,146,73,0,1044,1045,5,118,0,0,1045,1046,3,146,73,0,1046,1047,5,118,0,
		0,1047,1048,3,146,73,0,1048,1049,5,107,0,0,1049,1050,3,98,49,0,1050,133,
		1,0,0,0,1051,1052,5,57,0,0,1052,1053,3,98,49,0,1053,1054,5,58,0,0,1054,
		1055,3,136,68,0,1055,135,1,0,0,0,1056,1057,5,106,0,0,1057,1058,3,146,73,
		0,1058,1059,5,107,0,0,1059,137,1,0,0,0,1060,1061,3,170,85,0,1061,1063,
		5,106,0,0,1062,1064,3,140,70,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,
		1065,1,0,0,0,1065,1066,5,107,0,0,1066,139,1,0,0,0,1067,1072,3,146,73,0,
		1068,1069,5,119,0,0,1069,1071,3,146,73,0,1070,1068,1,0,0,0,1071,1074,1,
		0,0,0,1072,1070,1,0,0,0,1072,1073,1,0,0,0,1073,141,1,0,0,0,1074,1072,1,
		0,0,0,1075,1076,7,9,0,0,1076,143,1,0,0,0,1077,1078,5,167,0,0,1078,145,
		1,0,0,0,1079,1080,6,73,-1,0,1080,1148,3,144,72,0,1081,1148,3,136,68,0,
		1082,1148,3,166,83,0,1083,1148,3,168,84,0,1084,1148,3,114,57,0,1085,1148,
		3,104,52,0,1086,1148,3,116,58,0,1087,1148,3,148,74,0,1088,1148,3,138,69,
		0,1089,1090,5,115,0,0,1090,1148,3,146,73,36,1091,1092,3,150,75,0,1092,
		1093,7,10,0,0,1093,1148,1,0,0,0,1094,1095,7,10,0,0,1095,1148,3,150,75,
		0,1096,1097,7,11,0,0,1097,1148,3,146,73,33,1098,1099,3,150,75,0,1099,1100,
		5,133,0,0,1100,1101,3,146,73,12,1101,1148,1,0,0,0,1102,1103,3,150,75,0,
		1103,1104,5,142,0,0,1104,1105,3,146,73,11,1105,1148,1,0,0,0,1106,1107,
		3,150,75,0,1107,1108,5,143,0,0,1108,1109,3,146,73,10,1109,1148,1,0,0,0,
		1110,1111,3,150,75,0,1111,1112,5,144,0,0,1112,1113,3,146,73,9,1113,1148,
		1,0,0,0,1114,1115,3,150,75,0,1115,1116,5,145,0,0,1116,1117,3,146,73,8,
		1117,1148,1,0,0,0,1118,1119,3,150,75,0,1119,1120,5,146,0,0,1120,1121,3,
		146,73,7,1121,1148,1,0,0,0,1122,1123,3,150,75,0,1123,1124,5,147,0,0,1124,
		1125,3,146,73,6,1125,1148,1,0,0,0,1126,1127,3,150,75,0,1127,1128,5,148,
		0,0,1128,1129,3,146,73,5,1129,1148,1,0,0,0,1130,1131,3,150,75,0,1131,1132,
		5,149,0,0,1132,1133,3,146,73,4,1133,1148,1,0,0,0,1134,1135,3,150,75,0,
		1135,1136,5,150,0,0,1136,1137,3,146,73,3,1137,1148,1,0,0,0,1138,1139,3,
		150,75,0,1139,1140,5,151,0,0,1140,1141,3,146,73,2,1141,1148,1,0,0,0,1142,
		1143,5,106,0,0,1143,1144,3,170,85,0,1144,1145,5,107,0,0,1145,1146,3,146,
		73,1,1146,1148,1,0,0,0,1147,1079,1,0,0,0,1147,1081,1,0,0,0,1147,1082,1,
		0,0,0,1147,1083,1,0,0,0,1147,1084,1,0,0,0,1147,1085,1,0,0,0,1147,1086,
		1,0,0,0,1147,1087,1,0,0,0,1147,1088,1,0,0,0,1147,1089,1,0,0,0,1147,1091,
		1,0,0,0,1147,1094,1,0,0,0,1147,1096,1,0,0,0,1147,1098,1,0,0,0,1147,1102,
		1,0,0,0,1147,1106,1,0,0,0,1147,1110,1,0,0,0,1147,1114,1,0,0,0,1147,1118,
		1,0,0,0,1147,1122,1,0,0,0,1147,1126,1,0,0,0,1147,1130,1,0,0,0,1147,1134,
		1,0,0,0,1147,1138,1,0,0,0,1147,1142,1,0,0,0,1148,1214,1,0,0,0,1149,1150,
		10,32,0,0,1150,1151,5,139,0,0,1151,1213,3,146,73,33,1152,1153,10,31,0,
		0,1153,1154,5,138,0,0,1154,1213,3,146,73,32,1155,1156,10,30,0,0,1156,1157,
		5,137,0,0,1157,1213,3,146,73,31,1158,1159,10,29,0,0,1159,1160,5,136,0,
		0,1160,1213,3,146,73,30,1161,1162,10,28,0,0,1162,1163,5,134,0,0,1163,1213,
		3,146,73,29,1164,1165,10,27,0,0,1165,1166,5,135,0,0,1166,1213,3,146,73,
		28,1167,1168,10,26,0,0,1168,1169,5,127,0,0,1169,1213,3,146,73,27,1170,
		1171,10,25,0,0,1171,1172,5,128,0,0,1172,1213,3,146,73,26,1173,1174,10,
		24,0,0,1174,1175,5,132,0,0,1175,1213,3,146,73,25,1176,1177,10,23,0,0,1177,
		1178,5,131,0,0,1178,1213,3,146,73,24,1179,1180,10,22,0,0,1180,1181,5,129,
		0,0,1181,1213,3,146,73,23,1182,1183,10,21,0,0,1183,1184,5,125,0,0,1184,
		1213,3,146,73,22,1185,1186,10,20,0,0,1186,1187,5,126,0,0,1187,1213,3,146,
		73,21,1188,1189,10,19,0,0,1189,1190,5,130,0,0,1190,1213,3,146,73,19,1191,
		1192,10,18,0,0,1192,1193,5,155,0,0,1193,1213,3,146,73,18,1194,1195,10,
		17,0,0,1195,1196,5,156,0,0,1196,1213,3,146,73,17,1197,1198,10,16,0,0,1198,
		1199,5,153,0,0,1199,1213,3,146,73,17,1200,1201,10,15,0,0,1201,1202,5,152,
		0,0,1202,1213,3,146,73,16,1203,1204,10,14,0,0,1204,1205,5,154,0,0,1205,
		1213,3,146,73,15,1206,1207,10,13,0,0,1207,1208,5,116,0,0,1208,1209,3,146,
		73,0,1209,1210,5,117,0,0,1210,1211,3,146,73,13,1211,1213,1,0,0,0,1212,
		1149,1,0,0,0,1212,1152,1,0,0,0,1212,1155,1,0,0,0,1212,1158,1,0,0,0,1212,
		1161,1,0,0,0,1212,1164,1,0,0,0,1212,1167,1,0,0,0,1212,1170,1,0,0,0,1212,
		1173,1,0,0,0,1212,1176,1,0,0,0,1212,1179,1,0,0,0,1212,1182,1,0,0,0,1212,
		1185,1,0,0,0,1212,1188,1,0,0,0,1212,1191,1,0,0,0,1212,1194,1,0,0,0,1212,
		1197,1,0,0,0,1212,1200,1,0,0,0,1212,1203,1,0,0,0,1212,1206,1,0,0,0,1213,
		1216,1,0,0,0,1214,1212,1,0,0,0,1214,1215,1,0,0,0,1215,147,1,0,0,0,1216,
		1214,1,0,0,0,1217,1221,3,144,72,0,1218,1221,3,114,57,0,1219,1221,3,116,
		58,0,1220,1217,1,0,0,0,1220,1218,1,0,0,0,1220,1219,1,0,0,0,1221,1222,1,
		0,0,0,1222,1223,5,108,0,0,1223,1224,3,146,73,0,1224,1225,5,109,0,0,1225,
		149,1,0,0,0,1226,1231,3,148,74,0,1227,1231,3,144,72,0,1228,1231,3,110,
		55,0,1229,1231,3,108,54,0,1230,1226,1,0,0,0,1230,1227,1,0,0,0,1230,1228,
		1,0,0,0,1230,1229,1,0,0,0,1231,151,1,0,0,0,1232,1233,5,51,0,0,1233,1234,
		3,146,73,0,1234,1235,5,118,0,0,1235,153,1,0,0,0,1236,1237,5,59,0,0,1237,
		1238,5,118,0,0,1238,155,1,0,0,0,1239,1240,5,60,0,0,1240,1241,5,118,0,0,
		1241,157,1,0,0,0,1242,1243,5,61,0,0,1243,1244,5,118,0,0,1244,159,1,0,0,
		0,1245,1250,3,154,77,0,1246,1250,3,152,76,0,1247,1250,3,156,78,0,1248,
		1250,3,158,79,0,1249,1245,1,0,0,0,1249,1246,1,0,0,0,1249,1247,1,0,0,0,
		1249,1248,1,0,0,0,1250,161,1,0,0,0,1251,1252,3,78,39,0,1252,1253,5,118,
		0,0,1253,1265,1,0,0,0,1254,1255,3,146,73,0,1255,1256,5,118,0,0,1256,1265,
		1,0,0,0,1257,1265,3,98,49,0,1258,1265,3,120,60,0,1259,1265,3,126,63,0,
		1260,1265,3,130,65,0,1261,1265,3,132,66,0,1262,1265,3,134,67,0,1263,1265,
		3,118,59,0,1264,1251,1,0,0,0,1264,1254,1,0,0,0,1264,1257,1,0,0,0,1264,
		1258,1,0,0,0,1264,1259,1,0,0,0,1264,1260,1,0,0,0,1264,1261,1,0,0,0,1264,
		1262,1,0,0,0,1264,1263,1,0,0,0,1265,163,1,0,0,0,1266,1269,3,162,81,0,1267,
		1269,3,160,80,0,1268,1266,1,0,0,0,1268,1267,1,0,0,0,1269,165,1,0,0,0,1270,
		1277,5,161,0,0,1271,1277,5,162,0,0,1272,1277,5,163,0,0,1273,1277,5,164,
		0,0,1274,1277,5,165,0,0,1275,1277,5,166,0,0,1276,1270,1,0,0,0,1276,1271,
		1,0,0,0,1276,1272,1,0,0,0,1276,1273,1,0,0,0,1276,1274,1,0,0,0,1276,1275,
		1,0,0,0,1277,167,1,0,0,0,1278,1281,3,166,83,0,1279,1281,3,6,3,0,1280,1278,
		1,0,0,0,1280,1279,1,0,0,0,1281,169,1,0,0,0,1282,1289,3,174,87,0,1283,1285,
		5,108,0,0,1284,1286,5,164,0,0,1285,1284,1,0,0,0,1285,1286,1,0,0,0,1286,
		1287,1,0,0,0,1287,1288,5,109,0,0,1288,1290,6,85,-1,0,1289,1283,1,0,0,0,
		1289,1290,1,0,0,0,1290,1291,1,0,0,0,1291,1292,6,85,-1,0,1292,1316,1,0,
		0,0,1293,1300,3,176,88,0,1294,1296,5,108,0,0,1295,1297,5,164,0,0,1296,
		1295,1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,0,0,0,1298,1299,5,109,0,0,1299,
		1301,6,85,-1,0,1300,1294,1,0,0,0,1300,1301,1,0,0,0,1301,1302,1,0,0,0,1302,
		1303,6,85,-1,0,1303,1316,1,0,0,0,1304,1311,3,172,86,0,1305,1307,5,108,
		0,0,1306,1308,5,164,0,0,1307,1306,1,0,0,0,1307,1308,1,0,0,0,1308,1309,
		1,0,0,0,1309,1310,5,109,0,0,1310,1312,6,85,-1,0,1311,1305,1,0,0,0,1311,
		1312,1,0,0,0,1312,1313,1,0,0,0,1313,1314,6,85,-1,0,1314,1316,1,0,0,0,1315,
		1282,1,0,0,0,1315,1293,1,0,0,0,1315,1304,1,0,0,0,1316,171,1,0,0,0,1317,
		1318,3,6,3,0,1318,173,1,0,0,0,1319,1327,5,68,0,0,1320,1327,5,69,0,0,1321,
		1327,5,70,0,0,1322,1327,5,71,0,0,1323,1327,5,72,0,0,1324,1327,5,73,0,0,
		1325,1327,5,74,0,0,1326,1319,1,0,0,0,1326,1320,1,0,0,0,1326,1321,1,0,0,
		0,1326,1322,1,0,0,0,1326,1323,1,0,0,0,1326,1324,1,0,0,0,1326,1325,1,0,
		0,0,1327,175,1,0,0,0,1328,1360,5,75,0,0,1329,1360,5,76,0,0,1330,1360,5,
		77,0,0,1331,1360,5,78,0,0,1332,1360,5,79,0,0,1333,1360,5,80,0,0,1334,1360,
		5,81,0,0,1335,1360,5,82,0,0,1336,1360,5,83,0,0,1337,1360,5,84,0,0,1338,
		1360,5,85,0,0,1339,1360,5,86,0,0,1340,1360,5,87,0,0,1341,1360,5,88,0,0,
		1342,1360,5,89,0,0,1343,1360,5,90,0,0,1344,1360,5,91,0,0,1345,1360,5,92,
		0,0,1346,1360,5,93,0,0,1347,1360,5,94,0,0,1348,1360,5,95,0,0,1349,1360,
		5,96,0,0,1350,1360,5,97,0,0,1351,1360,5,98,0,0,1352,1360,5,99,0,0,1353,
		1360,5,101,0,0,1354,1360,5,100,0,0,1355,1360,5,102,0,0,1356,1360,5,103,
		0,0,1357,1360,5,104,0,0,1358,1360,5,105,0,0,1359,1328,1,0,0,0,1359,1329,
		1,0,0,0,1359,1330,1,0,0,0,1359,1331,1,0,0,0,1359,1332,1,0,0,0,1359,1333,
		1,0,0,0,1359,1334,1,0,0,0,1359,1335,1,0,0,0,1359,1336,1,0,0,0,1359,1337,
		1,0,0,0,1359,1338,1,0,0,0,1359,1339,1,0,0,0,1359,1340,1,0,0,0,1359,1341,
		1,0,0,0,1359,1342,1,0,0,0,1359,1343,1,0,0,0,1359,1344,1,0,0,0,1359,1345,
		1,0,0,0,1359,1346,1,0,0,0,1359,1347,1,0,0,0,1359,1348,1,0,0,0,1359,1349,
		1,0,0,0,1359,1350,1,0,0,0,1359,1351,1,0,0,0,1359,1352,1,0,0,0,1359,1353,
		1,0,0,0,1359,1354,1,0,0,0,1359,1355,1,0,0,0,1359,1356,1,0,0,0,1359,1357,
		1,0,0,0,1359,1358,1,0,0,0,1360,177,1,0,0,0,144,181,187,191,196,202,208,
		216,222,226,231,237,252,261,265,288,306,311,319,325,333,341,347,352,360,
		370,378,386,395,402,408,416,422,428,435,439,448,452,457,465,471,477,483,
		489,495,503,511,517,523,529,535,541,549,557,563,570,576,580,584,587,593,
		597,611,615,622,626,628,637,646,652,662,665,668,672,685,690,698,709,718,
		723,733,741,745,748,756,763,767,770,779,784,794,801,808,818,822,827,833,
		841,846,856,861,866,876,883,892,896,904,908,914,925,930,937,941,948,960,
		965,977,987,991,996,1014,1023,1028,1033,1063,1072,1147,1212,1214,1220,
		1230,1249,1264,1268,1276,1280,1285,1289,1296,1300,1307,1311,1315,1326,
		1359
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SPSL.Language
