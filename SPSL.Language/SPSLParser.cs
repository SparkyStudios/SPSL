//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\sparky_studios\SPSL\SPSL.Language\SPSL.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SPSL.Language {

using SPSL.Language.AST;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class SPSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, KEYWORD_NAMESPACE=15, 
		KEYWORD_ABSTRACT=16, KEYWORD_VERTEX=17, KEYWORD_FRAGMENT=18, KEYWORD_PIXEL=19, 
		KEYWORD_GEOMETRY=20, KEYWORD_HULL=21, KEYWORD_DOMAIN=22, KEYWORD_COMPUTE=23, 
		KEYWORD_SHADER=24, KEYWORD_INTERFACE=25, KEYWORD_MATERIAL=26, KEYWORD_PARTIAL=27, 
		KEYWORD_PARAMS=28, KEYWORD_TYPE=29, KEYWORD_AS=30, KEYWORD_IN=31, KEYWORD_OF=32, 
		KEYWORD_OUT=33, KEYWORD_INOUT=34, KEYWORD_EXTENDS=35, KEYWORD_IMPLEMENTS=36, 
		KEYWORD_USE=37, KEYWORD_VAR=38, KEYWORD_INPUT=39, KEYWORD_OUTPUT=40, KEYWORD_BUFFER=41, 
		KEYWORD_LOCAL=42, KEYWORD_GLOBAL=43, KEYWORD_OVERRIDE=44, KEYWORD_THIS=45, 
		KEYWORD_BASE=46, KEYWORD_STRUCT=47, KEYWORD_ENUM=48, KEYWORD_RETURN=49, 
		KEYWORD_IF=50, KEYWORD_ELIF=51, KEYWORD_ELSE=52, KEYWORD_SWITCH=53, KEYWORD_FOR=54, 
		KEYWORD_DO=55, KEYWORD_WHILE=56, KEYWORD_BREAK=57, KEYWORD_CONTINUE=58, 
		KEYWORD_DISCARD=59, KEYWORD_CASE=60, KEYWORD_DEFAULT=61, KEYWORD_STATIC=62, 
		KEYWORD_CONST=63, KEYWORD_PERMUTATION=64, KEYWORD_PERMUTE=65, TYPE_VOID=66, 
		TYPE_BOOL=67, TYPE_INT=68, TYPE_UINT=69, TYPE_FLOAT=70, TYPE_DOUBLE=71, 
		TYPE_STRING=72, TYPE_VECTOR2B=73, TYPE_VECTOR2F=74, TYPE_VECTOR2I=75, 
		TYPE_VECTOR2UI=76, TYPE_VECTOR3B=77, TYPE_VECTOR3F=78, TYPE_VECTOR3I=79, 
		TYPE_VECTOR3UI=80, TYPE_VECTOR4B=81, TYPE_VECTOR4F=82, TYPE_VECTOR4I=83, 
		TYPE_VECTOR4UI=84, TYPE_MATRIX2F=85, TYPE_MATRIX3F=86, TYPE_MATRIX4F=87, 
		TYPE_MATRIX2X3F=88, TYPE_MATRIX2X4F=89, TYPE_MATRIX3X2F=90, TYPE_MATRIX3X4F=91, 
		TYPE_MATRIX4X2F=92, TYPE_MATRIX4X3F=93, TYPE_COLOR3=94, TYPE_COLOR4=95, 
		TYPE_SAMPLER=96, TYPE_TEXTURE1D=97, TYPE_TEXTURE2D=98, TYPE_TEXTURE1DARRAY=99, 
		TYPE_TEXTURE2DARRAY=100, TYPE_TEXTURE3D=101, TYPE_CUBEMAP=102, TYPE_CUBEMAPARRAY=103, 
		TOK_OPEN_PAREN=104, TOK_CLOSE_PAREN=105, TOK_OPEN_BRACKET=106, TOK_CLOSE_BRACKET=107, 
		TOK_OPEN_BRACE=108, TOK_CLOSE_BRACE=109, TOK_DOT=110, TOK_UNDERSCORE=111, 
		TOK_TILDE=112, TOK_EXCLAMATION=113, TOK_QUESTION=114, TOK_COLON=115, TOK_SEMICOLON=116, 
		TOK_COMMA=117, TOK_HASHTAG=118, TOK_DOLLAR=119, TOK_AT=120, TOK_BACKSLASH=121, 
		OP_PIPE=122, OP_AMPERSAND=123, OP_PLUS=124, OP_MINUS=125, OP_ASTERISK=126, 
		OP_EXPONENT=127, OP_MODULUS=128, OP_DIV=129, OP_ASSIGN=130, OP_EQUAL=131, 
		OP_DIFFERENT=132, OP_GREATER_THAN=133, OP_LESSER_THAN=134, OP_GEQ_THAN=135, 
		OP_LEQ_THAN=136, OP_INCREMENT=137, OP_DECREMENT=138, OP_PLUS_ASSIGN=139, 
		OP_MINUS_ASSIGN=140, OP_MUL_ASSIGN=141, OP_DIV_ASSIGN=142, OP_MODULUS_ASSIGN=143, 
		OP_BITWISE_OR_ASSIGN=144, OP_BITWISE_AND_ASSIGN=145, OP_EXPONENT_ASSIGN=146, 
		OP_LSHIFT_ASSIGN=147, OP_RSHIFT_ASSIGN=148, OP_OR=149, OP_AND=150, OP_XOR=151, 
		OP_LSHIFT=152, OP_RSHIFT=153, WHITESPACE=154, DOC_COMMENT=155, BLOCK_COMMENT=156, 
		LINE_COMMENT=157, BoolLiteral=158, DoubleLiteral=159, FloatLiteral=160, 
		IntegerLiteral=161, UnsignedIntegerLiteral=162, StringLiteral=163, IDENTIFIER=164;
	public const int
		RULE_file = 0, RULE_namespaceDefinition = 1, RULE_namespacedTypeName = 2, 
		RULE_fileLevelDefinition = 3, RULE_globalVariable = 4, RULE_permutationVariableBool = 5, 
		RULE_permutationVariableEnum = 6, RULE_permutationVariableInteger = 7, 
		RULE_permutationVariable = 8, RULE_type = 9, RULE_structDefinition = 10, 
		RULE_enumDefinition = 11, RULE_interface = 12, RULE_interfaceDefinition = 13, 
		RULE_interfacesList = 14, RULE_shaderFragment = 15, RULE_shaderFragmentDefinition = 16, 
		RULE_shader = 17, RULE_material = 18, RULE_materialDefinition = 19, RULE_shaderDefinition = 20, 
		RULE_useDirective = 21, RULE_shaderMember = 22, RULE_materialMember = 23, 
		RULE_annotation = 24, RULE_directive = 25, RULE_precisionDirective = 26, 
		RULE_shaderLangDirective = 27, RULE_parameterDirective = 28, RULE_materialParams = 29, 
		RULE_inputVarDefinition = 30, RULE_localVarDeclaration = 31, RULE_bufferDefinition = 32, 
		RULE_bufferComponent = 33, RULE_structComponent = 34, RULE_enumComponent = 35, 
		RULE_variableDeclaration = 36, RULE_variableDeclarationAssignment = 37, 
		RULE_variableIdentity = 38, RULE_shaderFunction = 39, RULE_function = 40, 
		RULE_functionHead = 41, RULE_functionSignature = 42, RULE_argList = 43, 
		RULE_argDef = 44, RULE_functionBody = 45, RULE_statementBlock = 46, RULE_referencableExpression = 47, 
		RULE_chainableExpression = 48, RULE_chainedExpression = 49, RULE_assignableChainableExpression = 50, 
		RULE_assignableChainedExpression = 51, RULE_propertyMemberReferenceExpression = 52, 
		RULE_methodMemberReferenceExpression = 53, RULE_memberReferenceExpression = 54, 
		RULE_invocationExpression = 55, RULE_permuteStatement = 56, RULE_ifStatement = 57, 
		RULE_elifStatement = 58, RULE_elseStatement = 59, RULE_switchStatement = 60, 
		RULE_caseStatement = 61, RULE_whileStatement = 62, RULE_forStatement = 63, 
		RULE_doWhileStatement = 64, RULE_parenthesizedExpression = 65, RULE_newInstanceExpression = 66, 
		RULE_parametersList = 67, RULE_contextAccessExpression = 68, RULE_basicExpression = 69, 
		RULE_expressionStatement = 70, RULE_arrayAccessExpression = 71, RULE_assignableExpression = 72, 
		RULE_returnStatement = 73, RULE_breakStatement = 74, RULE_continueStatement = 75, 
		RULE_discardStatement = 76, RULE_leaveControlFlowStatement = 77, RULE_stayControlFlowStatement = 78, 
		RULE_statement = 79, RULE_primitiveExpression = 80, RULE_constantExpression = 81, 
		RULE_dataType = 82, RULE_userDefinedDataType = 83, RULE_primitiveDataType = 84, 
		RULE_builtinDataType = 85;
	public static readonly string[] ruleNames = {
		"file", "namespaceDefinition", "namespacedTypeName", "fileLevelDefinition", 
		"globalVariable", "permutationVariableBool", "permutationVariableEnum", 
		"permutationVariableInteger", "permutationVariable", "type", "structDefinition", 
		"enumDefinition", "interface", "interfaceDefinition", "interfacesList", 
		"shaderFragment", "shaderFragmentDefinition", "shader", "material", "materialDefinition", 
		"shaderDefinition", "useDirective", "shaderMember", "materialMember", 
		"annotation", "directive", "precisionDirective", "shaderLangDirective", 
		"parameterDirective", "materialParams", "inputVarDefinition", "localVarDeclaration", 
		"bufferDefinition", "bufferComponent", "structComponent", "enumComponent", 
		"variableDeclaration", "variableDeclarationAssignment", "variableIdentity", 
		"shaderFunction", "function", "functionHead", "functionSignature", "argList", 
		"argDef", "functionBody", "statementBlock", "referencableExpression", 
		"chainableExpression", "chainedExpression", "assignableChainableExpression", 
		"assignableChainedExpression", "propertyMemberReferenceExpression", "methodMemberReferenceExpression", 
		"memberReferenceExpression", "invocationExpression", "permuteStatement", 
		"ifStatement", "elifStatement", "elseStatement", "switchStatement", "caseStatement", 
		"whileStatement", "forStatement", "doWhileStatement", "parenthesizedExpression", 
		"newInstanceExpression", "parametersList", "contextAccessExpression", 
		"basicExpression", "expressionStatement", "arrayAccessExpression", "assignableExpression", 
		"returnStatement", "breakStatement", "continueStatement", "discardStatement", 
		"leaveControlFlowStatement", "stayControlFlowStatement", "statement", 
		"primitiveExpression", "constantExpression", "dataType", "userDefinedDataType", 
		"primitiveDataType", "builtinDataType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'precision'", "'low'", "'medium'", "'high'", "'shaderLang'", "'GLSL'", 
		"'HLSL'", "'MSL'", "'shaderParam'", "'coherent'", "'readonly'", "'writeonly'", 
		"'readwrite'", "'constant'", "'namespace'", "'abstract'", "'vertex'", 
		"'fragment'", "'pixel'", "'geometry'", "'hull'", "'domain'", "'compute'", 
		"'shader'", "'interface'", "'material'", "'partial'", "'params'", "'type'", 
		"'as'", "'in'", "'of'", "'out'", "'inout'", "'extends'", "'implements'", 
		"'use'", "'var'", "'input'", "'output'", "'buffer'", "'local'", "'global'", 
		"'override'", "'this'", "'base'", "'struct'", "'enum'", "'return'", "'if'", 
		"'elif'", "'else'", "'switch'", "'for'", "'do'", "'while'", "'break'", 
		"'continue'", "'discard'", "'case'", "'default'", "'static'", "'const'", 
		"'permutation'", "'permute'", "'void'", "'bool'", "'int'", "'uint'", "'float'", 
		"'double'", "'string'", "'vector2b'", "'vector2f'", "'vector2i'", "'vector2ui'", 
		"'vector3b'", "'vector3f'", "'vector3i'", "'vector3ui'", "'vector4b'", 
		"'vector4f'", "'vector4i'", "'vector4ui'", "'matrix2f'", "'matrix3f'", 
		"'matrix4f'", "'matrix2x3f'", "'matrix2x4f'", "'matrix3x2f'", "'matrix3x4f'", 
		"'matrix4x2f'", "'matrix4x3f'", "'color3'", "'color4'", "'sampler'", "'texture1d'", 
		"'texture2d'", "'texture1dArray'", "'texture2dArray'", "'texture3d'", 
		"'cubemap'", "'cubemapArray'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"'.'", "'_'", "'~'", "'!'", "'?'", "':'", "';'", "','", "'#'", "'$'", 
		"'@'", "'\\'", "'|'", "'&'", "'+'", "'-'", "'*'", "'^'", "'%'", "'/'", 
		"'='", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'++'", "'--'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'|='", "'&='", "'^='", "'<<='", "'>>='", 
		null, null, "'^^'", "'<<'", "'>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "KEYWORD_NAMESPACE", "KEYWORD_ABSTRACT", "KEYWORD_VERTEX", 
		"KEYWORD_FRAGMENT", "KEYWORD_PIXEL", "KEYWORD_GEOMETRY", "KEYWORD_HULL", 
		"KEYWORD_DOMAIN", "KEYWORD_COMPUTE", "KEYWORD_SHADER", "KEYWORD_INTERFACE", 
		"KEYWORD_MATERIAL", "KEYWORD_PARTIAL", "KEYWORD_PARAMS", "KEYWORD_TYPE", 
		"KEYWORD_AS", "KEYWORD_IN", "KEYWORD_OF", "KEYWORD_OUT", "KEYWORD_INOUT", 
		"KEYWORD_EXTENDS", "KEYWORD_IMPLEMENTS", "KEYWORD_USE", "KEYWORD_VAR", 
		"KEYWORD_INPUT", "KEYWORD_OUTPUT", "KEYWORD_BUFFER", "KEYWORD_LOCAL", 
		"KEYWORD_GLOBAL", "KEYWORD_OVERRIDE", "KEYWORD_THIS", "KEYWORD_BASE", 
		"KEYWORD_STRUCT", "KEYWORD_ENUM", "KEYWORD_RETURN", "KEYWORD_IF", "KEYWORD_ELIF", 
		"KEYWORD_ELSE", "KEYWORD_SWITCH", "KEYWORD_FOR", "KEYWORD_DO", "KEYWORD_WHILE", 
		"KEYWORD_BREAK", "KEYWORD_CONTINUE", "KEYWORD_DISCARD", "KEYWORD_CASE", 
		"KEYWORD_DEFAULT", "KEYWORD_STATIC", "KEYWORD_CONST", "KEYWORD_PERMUTATION", 
		"KEYWORD_PERMUTE", "TYPE_VOID", "TYPE_BOOL", "TYPE_INT", "TYPE_UINT", 
		"TYPE_FLOAT", "TYPE_DOUBLE", "TYPE_STRING", "TYPE_VECTOR2B", "TYPE_VECTOR2F", 
		"TYPE_VECTOR2I", "TYPE_VECTOR2UI", "TYPE_VECTOR3B", "TYPE_VECTOR3F", "TYPE_VECTOR3I", 
		"TYPE_VECTOR3UI", "TYPE_VECTOR4B", "TYPE_VECTOR4F", "TYPE_VECTOR4I", "TYPE_VECTOR4UI", 
		"TYPE_MATRIX2F", "TYPE_MATRIX3F", "TYPE_MATRIX4F", "TYPE_MATRIX2X3F", 
		"TYPE_MATRIX2X4F", "TYPE_MATRIX3X2F", "TYPE_MATRIX3X4F", "TYPE_MATRIX4X2F", 
		"TYPE_MATRIX4X3F", "TYPE_COLOR3", "TYPE_COLOR4", "TYPE_SAMPLER", "TYPE_TEXTURE1D", 
		"TYPE_TEXTURE2D", "TYPE_TEXTURE1DARRAY", "TYPE_TEXTURE2DARRAY", "TYPE_TEXTURE3D", 
		"TYPE_CUBEMAP", "TYPE_CUBEMAPARRAY", "TOK_OPEN_PAREN", "TOK_CLOSE_PAREN", 
		"TOK_OPEN_BRACKET", "TOK_CLOSE_BRACKET", "TOK_OPEN_BRACE", "TOK_CLOSE_BRACE", 
		"TOK_DOT", "TOK_UNDERSCORE", "TOK_TILDE", "TOK_EXCLAMATION", "TOK_QUESTION", 
		"TOK_COLON", "TOK_SEMICOLON", "TOK_COMMA", "TOK_HASHTAG", "TOK_DOLLAR", 
		"TOK_AT", "TOK_BACKSLASH", "OP_PIPE", "OP_AMPERSAND", "OP_PLUS", "OP_MINUS", 
		"OP_ASTERISK", "OP_EXPONENT", "OP_MODULUS", "OP_DIV", "OP_ASSIGN", "OP_EQUAL", 
		"OP_DIFFERENT", "OP_GREATER_THAN", "OP_LESSER_THAN", "OP_GEQ_THAN", "OP_LEQ_THAN", 
		"OP_INCREMENT", "OP_DECREMENT", "OP_PLUS_ASSIGN", "OP_MINUS_ASSIGN", "OP_MUL_ASSIGN", 
		"OP_DIV_ASSIGN", "OP_MODULUS_ASSIGN", "OP_BITWISE_OR_ASSIGN", "OP_BITWISE_AND_ASSIGN", 
		"OP_EXPONENT_ASSIGN", "OP_LSHIFT_ASSIGN", "OP_RSHIFT_ASSIGN", "OP_OR", 
		"OP_AND", "OP_XOR", "OP_LSHIFT", "OP_RSHIFT", "WHITESPACE", "DOC_COMMENT", 
		"BLOCK_COMMENT", "LINE_COMMENT", "BoolLiteral", "DoubleLiteral", "FloatLiteral", 
		"IntegerLiteral", "UnsignedIntegerLiteral", "StringLiteral", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SPSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SPSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SPSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SPSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public DirectiveContext Directives;
		public NamespaceDefinitionContext Namespace;
		public FileLevelDefinitionContext FileLevelDefinitions;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SPSLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDefinitionContext namespaceDefinition() {
			return GetRuleContext<NamespaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelDefinitionContext[] fileLevelDefinition() {
			return GetRuleContexts<FileLevelDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelDefinitionContext fileLevelDefinition(int i) {
			return GetRuleContext<FileLevelDefinitionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_HASHTAG) {
				{
				{
				State = 172;
				_localctx.Directives = directive();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 178;
					Match(DOC_COMMENT);
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_NAMESPACE) {
				{
				State = 184;
				_localctx.Namespace = namespaceDefinition();
				}
			}

			State = 196;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 190;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 187;
						Match(DOC_COMMENT);
						}
						}
						State = 192;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 193;
					useDirective();
					}
					} 
				}
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 16)) & ~0x3f) == 0 && ((1L << (_la - 16)) & 492581209252863L) != 0) || _la==DOC_COMMENT) {
				{
				{
				State = 199;
				_localctx.FileLevelDefinitions = fileLevelDefinition();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 205;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDefinitionContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_NAMESPACE() { return GetToken(SPSLParser.KEYWORD_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public NamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDefinitionContext namespaceDefinition() {
		NamespaceDefinitionContext _localctx = new NamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(KEYWORD_NAMESPACE);
			State = 208;
			_localctx.Name = namespacedTypeName();
			State = 209;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_BACKSLASH() { return GetTokens(SPSLParser.TOK_BACKSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_BACKSLASH(int i) {
			return GetToken(SPSLParser.TOK_BACKSLASH, i);
		}
		public NamespacedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNamespacedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNamespacedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacedTypeNameContext namespacedTypeName() {
		NamespacedTypeNameContext _localctx = new NamespacedTypeNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespacedTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(IDENTIFIER);
			State = 216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 212;
					Match(TOK_BACKSLASH);
					State = 213;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileLevelDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext permutationVariable() {
			return GetRuleContext<PermutationVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface() {
			return GetRuleContext<InterfaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFragmentContext shaderFragment() {
			return GetRuleContext<ShaderFragmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderContext shader() {
			return GetRuleContext<ShaderContext>(0);
		}
		public FileLevelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileLevelDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFileLevelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFileLevelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileLevelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileLevelDefinitionContext fileLevelDefinition() {
		FileLevelDefinitionContext _localctx = new FileLevelDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_fileLevelDefinition);
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				globalVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 220;
				permutationVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 221;
				type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 222;
				@interface();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 223;
				shaderFragment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 224;
				shader();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public bool IsStatic;
		public DataTypeContext Type;
		public VariableDeclarationAssignmentContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STATIC() { return GetToken(SPSLParser.KEYWORD_STATIC, 0); }
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 8, RULE_globalVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_STATIC) {
				{
				State = 227;
				Match(KEYWORD_STATIC);
				_localctx.IsStatic =  true;
				}
			}

			State = 231;
			Match(KEYWORD_CONST);
			State = 232;
			_localctx.Type = dataType();
			State = 233;
			_localctx.Definition = variableDeclarationAssignment();
			State = 234;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableBoolContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(SPSLParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(SPSLParser.BoolLiteral, 0); }
		public PermutationVariableBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableBoolContext permutationVariableBool() {
		PermutationVariableBoolContext _localctx = new PermutationVariableBoolContext(Context, State);
		EnterRule(_localctx, 10, RULE_permutationVariableBool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(KEYWORD_PERMUTATION);
			State = 237;
			Match(TYPE_BOOL);
			State = 238;
			_localctx.Identifier = basicExpression();
			State = 239;
			Match(OP_ASSIGN);
			State = 240;
			_localctx.Value = Match(BoolLiteral);
			State = 241;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableEnumContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public BasicExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ENUM() { return GetToken(SPSLParser.KEYWORD_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext[] basicExpression() {
			return GetRuleContexts<BasicExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression(int i) {
			return GetRuleContext<BasicExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public PermutationVariableEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableEnumContext permutationVariableEnum() {
		PermutationVariableEnumContext _localctx = new PermutationVariableEnumContext(Context, State);
		EnterRule(_localctx, 12, RULE_permutationVariableEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(KEYWORD_PERMUTATION);
			State = 244;
			Match(KEYWORD_ENUM);
			State = 245;
			_localctx.Identifier = basicExpression();
			State = 246;
			Match(TOK_OPEN_BRACE);
			State = 247;
			Match(IDENTIFIER);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 248;
				Match(TOK_COMMA);
				State = 249;
				Match(IDENTIFIER);
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 255;
			Match(TOK_CLOSE_BRACE);
			State = 256;
			Match(OP_ASSIGN);
			State = 257;
			_localctx.Value = basicExpression();
			State = 258;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableIntegerContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(SPSLParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		public PermutationVariableIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableIntegerContext permutationVariableInteger() {
		PermutationVariableIntegerContext _localctx = new PermutationVariableIntegerContext(Context, State);
		EnterRule(_localctx, 14, RULE_permutationVariableInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(KEYWORD_PERMUTATION);
			State = 261;
			Match(TYPE_INT);
			State = 262;
			_localctx.Identifier = basicExpression();
			State = 263;
			Match(OP_ASSIGN);
			State = 264;
			_localctx.Value = Match(IntegerLiteral);
			State = 265;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableBoolContext permutationVariableBool() {
			return GetRuleContext<PermutationVariableBoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableEnumContext permutationVariableEnum() {
			return GetRuleContext<PermutationVariableEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableIntegerContext permutationVariableInteger() {
			return GetRuleContext<PermutationVariableIntegerContext>(0);
		}
		public PermutationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableContext permutationVariable() {
		PermutationVariableContext _localctx = new PermutationVariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_permutationVariable);
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267;
				permutationVariableBool();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268;
				permutationVariableEnum();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 269;
				permutationVariableInteger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumContext : TypeContext {
		public EnumDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumComponentContext[] enumComponent() {
			return GetRuleContexts<EnumComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumComponentContext enumComponent(int i) {
			return GetRuleContext<EnumComponentContext>(i);
		}
		public EnumContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructContext : TypeContext {
		public StructDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructComponentContext[] structComponent() {
			return GetRuleContexts<StructComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructComponentContext structComponent(int i) {
			return GetRuleContext<StructComponentContext>(i);
		}
		public StructContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_type);
		int _la;
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new StructContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 272;
					Match(DOC_COMMENT);
					}
					}
					State = 277;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 278;
				((StructContext)_localctx).Definition = structDefinition();
				State = 279;
				Match(TOK_OPEN_BRACE);
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 18014673387388927L) != 0) || _la==DOC_COMMENT || _la==IDENTIFIER) {
					{
					{
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 280;
						Match(DOC_COMMENT);
						}
						}
						State = 285;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 286;
					structComponent();
					}
					}
					State = 291;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 292;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			case 2:
				_localctx = new EnumContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 294;
					Match(DOC_COMMENT);
					}
					}
					State = 299;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 300;
				((EnumContext)_localctx).Definition = enumDefinition();
				State = 301;
				Match(TOK_OPEN_BRACE);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT || _la==IDENTIFIER) {
					{
					{
					State = 305;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 302;
						Match(DOC_COMMENT);
						}
						}
						State = 307;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 308;
					enumComponent();
					}
					}
					State = 313;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 314;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public IToken Name;
		public NamespacedTypeNameContext ExtendedType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TYPE() { return GetToken(SPSLParser.KEYWORD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STRUCT() { return GetToken(SPSLParser.KEYWORD_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			Match(KEYWORD_TYPE);
			State = 319;
			_localctx.Name = Match(IDENTIFIER);
			State = 320;
			Match(KEYWORD_AS);
			State = 321;
			Match(KEYWORD_STRUCT);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 322;
				Match(KEYWORD_EXTENDS);
				State = 323;
				_localctx.ExtendedType = namespacedTypeName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TYPE() { return GetToken(SPSLParser.KEYWORD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ENUM() { return GetToken(SPSLParser.KEYWORD_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			Match(KEYWORD_TYPE);
			State = 327;
			_localctx.Name = Match(IDENTIFIER);
			State = 328;
			Match(KEYWORD_AS);
			State = 329;
			Match(KEYWORD_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		public InterfaceDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDefinitionContext interfaceDefinition() {
			return GetRuleContext<InterfaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext[] functionHead() {
			return GetRuleContexts<FunctionHeadContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead(int i) {
			return GetRuleContext<FunctionHeadContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_SEMICOLON() { return GetTokens(SPSLParser.TOK_SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON(int i) {
			return GetToken(SPSLParser.TOK_SEMICOLON, i);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 24, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 331;
				Match(DOC_COMMENT);
				}
				}
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 337;
			_localctx.Definition = interfaceDefinition();
			State = 338;
			Match(TOK_OPEN_BRACE);
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 274877906943L) != 0) || _la==DOC_COMMENT || _la==IDENTIFIER) {
				{
				{
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 339;
					Match(DOC_COMMENT);
					}
					}
					State = 344;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 345;
				functionHead();
				State = 346;
				Match(TOK_SEMICOLON);
				}
				}
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 353;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDefinitionContext : ParserRuleContext {
		public IToken Name;
		public InterfacesListContext ExtendedInterfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INTERFACE() { return GetToken(SPSLParser.KEYWORD_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public InterfaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterfaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterfaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefinitionContext interfaceDefinition() {
		InterfaceDefinitionContext _localctx = new InterfaceDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_interfaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(KEYWORD_INTERFACE);
			State = 356;
			_localctx.Name = Match(IDENTIFIER);
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 357;
				Match(KEYWORD_EXTENDS);
				State = 358;
				_localctx.ExtendedInterfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfacesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext[] namespacedTypeName() {
			return GetRuleContexts<NamespacedTypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName(int i) {
			return GetRuleContext<NamespacedTypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public InterfacesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfacesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterfacesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterfacesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfacesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfacesListContext interfacesList() {
		InterfacesListContext _localctx = new InterfacesListContext(Context, State);
		EnterRule(_localctx, 28, RULE_interfacesList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			namespacedTypeName();
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 362;
				Match(TOK_COMMA);
				State = 363;
				namespacedTypeName();
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFragmentContext : ParserRuleContext {
		public ShaderFragmentDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFragmentDefinitionContext shaderFragmentDefinition() {
			return GetRuleContext<ShaderFragmentDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext[] bufferDefinition() {
			return GetRuleContexts<BufferDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext bufferDefinition(int i) {
			return GetRuleContext<BufferDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext[] permutationVariable() {
			return GetRuleContexts<PermutationVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext permutationVariable(int i) {
			return GetRuleContext<PermutationVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext[] globalVariable() {
			return GetRuleContexts<GlobalVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext globalVariable(int i) {
			return GetRuleContext<GlobalVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public ShaderFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFragment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFragment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFragment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFragmentContext shaderFragment() {
		ShaderFragmentContext _localctx = new ShaderFragmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_shaderFragment);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 369;
				Match(DOC_COMMENT);
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 375;
			_localctx.Definition = shaderFragmentDefinition();
			State = 376;
			Match(TOK_OPEN_BRACE);
			State = 386;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 380;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 377;
						Match(DOC_COMMENT);
						}
						}
						State = 382;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 383;
					useDirective();
					}
					} 
				}
				State = 388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611666226681185280L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 72058693549555709L) != 0) || _la==DOC_COMMENT || _la==IDENTIFIER) {
				{
				{
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 389;
						Match(DOC_COMMENT);
						}
						} 
					}
					State = 394;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 400;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 395;
					bufferDefinition();
					}
					break;
				case 2:
					{
					State = 396;
					permutationVariable();
					}
					break;
				case 3:
					{
					State = 397;
					globalVariable();
					}
					break;
				case 4:
					{
					State = 398;
					type();
					}
					break;
				case 5:
					{
					State = 399;
					shaderFunction();
					}
					break;
				}
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 407;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFragmentDefinitionContext : ParserRuleContext {
		public IToken Name;
		public NamespacedTypeNameContext ExtendedFragment;
		public InterfacesListContext ExtendedInterfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FRAGMENT() { return GetToken(SPSLParser.KEYWORD_FRAGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public ShaderFragmentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFragmentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFragmentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFragmentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFragmentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFragmentDefinitionContext shaderFragmentDefinition() {
		ShaderFragmentDefinitionContext _localctx = new ShaderFragmentDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_shaderFragmentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			Match(KEYWORD_FRAGMENT);
			State = 410;
			_localctx.Name = Match(IDENTIFIER);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 411;
				Match(KEYWORD_EXTENDS);
				State = 412;
				_localctx.ExtendedFragment = namespacedTypeName();
				}
			}

			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_IMPLEMENTS) {
				{
				State = 415;
				Match(KEYWORD_IMPLEMENTS);
				State = 416;
				_localctx.ExtendedInterfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderContext : ParserRuleContext {
		public ShaderDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDefinitionContext shaderDefinition() {
			return GetRuleContext<ShaderDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext[] shaderMember() {
			return GetRuleContexts<ShaderMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext shaderMember(int i) {
			return GetRuleContext<ShaderMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public ShaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderContext shader() {
		ShaderContext _localctx = new ShaderContext(Context, State);
		EnterRule(_localctx, 34, RULE_shader);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 419;
				Match(DOC_COMMENT);
				}
				}
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 425;
			_localctx.Definition = shaderDefinition();
			State = 426;
			Match(TOK_OPEN_BRACE);
			State = 436;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 430;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 427;
						Match(DOC_COMMENT);
						}
						}
						State = 432;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 433;
					useDirective();
					}
					} 
				}
				State = 438;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 448;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 442;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 439;
							Match(DOC_COMMENT);
							}
							} 
						}
						State = 444;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
					}
					State = 445;
					shaderMember();
					}
					} 
				}
				State = 450;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 1152921504602652673L) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 17626545782785L) != 0)) {
				{
				{
				State = 454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 451;
					Match(DOC_COMMENT);
					}
					}
					State = 456;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 457;
				shaderFunction();
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 463;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialContext : ParserRuleContext {
		public MaterialDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialDefinitionContext materialDefinition() {
			return GetRuleContext<MaterialDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialMemberContext[] materialMember() {
			return GetRuleContexts<MaterialMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialMemberContext materialMember(int i) {
			return GetRuleContext<MaterialMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public MaterialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_material; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialContext material() {
		MaterialContext _localctx = new MaterialContext(Context, State);
		EnterRule(_localctx, 36, RULE_material);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 465;
				Match(DOC_COMMENT);
				}
				}
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 471;
			_localctx.Definition = materialDefinition();
			State = 472;
			Match(TOK_OPEN_BRACE);
			State = 482;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 476;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 473;
						Match(DOC_COMMENT);
						}
						}
						State = 478;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 479;
					useDirective();
					}
					} 
				}
				State = 484;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 494;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 488;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 485;
							Match(DOC_COMMENT);
							}
							} 
						}
						State = 490;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
					}
					State = 491;
					materialMember();
					}
					} 
				}
				State = 496;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 1152921504602652673L) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & 17626545782785L) != 0)) {
				{
				{
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 497;
					Match(DOC_COMMENT);
					}
					}
					State = 502;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 503;
				shaderFunction();
				}
				}
				State = 508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 509;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialDefinitionContext : ParserRuleContext {
		public bool IsAbstract;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedMaterial;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_MATERIAL() { return GetToken(SPSLParser.KEYWORD_MATERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public MaterialDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialDefinitionContext materialDefinition() {
		MaterialDefinitionContext _localctx = new MaterialDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_materialDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ABSTRACT) {
				{
				State = 511;
				Match(KEYWORD_ABSTRACT);
				_localctx.IsAbstract =  true;
				}
			}

			State = 515;
			Match(KEYWORD_MATERIAL);
			State = 516;
			_localctx.Name = Match(IDENTIFIER);
			State = 519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 517;
				Match(KEYWORD_EXTENDS);
				State = 518;
				_localctx.ExtendedMaterial = namespacedTypeName();
				}
			}

			State = 523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_IMPLEMENTS) {
				{
				State = 521;
				Match(KEYWORD_IMPLEMENTS);
				State = 522;
				_localctx.Interfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderDefinitionContext : ParserRuleContext {
		public bool IsAbstract;
		public ShaderDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderDefinition; } }
	 
		public ShaderDefinitionContext() { }
		public virtual void CopyFrom(ShaderDefinitionContext context) {
			base.CopyFrom(context);
			this.IsAbstract = context.IsAbstract;
		}
	}
	public partial class GenericShaderDefinitionContext : ShaderDefinitionContext {
		public IToken Type;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedShader;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VERTEX() { return GetToken(SPSLParser.KEYWORD_VERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PIXEL() { return GetToken(SPSLParser.KEYWORD_PIXEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_GEOMETRY() { return GetToken(SPSLParser.KEYWORD_GEOMETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_HULL() { return GetToken(SPSLParser.KEYWORD_HULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DOMAIN() { return GetToken(SPSLParser.KEYWORD_DOMAIN, 0); }
		public GenericShaderDefinitionContext(ShaderDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterGenericShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitGenericShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericShaderDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputeShaderDefinitionContext : ShaderDefinitionContext {
		public IToken Type;
		public IToken Name;
		public IToken ThreadCountX;
		public IToken ThreadCountY;
		public IToken ThreadCountZ;
		public NamespacedTypeNameContext ExtendedShader;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_COMPUTE() { return GetToken(SPSLParser.KEYWORD_COMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IntegerLiteral() { return GetTokens(SPSLParser.IntegerLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral(int i) {
			return GetToken(SPSLParser.IntegerLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public ComputeShaderDefinitionContext(ShaderDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterComputeShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitComputeShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputeShaderDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderDefinitionContext shaderDefinition() {
		ShaderDefinitionContext _localctx = new ShaderDefinitionContext(Context, State);
		EnterRule(_localctx, 40, RULE_shaderDefinition);
		int _la;
		try {
			State = 560;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_ABSTRACT:
			case KEYWORD_VERTEX:
			case KEYWORD_PIXEL:
			case KEYWORD_GEOMETRY:
			case KEYWORD_HULL:
			case KEYWORD_DOMAIN:
			case KEYWORD_SHADER:
				_localctx = new GenericShaderDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_ABSTRACT) {
					{
					State = 525;
					Match(KEYWORD_ABSTRACT);
					((GenericShaderDefinitionContext)_localctx).IsAbstract =  true;
					}
				}

				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7995392L) != 0)) {
					{
					State = 529;
					((GenericShaderDefinitionContext)_localctx).Type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7995392L) != 0)) ) {
						((GenericShaderDefinitionContext)_localctx).Type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 532;
				Match(KEYWORD_SHADER);
				State = 533;
				((GenericShaderDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_EXTENDS) {
					{
					State = 534;
					Match(KEYWORD_EXTENDS);
					State = 535;
					((GenericShaderDefinitionContext)_localctx).ExtendedShader = namespacedTypeName();
					}
				}

				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_IMPLEMENTS) {
					{
					State = 538;
					Match(KEYWORD_IMPLEMENTS);
					State = 539;
					((GenericShaderDefinitionContext)_localctx).Interfaces = interfacesList();
					}
				}

				}
				break;
			case KEYWORD_COMPUTE:
				_localctx = new ComputeShaderDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 542;
				((ComputeShaderDefinitionContext)_localctx).Type = Match(KEYWORD_COMPUTE);
				State = 543;
				Match(KEYWORD_SHADER);
				State = 544;
				((ComputeShaderDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 545;
				Match(OP_LESSER_THAN);
				State = 546;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountX = Match(IntegerLiteral);
				State = 547;
				Match(TOK_COMMA);
				State = 548;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountY = Match(IntegerLiteral);
				State = 549;
				Match(TOK_COMMA);
				State = 550;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountZ = Match(IntegerLiteral);
				State = 551;
				Match(OP_GREATER_THAN);
				State = 554;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_EXTENDS) {
					{
					State = 552;
					Match(KEYWORD_EXTENDS);
					State = 553;
					((ComputeShaderDefinitionContext)_localctx).ExtendedShader = namespacedTypeName();
					}
				}

				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_IMPLEMENTS) {
					{
					State = 556;
					Match(KEYWORD_IMPLEMENTS);
					State = 557;
					((ComputeShaderDefinitionContext)_localctx).Interfaces = interfacesList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDirectiveContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_USE() { return GetToken(SPSLParser.KEYWORD_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UseDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUseDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUseDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDirectiveContext useDirective() {
		UseDirectiveContext _localctx = new UseDirectiveContext(Context, State);
		EnterRule(_localctx, 42, RULE_useDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(KEYWORD_USE);
			State = 563;
			_localctx.Name = namespacedTypeName();
			State = 564;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDefinitionContext inputVarDefinition() {
			return GetRuleContext<InputVarDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclarationContext localVarDeclaration() {
			return GetRuleContext<LocalVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext bufferDefinition() {
			return GetRuleContext<BufferDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ShaderMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderMemberContext shaderMember() {
		ShaderMemberContext _localctx = new ShaderMemberContext(Context, State);
		EnterRule(_localctx, 44, RULE_shaderMember);
		try {
			State = 570;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566;
				inputVarDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 567;
				localVarDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 568;
				bufferDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 569;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MaterialParamsContext materialParams() {
			return GetRuleContext<MaterialParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclarationContext localVarDeclaration() {
			return GetRuleContext<LocalVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MaterialMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialMemberContext materialMember() {
		MaterialMemberContext _localctx = new MaterialMemberContext(Context, State);
		EnterRule(_localctx, 46, RULE_materialMember);
		try {
			State = 575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				materialParams();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573;
				localVarDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 574;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_AT() { return GetToken(SPSLParser.TOK_AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext[] constantExpression() {
			return GetRuleContexts<ConstantExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression(int i) {
			return GetRuleContext<ConstantExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 48, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(TOK_AT);
			State = 578;
			_localctx.Name = Match(IDENTIFIER);
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOK_OPEN_PAREN) {
				{
				State = 579;
				Match(TOK_OPEN_PAREN);
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & 127L) != 0)) {
					{
					State = 580;
					constantExpression();
					State = 585;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TOK_COMMA) {
						{
						{
						State = 581;
						Match(TOK_COMMA);
						State = 582;
						constantExpression();
						}
						}
						State = 587;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 590;
				Match(TOK_CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionDirectiveContext precisionDirective() {
			return GetRuleContext<PrecisionDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderLangDirectiveContext shaderLangDirective() {
			return GetRuleContext<ShaderLangDirectiveContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 50, RULE_directive);
		try {
			State = 595;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 593;
				precisionDirective();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 594;
				shaderLangDirective();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public PrecisionDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precisionDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrecisionDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrecisionDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecisionDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionDirectiveContext precisionDirective() {
		PrecisionDirectiveContext _localctx = new PrecisionDirectiveContext(Context, State);
		EnterRule(_localctx, 52, RULE_precisionDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597;
			Match(TOK_HASHTAG);
			State = 598;
			Match(T__0);
			State = 599;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderLangDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public ShaderLangDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderLangDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderLangDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderLangDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderLangDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderLangDirectiveContext shaderLangDirective() {
		ShaderLangDirectiveContext _localctx = new ShaderLangDirectiveContext(Context, State);
		EnterRule(_localctx, 54, RULE_shaderLangDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			Match(TOK_HASHTAG);
			State = 602;
			Match(T__4);
			State = 603;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public ParameterDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParameterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParameterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDirectiveContext parameterDirective() {
		ParameterDirectiveContext _localctx = new ParameterDirectiveContext(Context, State);
		EnterRule(_localctx, 56, RULE_parameterDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(TOK_HASHTAG);
			State = 606;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialParamsContext : ParserRuleContext {
		public bool IsPartial;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PARAMS() { return GetToken(SPSLParser.KEYWORD_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PARTIAL() { return GetToken(SPSLParser.KEYWORD_PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext[] bufferComponent() {
			return GetRuleContexts<BufferComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext bufferComponent(int i) {
			return GetRuleContext<BufferComponentContext>(i);
		}
		public MaterialParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialParamsContext materialParams() {
		MaterialParamsContext _localctx = new MaterialParamsContext(Context, State);
		EnterRule(_localctx, 58, RULE_materialParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 608;
				annotation();
				}
				}
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_PARTIAL) {
				{
				State = 614;
				Match(KEYWORD_PARTIAL);
				_localctx.IsPartial =  true;
				}
			}

			State = 618;
			Match(KEYWORD_PARAMS);
			State = 619;
			_localctx.Name = Match(IDENTIFIER);
			State = 620;
			Match(TOK_OPEN_BRACE);
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 18014673387388927L) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 621;
				bufferComponent();
				}
				}
				State = 626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 627;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVarDefinitionContext : ParserRuleContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INPUT() { return GetToken(SPSLParser.KEYWORD_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public InputVarDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVarDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInputVarDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInputVarDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVarDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVarDefinitionContext inputVarDefinition() {
		InputVarDefinitionContext _localctx = new InputVarDefinitionContext(Context, State);
		EnterRule(_localctx, 60, RULE_inputVarDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 629;
				annotation();
				}
				}
				State = 634;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 635;
			Match(KEYWORD_INPUT);
			State = 636;
			_localctx.Type = dataType();
			State = 637;
			Match(IDENTIFIER);
			State = 642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 638;
				Match(TOK_COMMA);
				State = 639;
				Match(IDENTIFIER);
				}
				}
				State = 644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 645;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarDeclarationContext : ParserRuleContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_LOCAL() { return GetToken(SPSLParser.KEYWORD_LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public LocalVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterLocalVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitLocalVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarDeclarationContext localVarDeclaration() {
		LocalVarDeclarationContext _localctx = new LocalVarDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_localVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 647;
				annotation();
				}
				}
				State = 652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 653;
			Match(KEYWORD_LOCAL);
			State = 654;
			_localctx.Type = dataType();
			State = 655;
			Match(IDENTIFIER);
			State = 660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 656;
				Match(TOK_COMMA);
				State = 657;
				Match(IDENTIFIER);
				}
				}
				State = 662;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 663;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferDefinitionContext : ParserRuleContext {
		public IToken Storage;
		public IToken Access;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BUFFER() { return GetToken(SPSLParser.KEYWORD_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext[] bufferComponent() {
			return GetRuleContexts<BufferComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext bufferComponent(int i) {
			return GetRuleContext<BufferComponentContext>(i);
		}
		public BufferDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBufferDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferDefinitionContext bufferDefinition() {
		BufferDefinitionContext _localctx = new BufferDefinitionContext(Context, State);
		EnterRule(_localctx, 64, RULE_bufferDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 665;
				annotation();
				}
				}
				State = 670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 671;
				_localctx.Storage = Match(T__9);
				}
			}

			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) {
				{
				State = 674;
				_localctx.Access = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) ) {
					_localctx.Access = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 677;
			Match(KEYWORD_BUFFER);
			State = 678;
			_localctx.Name = Match(IDENTIFIER);
			State = 679;
			Match(TOK_OPEN_BRACE);
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 18014673387388927L) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 680;
				bufferComponent();
				}
				}
				State = 685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 686;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferComponentContext : ParserRuleContext {
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public BufferComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBufferComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBufferComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBufferComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferComponentContext bufferComponent() {
		BufferComponentContext _localctx = new BufferComponentContext(Context, State);
		EnterRule(_localctx, 66, RULE_bufferComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 688;
				annotation();
				}
				}
				State = 693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 694;
			_localctx.Type = dataType();
			State = 695;
			_localctx.Name = Match(IDENTIFIER);
			State = 696;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructComponentContext : ParserRuleContext {
		public StructComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structComponent; } }
	 
		public StructComponentContext() { }
		public virtual void CopyFrom(StructComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructPropertyContext : StructComponentContext {
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StructPropertyContext(StructComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructFunctionContext : StructComponentContext {
		public FunctionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StructFunctionContext(StructComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructComponentContext structComponent() {
		StructComponentContext _localctx = new StructComponentContext(Context, State);
		EnterRule(_localctx, 68, RULE_structComponent);
		int _la;
		try {
			State = 715;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				_localctx = new StructPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 698;
					annotation();
					}
					}
					State = 703;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 704;
				((StructPropertyContext)_localctx).Type = dataType();
				State = 705;
				((StructPropertyContext)_localctx).Name = Match(IDENTIFIER);
				State = 706;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				_localctx = new StructFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 708;
					annotation();
					}
					}
					State = 713;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 714;
				((StructFunctionContext)_localctx).Function = function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumComponentContext : ParserRuleContext {
		public IToken Name;
		public ConstantExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA() { return GetToken(SPSLParser.TOK_COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnumComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnumComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumComponentContext enumComponent() {
		EnumComponentContext _localctx = new EnumComponentContext(Context, State);
		EnterRule(_localctx, 70, RULE_enumComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			_localctx.Name = Match(IDENTIFIER);
			State = 720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASSIGN) {
				{
				State = 718;
				Match(OP_ASSIGN);
				State = 719;
				_localctx.Value = constantExpression();
				}
			}

			State = 722;
			Match(TOK_COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public bool IsConst;
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	 
		public VariableDeclarationContext() { }
		public virtual void CopyFrom(VariableDeclarationContext context) {
			base.CopyFrom(context);
			this.IsConst = context.IsConst;
		}
	}
	public partial class UntypedVariableDeclarationContext : VariableDeclarationContext {
		public VariableDeclarationAssignmentContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VAR() { return GetToken(SPSLParser.KEYWORD_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public UntypedVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUntypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUntypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedVariableDeclarationContext : VariableDeclarationContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentityContext[] variableIdentity() {
			return GetRuleContexts<VariableIdentityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentityContext variableIdentity(int i) {
			return GetRuleContext<VariableIdentityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public TypedVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_variableDeclaration);
		int _la;
		try {
			State = 739;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_CONST:
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
			case IDENTIFIER:
				_localctx = new TypedVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_CONST) {
					{
					State = 724;
					Match(KEYWORD_CONST);
					((TypedVariableDeclarationContext)_localctx).IsConst =  true;
					}
				}

				State = 728;
				((TypedVariableDeclarationContext)_localctx).Type = dataType();
				State = 729;
				variableIdentity();
				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_COMMA) {
					{
					{
					State = 730;
					Match(TOK_COMMA);
					State = 731;
					variableIdentity();
					}
					}
					State = 736;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case KEYWORD_VAR:
				_localctx = new UntypedVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 737;
				Match(KEYWORD_VAR);
				State = 738;
				((UntypedVariableDeclarationContext)_localctx).Declaration = variableDeclarationAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationAssignmentContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public VariableDeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
		VariableDeclarationAssignmentContext _localctx = new VariableDeclarationAssignmentContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableDeclarationAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			_localctx.Identifier = basicExpression();
			State = 742;
			Match(OP_ASSIGN);
			State = 743;
			_localctx.Expression = expressionStatement(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableIdentityContext : ParserRuleContext {
		public bool IsAssignment;
		public BasicExpressionContext Identifier;
		public VariableDeclarationAssignmentContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public VariableIdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableIdentity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterVariableIdentity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitVariableIdentity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableIdentityContext variableIdentity() {
		VariableIdentityContext _localctx = new VariableIdentityContext(Context, State);
		EnterRule(_localctx, 76, RULE_variableIdentity);
		try {
			State = 749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745;
				_localctx.Identifier = basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 746;
				_localctx.Declaration = variableDeclarationAssignment();
				_localctx.IsAssignment =  true;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFunctionContext : ParserRuleContext {
		public bool IsOverride;
		public FunctionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OVERRIDE() { return GetToken(SPSLParser.KEYWORD_OVERRIDE, 0); }
		public ShaderFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFunctionContext shaderFunction() {
		ShaderFunctionContext _localctx = new ShaderFunctionContext(Context, State);
		EnterRule(_localctx, 78, RULE_shaderFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 751;
				annotation();
				}
				}
				State = 756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_OVERRIDE) {
				{
				State = 757;
				Match(KEYWORD_OVERRIDE);
				_localctx.IsOverride =  true;
				}
			}

			State = 761;
			_localctx.Function = function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctionHeadContext Head;
		public FunctionBodyContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 80, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			_localctx.Head = functionHead();
			State = 764;
			Match(TOK_OPEN_BRACE);
			State = 765;
			_localctx.Body = functionBody();
			State = 766;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		public DataTypeContext Type;
		public IToken Name;
		public FunctionSignatureContext Signature;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 82, RULE_functionHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 768;
				_localctx.Type = dataType();
				}
				break;
			}
			State = 771;
			_localctx.Name = Match(IDENTIFIER);
			State = 772;
			_localctx.Signature = functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public ArgListContext Arguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 84, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 774;
			Match(TOK_OPEN_PAREN);
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372008937488384L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 274877906943L) != 0) || _la==IDENTIFIER) {
				{
				State = 775;
				_localctx.Arguments = argList();
				}
			}

			State = 778;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgDefContext[] argDef() {
			return GetRuleContexts<ArgDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgDefContext argDef(int i) {
			return GetRuleContext<ArgDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 86, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			argDef();
			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 781;
				Match(TOK_COMMA);
				State = 782;
				argDef();
				}
				}
				State = 787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefContext : ParserRuleContext {
		public IToken Flow;
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IN() { return GetToken(SPSLParser.KEYWORD_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OUT() { return GetToken(SPSLParser.KEYWORD_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INOUT() { return GetToken(SPSLParser.KEYWORD_INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		public ArgDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArgDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArgDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefContext argDef() {
		ArgDefContext _localctx = new ArgDefContext(Context, State);
		EnterRule(_localctx, 88, RULE_argDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372008937488384L) != 0)) {
				{
				State = 788;
				_localctx.Flow = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372008937488384L) != 0)) ) {
					_localctx.Flow = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 791;
			_localctx.Type = dataType();
			State = 792;
			_localctx.Name = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public ReturnStatementContext ReturnStatement;
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext[] stayControlFlowStatement() {
			return GetRuleContexts<StayControlFlowStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement(int i) {
			return GetRuleContext<StayControlFlowStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 90, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & -100167295L) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 9151314545908648007L) != 0)) {
				{
				{
				State = 794;
				stayControlFlowStatement();
				}
				}
				State = 799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 801;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_RETURN) {
				{
				State = 800;
				_localctx.ReturnStatement = returnStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 92, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			Match(TOK_OPEN_BRACE);
			State = 807;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & -96495231L) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 9151314545908648007L) != 0)) {
				{
				{
				State = 804;
				statement();
				}
				}
				State = 809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 810;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		public ReferencableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterReferencableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitReferencableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferencableExpressionContext referencableExpression() {
		ReferencableExpressionContext _localctx = new ReferencableExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_referencableExpression);
		try {
			State = 818;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 812;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 813;
				parenthesizedExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 814;
				invocationExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 815;
				propertyMemberReferenceExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 816;
				methodMemberReferenceExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 817;
				arrayAccessExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		public ChainableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableExpressionContext chainableExpression() {
		ChainableExpressionContext _localctx = new ChainableExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_chainableExpression);
		try {
			State = 823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 820;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 821;
				invocationExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 822;
				arrayAccessExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainedExpressionContext : ParserRuleContext {
		public ReferencableExpressionContext Target;
		[System.Diagnostics.DebuggerNonUserCode] public ReferencableExpressionContext referencableExpression() {
			return GetRuleContext<ReferencableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_DOT() { return GetTokens(SPSLParser.TOK_DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT(int i) {
			return GetToken(SPSLParser.TOK_DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableExpressionContext[] chainableExpression() {
			return GetRuleContexts<ChainableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableExpressionContext chainableExpression(int i) {
			return GetRuleContext<ChainableExpressionContext>(i);
		}
		public ChainedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainedExpressionContext chainedExpression() {
		ChainedExpressionContext _localctx = new ChainedExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_chainedExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			_localctx.Target = referencableExpression();
			State = 828;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 826;
					Match(TOK_DOT);
					State = 827;
					chainableExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 830;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableChainableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		public AssignableChainableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableChainableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableChainableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableChainableExpressionContext assignableChainableExpression() {
		AssignableChainableExpressionContext _localctx = new AssignableChainableExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_assignableChainableExpression);
		try {
			State = 834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 832;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 833;
				arrayAccessExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableChainedExpressionContext : ParserRuleContext {
		public ReferencableExpressionContext Target;
		[System.Diagnostics.DebuggerNonUserCode] public ReferencableExpressionContext referencableExpression() {
			return GetRuleContext<ReferencableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_DOT() { return GetTokens(SPSLParser.TOK_DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT(int i) {
			return GetToken(SPSLParser.TOK_DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainableExpressionContext[] assignableChainableExpression() {
			return GetRuleContexts<AssignableChainableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainableExpressionContext assignableChainableExpression(int i) {
			return GetRuleContext<AssignableChainableExpressionContext>(i);
		}
		public AssignableChainedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableChainedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableChainedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableChainedExpressionContext assignableChainedExpression() {
		AssignableChainedExpressionContext _localctx = new AssignableChainedExpressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_assignableChainedExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			_localctx.Target = referencableExpression();
			State = 839;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 837;
					Match(TOK_DOT);
					State = 838;
					assignableChainableExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 841;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberReferenceExpressionContext : ParserRuleContext {
		public IToken Target;
		public BasicExpressionContext Member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT() { return GetToken(SPSLParser.TOK_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public PropertyMemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPropertyMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPropertyMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
		PropertyMemberReferenceExpressionContext _localctx = new PropertyMemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_propertyMemberReferenceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			_localctx.Target = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE || _la==IDENTIFIER) ) {
				_localctx.Target = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 844;
			Match(TOK_DOT);
			State = 845;
			_localctx.Member = basicExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodMemberReferenceExpressionContext : ParserRuleContext {
		public IToken Target;
		public InvocationExpressionContext Member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT() { return GetToken(SPSLParser.TOK_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public MethodMemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodMemberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMethodMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMethodMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
		MethodMemberReferenceExpressionContext _localctx = new MethodMemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_methodMemberReferenceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			_localctx.Target = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE || _la==IDENTIFIER) ) {
				_localctx.Target = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 848;
			Match(TOK_DOT);
			State = 849;
			_localctx.Member = invocationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberReferenceExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		public MemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberReferenceExpressionContext memberReferenceExpression() {
		MemberReferenceExpressionContext _localctx = new MemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_memberReferenceExpression);
		try {
			State = 853;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 851;
				propertyMemberReferenceExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 852;
				methodMemberReferenceExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationExpressionContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		public ParametersListContext Parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersListContext parametersList() {
			return GetRuleContext<ParametersListContext>(0);
		}
		public InvocationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationExpressionContext invocationExpression() {
		InvocationExpressionContext _localctx = new InvocationExpressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_invocationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 855;
			_localctx.Name = namespacedTypeName();
			State = 856;
			Match(TOK_OPEN_PAREN);
			State = 858;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 1152921504604749827L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 4468415305619457L) != 0)) {
				{
				State = 857;
				_localctx.Parameters = parametersList();
				}
			}

			State = 860;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermuteStatementContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public IToken Operator;
		public ConstantExpressionContext Value;
		public StatementBlockContext Block;
		public ElseStatementContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTE() { return GetToken(SPSLParser.KEYWORD_PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(SPSLParser.OP_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GEQ_THAN() { return GetToken(SPSLParser.OP_GEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEQ_THAN() { return GetToken(SPSLParser.OP_LEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIFFERENT() { return GetToken(SPSLParser.OP_DIFFERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public PermuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permuteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermuteStatementContext permuteStatement() {
		PermuteStatementContext _localctx = new PermuteStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_permuteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(KEYWORD_PERMUTE);
			State = 863;
			Match(TOK_OPEN_PAREN);
			State = 864;
			_localctx.Identifier = basicExpression();
			State = 865;
			_localctx.Operator = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & 63L) != 0)) ) {
				_localctx.Operator = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 866;
			_localctx.Value = constantExpression();
			State = 867;
			Match(TOK_CLOSE_PAREN);
			State = 868;
			_localctx.Block = statementBlock();
			State = 870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 869;
				_localctx.Else = elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		public ElseStatementContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(SPSLParser.KEYWORD_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifStatementContext[] elifStatement() {
			return GetRuleContexts<ElifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifStatementContext elifStatement(int i) {
			return GetRuleContext<ElifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			Match(KEYWORD_IF);
			State = 873;
			Match(TOK_OPEN_PAREN);
			State = 874;
			_localctx.Expression = expressionStatement(0);
			State = 875;
			Match(TOK_CLOSE_PAREN);
			State = 876;
			_localctx.Block = statementBlock();
			State = 880;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 877;
					elifStatement();
					}
					} 
				}
				State = 882;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			}
			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 883;
				_localctx.Else = elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELIF() { return GetToken(SPSLParser.KEYWORD_ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(SPSLParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(SPSLParser.KEYWORD_IF, 0); }
		public ElifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifStatementContext elifStatement() {
		ElifStatementContext _localctx = new ElifStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_elifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_ELIF:
				{
				State = 886;
				Match(KEYWORD_ELIF);
				}
				break;
			case KEYWORD_ELSE:
				{
				State = 887;
				Match(KEYWORD_ELSE);
				State = 888;
				Match(KEYWORD_IF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 891;
			Match(TOK_OPEN_PAREN);
			State = 892;
			_localctx.Expression = expressionStatement(0);
			State = 893;
			Match(TOK_CLOSE_PAREN);
			State = 894;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(SPSLParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896;
			Match(KEYWORD_ELSE);
			State = 897;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SWITCH() { return GetToken(SPSLParser.KEYWORD_SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			Match(KEYWORD_SWITCH);
			State = 900;
			Match(TOK_OPEN_PAREN);
			State = 901;
			_localctx.Expression = expressionStatement(0);
			State = 902;
			Match(TOK_CLOSE_PAREN);
			State = 903;
			Match(TOK_OPEN_BRACE);
			State = 907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEYWORD_CASE) {
				{
				{
				State = 904;
				caseStatement();
				}
				}
				State = 909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 910;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public ConstantExpressionContext Expression;
		public StayControlFlowStatementContext Statements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CASE() { return GetToken(SPSLParser.KEYWORD_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COLON() { return GetToken(SPSLParser.TOK_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeaveControlFlowStatementContext leaveControlFlowStatement() {
			return GetRuleContext<LeaveControlFlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext[] stayControlFlowStatement() {
			return GetRuleContexts<StayControlFlowStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement(int i) {
			return GetRuleContext<StayControlFlowStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			Match(KEYWORD_CASE);
			State = 913;
			_localctx.Expression = constantExpression();
			State = 914;
			Match(TOK_COLON);
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 915;
				Match(TOK_OPEN_BRACE);
				}
				break;
			}
			State = 921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & -100167295L) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 9151314545908648007L) != 0)) {
				{
				{
				State = 918;
				_localctx.Statements = stayControlFlowStatement();
				}
				}
				State = 923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 924;
			leaveControlFlowStatement();
			State = 926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 925;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(SPSLParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			Match(KEYWORD_WHILE);
			State = 929;
			Match(TOK_OPEN_PAREN);
			State = 930;
			_localctx.Expression = expressionStatement(0);
			State = 931;
			Match(TOK_CLOSE_PAREN);
			State = 932;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ExpressionStatementContext Initialization;
		public ExpressionStatementContext Condition;
		public ExpressionStatementContext Iteration;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FOR() { return GetToken(SPSLParser.KEYWORD_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_SEMICOLON() { return GetTokens(SPSLParser.TOK_SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON(int i) {
			return GetToken(SPSLParser.TOK_SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 934;
			Match(KEYWORD_FOR);
			State = 935;
			Match(TOK_OPEN_PAREN);
			State = 936;
			_localctx.Initialization = expressionStatement(0);
			State = 937;
			Match(TOK_SEMICOLON);
			State = 938;
			_localctx.Condition = expressionStatement(0);
			State = 939;
			Match(TOK_SEMICOLON);
			State = 940;
			_localctx.Iteration = expressionStatement(0);
			State = 941;
			Match(TOK_CLOSE_PAREN);
			State = 942;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		public StatementBlockContext Block;
		public ParenthesizedExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DO() { return GetToken(SPSLParser.KEYWORD_DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(SPSLParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			Match(KEYWORD_DO);
			State = 945;
			_localctx.Block = statementBlock();
			State = 946;
			Match(KEYWORD_WHILE);
			State = 947;
			_localctx.Expression = parenthesizedExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_parenthesizedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			Match(TOK_OPEN_PAREN);
			State = 950;
			_localctx.Expression = expressionStatement(0);
			State = 951;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceExpressionContext : ParserRuleContext {
		public DataTypeContext Type;
		public ParametersListContext Parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersListContext parametersList() {
			return GetRuleContext<ParametersListContext>(0);
		}
		public NewInstanceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstanceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstanceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceExpressionContext newInstanceExpression() {
		NewInstanceExpressionContext _localctx = new NewInstanceExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_newInstanceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			_localctx.Type = dataType();
			State = 954;
			Match(TOK_OPEN_PAREN);
			State = 956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & 1152921504604749827L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 4468415305619457L) != 0)) {
				{
				State = 955;
				_localctx.Parameters = parametersList();
				}
			}

			State = 958;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public ParametersListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParametersList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParametersList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersListContext parametersList() {
		ParametersListContext _localctx = new ParametersListContext(Context, State);
		EnterRule(_localctx, 134, RULE_parametersList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960;
			expressionStatement(0);
			State = 965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 961;
				Match(TOK_COMMA);
				State = 962;
				expressionStatement(0);
				}
				}
				State = 967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextAccessExpressionContext : ParserRuleContext {
		public IToken Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		public ContextAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterContextAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitContextAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextAccessExpressionContext contextAccessExpression() {
		ContextAccessExpressionContext _localctx = new ContextAccessExpressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_contextAccessExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968;
			_localctx.Identifier = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE) ) {
				_localctx.Identifier = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicExpressionContext : ParserRuleContext {
		public IToken Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public BasicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBasicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBasicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicExpressionContext basicExpression() {
		BasicExpressionContext _localctx = new BasicExpressionContext(Context, State);
		EnterRule(_localctx, 138, RULE_basicExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 970;
			_localctx.Identifier = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
	 
		public ExpressionStatementContext() { }
		public virtual void CopyFrom(ExpressionStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixUnaryOperationExpressionContext : ExpressionStatementContext {
		public AssignableExpressionContext Expression;
		public IToken Operator;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INCREMENT() { return GetToken(SPSLParser.OP_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DECREMENT() { return GetToken(SPSLParser.OP_DECREMENT, 0); }
		public PostfixUnaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPostfixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPostfixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionStatementContext {
		public AssignableExpressionContext Left;
		public IToken Operator;
		public ExpressionStatementContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS_ASSIGN() { return GetToken(SPSLParser.OP_PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS_ASSIGN() { return GetToken(SPSLParser.OP_MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL_ASSIGN() { return GetToken(SPSLParser.OP_MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGN() { return GetToken(SPSLParser.OP_DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MODULUS_ASSIGN() { return GetToken(SPSLParser.OP_MODULUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_OR_ASSIGN() { return GetToken(SPSLParser.OP_BITWISE_OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_AND_ASSIGN() { return GetToken(SPSLParser.OP_BITWISE_AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EXPONENT_ASSIGN() { return GetToken(SPSLParser.OP_EXPONENT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT_ASSIGN() { return GetToken(SPSLParser.OP_LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT_ASSIGN() { return GetToken(SPSLParser.OP_RSHIFT_ASSIGN, 0); }
		public AssignmentExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Condition;
		public ExpressionStatementContext WhenTrue;
		public ExpressionStatementContext WhenFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_QUESTION() { return GetToken(SPSLParser.TOK_QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COLON() { return GetToken(SPSLParser.TOK_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		public TernaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTernaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTernaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContext : ExpressionStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberReferenceExpressionContext memberReferenceExpression() {
			return GetRuleContext<MemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainedExpressionContext chainedExpression() {
			return GetRuleContext<ChainedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceExpressionContext newInstanceExpression() {
			return GetRuleContext<NewInstanceExpressionContext>(0);
		}
		public ExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Left;
		public IToken Operator;
		public ExpressionStatementContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEQ_THAN() { return GetToken(SPSLParser.OP_LEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GEQ_THAN() { return GetToken(SPSLParser.OP_GEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(SPSLParser.OP_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIFFERENT() { return GetToken(SPSLParser.OP_DIFFERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS() { return GetToken(SPSLParser.OP_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS() { return GetToken(SPSLParser.OP_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(SPSLParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MODULUS() { return GetToken(SPSLParser.OP_MODULUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASTERISK() { return GetToken(SPSLParser.OP_ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PIPE() { return GetToken(SPSLParser.OP_PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AMPERSAND() { return GetToken(SPSLParser.OP_AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EXPONENT() { return GetToken(SPSLParser.OP_EXPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT() { return GetToken(SPSLParser.OP_LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT() { return GetToken(SPSLParser.OP_RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(SPSLParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(SPSLParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(SPSLParser.OP_XOR, 0); }
		public BinaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBinaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBinaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixUnaryOperationExpressionContext : ExpressionStatementContext {
		public IToken Operator;
		public AssignableExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INCREMENT() { return GetToken(SPSLParser.OP_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DECREMENT() { return GetToken(SPSLParser.OP_DECREMENT, 0); }
		public PrefixUnaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrefixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrefixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_EXCLAMATION() { return GetToken(SPSLParser.TOK_EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public NegateOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNegateOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNegateOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionStatementContext {
		public DataTypeContext Type;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public CastExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SignedExpressionContext : ExpressionStatementContext {
		public IToken Operator;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS() { return GetToken(SPSLParser.OP_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS() { return GetToken(SPSLParser.OP_PLUS, 0); }
		public SignedExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSignedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSignedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		return expressionStatement(0);
	}

	private ExpressionStatementContext expressionStatement(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, _parentState);
		ExpressionStatementContext _prevctx = _localctx;
		int _startState = 140;
		EnterRecursionRule(_localctx, 140, RULE_expressionStatement, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 973;
				basicExpression();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 974;
				parenthesizedExpression();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 975;
				primitiveExpression();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 976;
				constantExpression();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 977;
				memberReferenceExpression();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 978;
				chainedExpression();
				}
				break;
			case 7:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 979;
				invocationExpression();
				}
				break;
			case 8:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 980;
				arrayAccessExpression();
				}
				break;
			case 9:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 981;
				newInstanceExpression();
				}
				break;
			case 10:
				{
				_localctx = new NegateOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 982;
				Match(TOK_EXCLAMATION);
				State = 983;
				((NegateOperationExpressionContext)_localctx).Expression = expressionStatement(36);
				}
				break;
			case 11:
				{
				_localctx = new PostfixUnaryOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 984;
				((PostfixUnaryOperationExpressionContext)_localctx).Expression = assignableExpression();
				State = 985;
				((PostfixUnaryOperationExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_INCREMENT || _la==OP_DECREMENT) ) {
					((PostfixUnaryOperationExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				{
				_localctx = new PrefixUnaryOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 987;
				((PrefixUnaryOperationExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_INCREMENT || _la==OP_DECREMENT) ) {
					((PrefixUnaryOperationExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 988;
				((PrefixUnaryOperationExpressionContext)_localctx).Expression = assignableExpression();
				}
				break;
			case 13:
				{
				_localctx = new SignedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 989;
				((SignedExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_PLUS || _la==OP_MINUS) ) {
					((SignedExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 990;
				((SignedExpressionContext)_localctx).Expression = expressionStatement(33);
				}
				break;
			case 14:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 991;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 992;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_ASSIGN);
				State = 993;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(12);
				}
				break;
			case 15:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 995;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 996;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_PLUS_ASSIGN);
				State = 997;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(11);
				}
				break;
			case 16:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 999;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1000;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MINUS_ASSIGN);
				State = 1001;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(10);
				}
				break;
			case 17:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1003;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1004;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MUL_ASSIGN);
				State = 1005;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(9);
				}
				break;
			case 18:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1007;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1008;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_DIV_ASSIGN);
				State = 1009;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(8);
				}
				break;
			case 19:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1011;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1012;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MODULUS_ASSIGN);
				State = 1013;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(7);
				}
				break;
			case 20:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1015;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1016;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_BITWISE_OR_ASSIGN);
				State = 1017;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(6);
				}
				break;
			case 21:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1019;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1020;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_BITWISE_AND_ASSIGN);
				State = 1021;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(5);
				}
				break;
			case 22:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1023;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1024;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_EXPONENT_ASSIGN);
				State = 1025;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(4);
				}
				break;
			case 23:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1027;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1028;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_LSHIFT_ASSIGN);
				State = 1029;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(3);
				}
				break;
			case 24:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1031;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1032;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_RSHIFT_ASSIGN);
				State = 1033;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(2);
				}
				break;
			case 25:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1035;
				Match(TOK_OPEN_PAREN);
				State = 1036;
				((CastExpressionContext)_localctx).Type = dataType();
				State = 1037;
				Match(TOK_CLOSE_PAREN);
				State = 1038;
				((CastExpressionContext)_localctx).Expression = expressionStatement(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1107;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1105;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
					case 1:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1042;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1043;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LEQ_THAN);
						State = 1044;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(33);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1045;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1046;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_GEQ_THAN);
						State = 1047;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(32);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1048;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1049;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LESSER_THAN);
						State = 1050;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(31);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1051;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1052;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_GREATER_THAN);
						State = 1053;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(30);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1054;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1055;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_EQUAL);
						State = 1056;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(29);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1057;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1058;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_DIFFERENT);
						State = 1059;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(28);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1060;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1061;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_PLUS);
						State = 1062;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(27);
						}
						break;
					case 8:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1063;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1064;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_MINUS);
						State = 1065;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(26);
						}
						break;
					case 9:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1066;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1067;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_DIV);
						State = 1068;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(25);
						}
						break;
					case 10:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1069;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1070;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_MODULUS);
						State = 1071;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(24);
						}
						break;
					case 11:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1072;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1073;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_ASTERISK);
						State = 1074;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(23);
						}
						break;
					case 12:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1075;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1076;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_PIPE);
						State = 1077;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(22);
						}
						break;
					case 13:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1078;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1079;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_AMPERSAND);
						State = 1080;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(21);
						}
						break;
					case 14:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1081;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1082;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_EXPONENT);
						State = 1083;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(19);
						}
						break;
					case 15:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1084;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1085;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LSHIFT);
						State = 1086;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(18);
						}
						break;
					case 16:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1087;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1088;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_RSHIFT);
						State = 1089;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(17);
						}
						break;
					case 17:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1090;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1091;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_AND);
						State = 1092;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(17);
						}
						break;
					case 18:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1093;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1094;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_OR);
						State = 1095;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(16);
						}
						break;
					case 19:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1096;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1097;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_XOR);
						State = 1098;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(15);
						}
						break;
					case 20:
						{
						_localctx = new TernaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((TernaryOperationExpressionContext)_localctx).Condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1099;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1100;
						Match(TOK_QUESTION);
						State = 1101;
						((TernaryOperationExpressionContext)_localctx).WhenTrue = expressionStatement(0);
						State = 1102;
						Match(TOK_COLON);
						State = 1103;
						((TernaryOperationExpressionContext)_localctx).WhenFalse = expressionStatement(13);
						}
						break;
					}
					} 
				}
				State = 1109;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayAccessExpressionContext : ParserRuleContext {
		public ExpressionStatementContext Index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberReferenceExpressionContext memberReferenceExpression() {
			return GetRuleContext<MemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		public ArrayAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessExpressionContext arrayAccessExpression() {
		ArrayAccessExpressionContext _localctx = new ArrayAccessExpressionContext(Context, State);
		EnterRule(_localctx, 142, RULE_arrayAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 1110;
				basicExpression();
				}
				break;
			case 2:
				{
				State = 1111;
				memberReferenceExpression();
				}
				break;
			case 3:
				{
				State = 1112;
				invocationExpression();
				}
				break;
			}
			State = 1115;
			Match(TOK_OPEN_BRACKET);
			State = 1116;
			_localctx.Index = expressionStatement(0);
			State = 1117;
			Match(TOK_CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainedExpressionContext assignableChainedExpression() {
			return GetRuleContext<AssignableChainedExpressionContext>(0);
		}
		public AssignableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableExpressionContext assignableExpression() {
		AssignableExpressionContext _localctx = new AssignableExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_assignableExpression);
		try {
			State = 1123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1119;
				arrayAccessExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1120;
				basicExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1121;
				propertyMemberReferenceExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1122;
				assignableChainedExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_RETURN() { return GetToken(SPSLParser.KEYWORD_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			Match(KEYWORD_RETURN);
			State = 1126;
			_localctx.Expression = expressionStatement(0);
			State = 1127;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BREAK() { return GetToken(SPSLParser.KEYWORD_BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 148, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129;
			Match(KEYWORD_BREAK);
			State = 1130;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONTINUE() { return GetToken(SPSLParser.KEYWORD_CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132;
			Match(KEYWORD_CONTINUE);
			State = 1133;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DISCARD() { return GetToken(SPSLParser.KEYWORD_DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public DiscardStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDiscardStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDiscardStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiscardStatementContext discardStatement() {
		DiscardStatementContext _localctx = new DiscardStatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_discardStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1135;
			Match(KEYWORD_DISCARD);
			State = 1136;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveControlFlowStatementContext : ParserRuleContext {
		public BreakStatementContext BreakStatement;
		public ReturnStatementContext ReturnStatement;
		public ContinueStatementContext ContinueStatement;
		public DiscardStatementContext DiscardStatement;
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardStatementContext discardStatement() {
			return GetRuleContext<DiscardStatementContext>(0);
		}
		public LeaveControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveControlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterLeaveControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitLeaveControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveControlFlowStatementContext leaveControlFlowStatement() {
		LeaveControlFlowStatementContext _localctx = new LeaveControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_leaveControlFlowStatement);
		try {
			State = 1142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1138;
				_localctx.BreakStatement = breakStatement();
				}
				break;
			case KEYWORD_RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1139;
				_localctx.ReturnStatement = returnStatement();
				}
				break;
			case KEYWORD_CONTINUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1140;
				_localctx.ContinueStatement = continueStatement();
				}
				break;
			case KEYWORD_DISCARD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1141;
				_localctx.DiscardStatement = discardStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StayControlFlowStatementContext : ParserRuleContext {
		public VariableDeclarationContext VariableDeclaration;
		public ExpressionStatementContext ExpressionStatement;
		public StatementBlockContext StatementBlock;
		public IfStatementContext IfStatement;
		public SwitchStatementContext SwitchStatement;
		public WhileStatementContext WhileStatement;
		public ForStatementContext ForStatement;
		public DoWhileStatementContext DoWhileStatement;
		public PermuteStatementContext PermuteStatement;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermuteStatementContext permuteStatement() {
			return GetRuleContext<PermuteStatementContext>(0);
		}
		public StayControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stayControlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStayControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStayControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStayControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StayControlFlowStatementContext stayControlFlowStatement() {
		StayControlFlowStatementContext _localctx = new StayControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_stayControlFlowStatement);
		try {
			State = 1157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1144;
				_localctx.VariableDeclaration = variableDeclaration();
				State = 1145;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1147;
				_localctx.ExpressionStatement = expressionStatement(0);
				State = 1148;
				Match(TOK_SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1150;
				_localctx.StatementBlock = statementBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1151;
				_localctx.IfStatement = ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1152;
				_localctx.SwitchStatement = switchStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1153;
				_localctx.WhileStatement = whileStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1154;
				_localctx.ForStatement = forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1155;
				_localctx.DoWhileStatement = doWhileStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1156;
				_localctx.PermuteStatement = permuteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StayControlFlowStatementContext StayControlFlowStatement;
		public LeaveControlFlowStatementContext LeaveControlFlowStatement;
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement() {
			return GetRuleContext<StayControlFlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveControlFlowStatementContext leaveControlFlowStatement() {
			return GetRuleContext<LeaveControlFlowStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_statement);
		try {
			State = 1161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_VAR:
			case KEYWORD_THIS:
			case KEYWORD_BASE:
			case KEYWORD_IF:
			case KEYWORD_SWITCH:
			case KEYWORD_FOR:
			case KEYWORD_DO:
			case KEYWORD_WHILE:
			case KEYWORD_CONST:
			case KEYWORD_PERMUTE:
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
			case TOK_OPEN_PAREN:
			case TOK_OPEN_BRACE:
			case TOK_EXCLAMATION:
			case OP_PLUS:
			case OP_MINUS:
			case OP_INCREMENT:
			case OP_DECREMENT:
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1159;
				_localctx.StayControlFlowStatement = stayControlFlowStatement();
				}
				break;
			case KEYWORD_RETURN:
			case KEYWORD_BREAK:
			case KEYWORD_CONTINUE:
			case KEYWORD_DISCARD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1160;
				_localctx.LeaveControlFlowStatement = leaveControlFlowStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		public IToken Literal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(SPSLParser.BoolLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleLiteral() { return GetToken(SPSLParser.DoubleLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatLiteral() { return GetToken(SPSLParser.FloatLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnsignedIntegerLiteral() { return GetToken(SPSLParser.UnsignedIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SPSLParser.StringLiteral, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_primitiveExpression);
		try {
			State = 1169;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1163;
				_localctx.Literal = Match(BoolLiteral);
				}
				break;
			case DoubleLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1164;
				_localctx.Literal = Match(DoubleLiteral);
				}
				break;
			case FloatLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1165;
				_localctx.Literal = Match(FloatLiteral);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1166;
				_localctx.Literal = Match(IntegerLiteral);
				}
				break;
			case UnsignedIntegerLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1167;
				_localctx.Literal = Match(UnsignedIntegerLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1168;
				_localctx.Literal = Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
	 
		public ConstantExpressionContext() { }
		public virtual void CopyFrom(ConstantExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UserDefinedConstantExpressionContext : ConstantExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UserDefinedConstantExpressionContext(ConstantExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUserDefinedConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUserDefinedConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveConstantExpressionContext : ConstantExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public PrimitiveConstantExpressionContext(ConstantExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_constantExpression);
		try {
			State = 1173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
				_localctx = new PrimitiveConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1171;
				primitiveExpression();
				}
				break;
			case IDENTIFIER:
				_localctx = new UserDefinedConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1172;
				namespacedTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public bool IsArray;
		public DataTypeKind DataType;
		public IToken ArraySize;
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveDataTypeContext primitiveDataType() {
			return GetRuleContext<PrimitiveDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinDataTypeContext builtinDataType() {
			return GetRuleContext<BuiltinDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedDataTypeContext userDefinedDataType() {
			return GetRuleContext<UserDefinedDataTypeContext>(0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_dataType);
		int _la;
		try {
			State = 1208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1175;
				primitiveDataType();
				State = 1182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1176;
					Match(TOK_OPEN_BRACKET);
					State = 1178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1177;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1180;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.Primitive;
				}
				break;
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1186;
				builtinDataType();
				State = 1193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1187;
					Match(TOK_OPEN_BRACKET);
					State = 1189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1188;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1191;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.BuiltIn;
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1197;
				userDefinedDataType();
				State = 1204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1198;
					Match(TOK_OPEN_BRACKET);
					State = 1200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1199;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1202;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.UserDefined;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserDefinedDataTypeContext : ParserRuleContext {
		public NamespacedTypeNameContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UserDefinedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUserDefinedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUserDefinedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedDataTypeContext userDefinedDataType() {
		UserDefinedDataTypeContext _localctx = new UserDefinedDataTypeContext(Context, State);
		EnterRule(_localctx, 166, RULE_userDefinedDataType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210;
			_localctx.Type = namespacedTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveDataTypeContext : ParserRuleContext {
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VOID() { return GetToken(SPSLParser.TYPE_VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(SPSLParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(SPSLParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT() { return GetToken(SPSLParser.TYPE_UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(SPSLParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_DOUBLE() { return GetToken(SPSLParser.TYPE_DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(SPSLParser.TYPE_STRING, 0); }
		public PrimitiveDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveDataTypeContext primitiveDataType() {
		PrimitiveDataTypeContext _localctx = new PrimitiveDataTypeContext(Context, State);
		EnterRule(_localctx, 168, RULE_primitiveDataType);
		try {
			State = 1219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1212;
				_localctx.Type = Match(TYPE_VOID);
				}
				break;
			case TYPE_BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1213;
				_localctx.Type = Match(TYPE_BOOL);
				}
				break;
			case TYPE_INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1214;
				_localctx.Type = Match(TYPE_INT);
				}
				break;
			case TYPE_UINT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1215;
				_localctx.Type = Match(TYPE_UINT);
				}
				break;
			case TYPE_FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1216;
				_localctx.Type = Match(TYPE_FLOAT);
				}
				break;
			case TYPE_DOUBLE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1217;
				_localctx.Type = Match(TYPE_DOUBLE);
				}
				break;
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1218;
				_localctx.Type = Match(TYPE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinDataTypeContext : ParserRuleContext {
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2B() { return GetToken(SPSLParser.TYPE_VECTOR2B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2F() { return GetToken(SPSLParser.TYPE_VECTOR2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2I() { return GetToken(SPSLParser.TYPE_VECTOR2I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2UI() { return GetToken(SPSLParser.TYPE_VECTOR2UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3B() { return GetToken(SPSLParser.TYPE_VECTOR3B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3F() { return GetToken(SPSLParser.TYPE_VECTOR3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3I() { return GetToken(SPSLParser.TYPE_VECTOR3I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3UI() { return GetToken(SPSLParser.TYPE_VECTOR3UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4B() { return GetToken(SPSLParser.TYPE_VECTOR4B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4F() { return GetToken(SPSLParser.TYPE_VECTOR4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4I() { return GetToken(SPSLParser.TYPE_VECTOR4I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4UI() { return GetToken(SPSLParser.TYPE_VECTOR4UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2F() { return GetToken(SPSLParser.TYPE_MATRIX2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3F() { return GetToken(SPSLParser.TYPE_MATRIX3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4F() { return GetToken(SPSLParser.TYPE_MATRIX4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X3F() { return GetToken(SPSLParser.TYPE_MATRIX2X3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X4F() { return GetToken(SPSLParser.TYPE_MATRIX2X4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X2F() { return GetToken(SPSLParser.TYPE_MATRIX3X2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X4F() { return GetToken(SPSLParser.TYPE_MATRIX3X4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X2F() { return GetToken(SPSLParser.TYPE_MATRIX4X2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X3F() { return GetToken(SPSLParser.TYPE_MATRIX4X3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COLOR3() { return GetToken(SPSLParser.TYPE_COLOR3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COLOR4() { return GetToken(SPSLParser.TYPE_COLOR4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SAMPLER() { return GetToken(SPSLParser.TYPE_SAMPLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE1D() { return GetToken(SPSLParser.TYPE_TEXTURE1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE1DARRAY() { return GetToken(SPSLParser.TYPE_TEXTURE1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE2D() { return GetToken(SPSLParser.TYPE_TEXTURE2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE2DARRAY() { return GetToken(SPSLParser.TYPE_TEXTURE2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE3D() { return GetToken(SPSLParser.TYPE_TEXTURE3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CUBEMAP() { return GetToken(SPSLParser.TYPE_CUBEMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CUBEMAPARRAY() { return GetToken(SPSLParser.TYPE_CUBEMAPARRAY, 0); }
		public BuiltinDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBuiltinDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBuiltinDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinDataTypeContext builtinDataType() {
		BuiltinDataTypeContext _localctx = new BuiltinDataTypeContext(Context, State);
		EnterRule(_localctx, 170, RULE_builtinDataType);
		try {
			State = 1252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VECTOR2B:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1221;
				_localctx.Type = Match(TYPE_VECTOR2B);
				}
				break;
			case TYPE_VECTOR2F:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1222;
				_localctx.Type = Match(TYPE_VECTOR2F);
				}
				break;
			case TYPE_VECTOR2I:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1223;
				_localctx.Type = Match(TYPE_VECTOR2I);
				}
				break;
			case TYPE_VECTOR2UI:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1224;
				_localctx.Type = Match(TYPE_VECTOR2UI);
				}
				break;
			case TYPE_VECTOR3B:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1225;
				_localctx.Type = Match(TYPE_VECTOR3B);
				}
				break;
			case TYPE_VECTOR3F:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1226;
				_localctx.Type = Match(TYPE_VECTOR3F);
				}
				break;
			case TYPE_VECTOR3I:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1227;
				_localctx.Type = Match(TYPE_VECTOR3I);
				}
				break;
			case TYPE_VECTOR3UI:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1228;
				_localctx.Type = Match(TYPE_VECTOR3UI);
				}
				break;
			case TYPE_VECTOR4B:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1229;
				_localctx.Type = Match(TYPE_VECTOR4B);
				}
				break;
			case TYPE_VECTOR4F:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1230;
				_localctx.Type = Match(TYPE_VECTOR4F);
				}
				break;
			case TYPE_VECTOR4I:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1231;
				_localctx.Type = Match(TYPE_VECTOR4I);
				}
				break;
			case TYPE_VECTOR4UI:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1232;
				_localctx.Type = Match(TYPE_VECTOR4UI);
				}
				break;
			case TYPE_MATRIX2F:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1233;
				_localctx.Type = Match(TYPE_MATRIX2F);
				}
				break;
			case TYPE_MATRIX3F:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1234;
				_localctx.Type = Match(TYPE_MATRIX3F);
				}
				break;
			case TYPE_MATRIX4F:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1235;
				_localctx.Type = Match(TYPE_MATRIX4F);
				}
				break;
			case TYPE_MATRIX2X3F:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1236;
				_localctx.Type = Match(TYPE_MATRIX2X3F);
				}
				break;
			case TYPE_MATRIX2X4F:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1237;
				_localctx.Type = Match(TYPE_MATRIX2X4F);
				}
				break;
			case TYPE_MATRIX3X2F:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1238;
				_localctx.Type = Match(TYPE_MATRIX3X2F);
				}
				break;
			case TYPE_MATRIX3X4F:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1239;
				_localctx.Type = Match(TYPE_MATRIX3X4F);
				}
				break;
			case TYPE_MATRIX4X2F:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1240;
				_localctx.Type = Match(TYPE_MATRIX4X2F);
				}
				break;
			case TYPE_MATRIX4X3F:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1241;
				_localctx.Type = Match(TYPE_MATRIX4X3F);
				}
				break;
			case TYPE_COLOR3:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1242;
				_localctx.Type = Match(TYPE_COLOR3);
				}
				break;
			case TYPE_COLOR4:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1243;
				_localctx.Type = Match(TYPE_COLOR4);
				}
				break;
			case TYPE_SAMPLER:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1244;
				_localctx.Type = Match(TYPE_SAMPLER);
				}
				break;
			case TYPE_TEXTURE1D:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1245;
				_localctx.Type = Match(TYPE_TEXTURE1D);
				}
				break;
			case TYPE_TEXTURE1DARRAY:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1246;
				_localctx.Type = Match(TYPE_TEXTURE1DARRAY);
				}
				break;
			case TYPE_TEXTURE2D:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1247;
				_localctx.Type = Match(TYPE_TEXTURE2D);
				}
				break;
			case TYPE_TEXTURE2DARRAY:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1248;
				_localctx.Type = Match(TYPE_TEXTURE2DARRAY);
				}
				break;
			case TYPE_TEXTURE3D:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1249;
				_localctx.Type = Match(TYPE_TEXTURE3D);
				}
				break;
			case TYPE_CUBEMAP:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1250;
				_localctx.Type = Match(TYPE_CUBEMAP);
				}
				break;
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1251;
				_localctx.Type = Match(TYPE_CUBEMAPARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 70: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 32);
		case 1: return Precpred(Context, 31);
		case 2: return Precpred(Context, 30);
		case 3: return Precpred(Context, 29);
		case 4: return Precpred(Context, 28);
		case 5: return Precpred(Context, 27);
		case 6: return Precpred(Context, 26);
		case 7: return Precpred(Context, 25);
		case 8: return Precpred(Context, 24);
		case 9: return Precpred(Context, 23);
		case 10: return Precpred(Context, 22);
		case 11: return Precpred(Context, 21);
		case 12: return Precpred(Context, 20);
		case 13: return Precpred(Context, 19);
		case 14: return Precpred(Context, 18);
		case 15: return Precpred(Context, 17);
		case 16: return Precpred(Context, 16);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 14);
		case 19: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,164,1255,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,1,0,5,0,174,8,0,10,0,12,0,177,9,0,1,0,5,0,180,8,0,10,0,12,0,
		183,9,0,1,0,3,0,186,8,0,1,0,5,0,189,8,0,10,0,12,0,192,9,0,1,0,5,0,195,
		8,0,10,0,12,0,198,9,0,1,0,5,0,201,8,0,10,0,12,0,204,9,0,1,0,1,0,1,1,1,
		1,1,1,1,1,1,2,1,2,1,2,5,2,215,8,2,10,2,12,2,218,9,2,1,3,1,3,1,3,1,3,1,
		3,1,3,3,3,226,8,3,1,4,1,4,3,4,230,8,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,251,8,6,10,6,12,6,254,
		9,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,3,8,271,
		8,8,1,9,5,9,274,8,9,10,9,12,9,277,9,9,1,9,1,9,1,9,5,9,282,8,9,10,9,12,
		9,285,9,9,1,9,5,9,288,8,9,10,9,12,9,291,9,9,1,9,1,9,1,9,5,9,296,8,9,10,
		9,12,9,299,9,9,1,9,1,9,1,9,5,9,304,8,9,10,9,12,9,307,9,9,1,9,5,9,310,8,
		9,10,9,12,9,313,9,9,1,9,1,9,3,9,317,8,9,1,10,1,10,1,10,1,10,1,10,1,10,
		3,10,325,8,10,1,11,1,11,1,11,1,11,1,11,1,12,5,12,333,8,12,10,12,12,12,
		336,9,12,1,12,1,12,1,12,5,12,341,8,12,10,12,12,12,344,9,12,1,12,1,12,1,
		12,5,12,349,8,12,10,12,12,12,352,9,12,1,12,1,12,1,13,1,13,1,13,1,13,3,
		13,360,8,13,1,14,1,14,1,14,5,14,365,8,14,10,14,12,14,368,9,14,1,15,5,15,
		371,8,15,10,15,12,15,374,9,15,1,15,1,15,1,15,5,15,379,8,15,10,15,12,15,
		382,9,15,1,15,5,15,385,8,15,10,15,12,15,388,9,15,1,15,5,15,391,8,15,10,
		15,12,15,394,9,15,1,15,1,15,1,15,1,15,1,15,3,15,401,8,15,5,15,403,8,15,
		10,15,12,15,406,9,15,1,15,1,15,1,16,1,16,1,16,1,16,3,16,414,8,16,1,16,
		1,16,3,16,418,8,16,1,17,5,17,421,8,17,10,17,12,17,424,9,17,1,17,1,17,1,
		17,5,17,429,8,17,10,17,12,17,432,9,17,1,17,5,17,435,8,17,10,17,12,17,438,
		9,17,1,17,5,17,441,8,17,10,17,12,17,444,9,17,1,17,5,17,447,8,17,10,17,
		12,17,450,9,17,1,17,5,17,453,8,17,10,17,12,17,456,9,17,1,17,5,17,459,8,
		17,10,17,12,17,462,9,17,1,17,1,17,1,18,5,18,467,8,18,10,18,12,18,470,9,
		18,1,18,1,18,1,18,5,18,475,8,18,10,18,12,18,478,9,18,1,18,5,18,481,8,18,
		10,18,12,18,484,9,18,1,18,5,18,487,8,18,10,18,12,18,490,9,18,1,18,5,18,
		493,8,18,10,18,12,18,496,9,18,1,18,5,18,499,8,18,10,18,12,18,502,9,18,
		1,18,5,18,505,8,18,10,18,12,18,508,9,18,1,18,1,18,1,19,1,19,3,19,514,8,
		19,1,19,1,19,1,19,1,19,3,19,520,8,19,1,19,1,19,3,19,524,8,19,1,20,1,20,
		3,20,528,8,20,1,20,3,20,531,8,20,1,20,1,20,1,20,1,20,3,20,537,8,20,1,20,
		1,20,3,20,541,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,3,20,555,8,20,1,20,1,20,3,20,559,8,20,3,20,561,8,20,1,21,1,21,
		1,21,1,21,1,22,1,22,1,22,1,22,3,22,571,8,22,1,23,1,23,1,23,3,23,576,8,
		23,1,24,1,24,1,24,1,24,1,24,1,24,5,24,584,8,24,10,24,12,24,587,9,24,3,
		24,589,8,24,1,24,3,24,592,8,24,1,25,1,25,3,25,596,8,25,1,26,1,26,1,26,
		1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,5,29,610,8,29,10,29,12,29,
		613,9,29,1,29,1,29,3,29,617,8,29,1,29,1,29,1,29,1,29,5,29,623,8,29,10,
		29,12,29,626,9,29,1,29,1,29,1,30,5,30,631,8,30,10,30,12,30,634,9,30,1,
		30,1,30,1,30,1,30,1,30,5,30,641,8,30,10,30,12,30,644,9,30,1,30,1,30,1,
		31,5,31,649,8,31,10,31,12,31,652,9,31,1,31,1,31,1,31,1,31,1,31,5,31,659,
		8,31,10,31,12,31,662,9,31,1,31,1,31,1,32,5,32,667,8,32,10,32,12,32,670,
		9,32,1,32,3,32,673,8,32,1,32,3,32,676,8,32,1,32,1,32,1,32,1,32,5,32,682,
		8,32,10,32,12,32,685,9,32,1,32,1,32,1,33,5,33,690,8,33,10,33,12,33,693,
		9,33,1,33,1,33,1,33,1,33,1,34,5,34,700,8,34,10,34,12,34,703,9,34,1,34,
		1,34,1,34,1,34,1,34,5,34,710,8,34,10,34,12,34,713,9,34,1,34,3,34,716,8,
		34,1,35,1,35,1,35,3,35,721,8,35,1,35,1,35,1,36,1,36,3,36,727,8,36,1,36,
		1,36,1,36,1,36,5,36,733,8,36,10,36,12,36,736,9,36,1,36,1,36,3,36,740,8,
		36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,3,38,750,8,38,1,39,5,39,753,
		8,39,10,39,12,39,756,9,39,1,39,1,39,3,39,760,8,39,1,39,1,39,1,40,1,40,
		1,40,1,40,1,40,1,41,3,41,770,8,41,1,41,1,41,1,41,1,42,1,42,3,42,777,8,
		42,1,42,1,42,1,43,1,43,1,43,5,43,784,8,43,10,43,12,43,787,9,43,1,44,3,
		44,790,8,44,1,44,1,44,1,44,1,45,5,45,796,8,45,10,45,12,45,799,9,45,1,45,
		3,45,802,8,45,1,46,1,46,5,46,806,8,46,10,46,12,46,809,9,46,1,46,1,46,1,
		47,1,47,1,47,1,47,1,47,1,47,3,47,819,8,47,1,48,1,48,1,48,3,48,824,8,48,
		1,49,1,49,1,49,4,49,829,8,49,11,49,12,49,830,1,50,1,50,3,50,835,8,50,1,
		51,1,51,1,51,4,51,840,8,51,11,51,12,51,841,1,52,1,52,1,52,1,52,1,53,1,
		53,1,53,1,53,1,54,1,54,3,54,854,8,54,1,55,1,55,1,55,3,55,859,8,55,1,55,
		1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,871,8,56,1,57,1,57,1,
		57,1,57,1,57,1,57,5,57,879,8,57,10,57,12,57,882,9,57,1,57,3,57,885,8,57,
		1,58,1,58,1,58,3,58,890,8,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,
		60,1,60,1,60,1,60,1,60,1,60,5,60,906,8,60,10,60,12,60,909,9,60,1,60,1,
		60,1,61,1,61,1,61,1,61,3,61,917,8,61,1,61,5,61,920,8,61,10,61,12,61,923,
		9,61,1,61,1,61,3,61,927,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,
		63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,
		65,1,65,1,65,1,66,1,66,1,66,3,66,957,8,66,1,66,1,66,1,67,1,67,1,67,5,67,
		964,8,67,10,67,12,67,967,9,67,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1041,8,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,5,70,1106,8,70,10,70,12,70,1109,9,70,1,71,1,71,1,71,
		3,71,1114,8,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,3,72,1124,8,72,
		1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,75,1,76,1,76,1,76,1,77,
		1,77,1,77,1,77,3,77,1143,8,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
		1,78,1,78,1,78,1,78,1,78,3,78,1158,8,78,1,79,1,79,3,79,1162,8,79,1,80,
		1,80,1,80,1,80,1,80,1,80,3,80,1170,8,80,1,81,1,81,3,81,1174,8,81,1,82,
		1,82,1,82,3,82,1179,8,82,1,82,1,82,3,82,1183,8,82,1,82,1,82,1,82,1,82,
		1,82,3,82,1190,8,82,1,82,1,82,3,82,1194,8,82,1,82,1,82,1,82,1,82,1,82,
		3,82,1201,8,82,1,82,1,82,3,82,1205,8,82,1,82,1,82,3,82,1209,8,82,1,83,
		1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1220,8,84,1,85,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
		1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
		3,85,1253,8,85,1,85,0,1,140,86,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
		30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
		78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
		120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
		156,158,160,162,164,166,168,170,0,10,2,0,17,17,19,22,1,0,2,4,1,0,6,8,1,
		0,11,14,3,0,31,31,33,34,63,63,2,0,45,46,164,164,1,0,131,136,1,0,45,46,
		1,0,137,138,1,0,124,125,1403,0,175,1,0,0,0,2,207,1,0,0,0,4,211,1,0,0,0,
		6,225,1,0,0,0,8,229,1,0,0,0,10,236,1,0,0,0,12,243,1,0,0,0,14,260,1,0,0,
		0,16,270,1,0,0,0,18,316,1,0,0,0,20,318,1,0,0,0,22,326,1,0,0,0,24,334,1,
		0,0,0,26,355,1,0,0,0,28,361,1,0,0,0,30,372,1,0,0,0,32,409,1,0,0,0,34,422,
		1,0,0,0,36,468,1,0,0,0,38,513,1,0,0,0,40,560,1,0,0,0,42,562,1,0,0,0,44,
		570,1,0,0,0,46,575,1,0,0,0,48,577,1,0,0,0,50,595,1,0,0,0,52,597,1,0,0,
		0,54,601,1,0,0,0,56,605,1,0,0,0,58,611,1,0,0,0,60,632,1,0,0,0,62,650,1,
		0,0,0,64,668,1,0,0,0,66,691,1,0,0,0,68,715,1,0,0,0,70,717,1,0,0,0,72,739,
		1,0,0,0,74,741,1,0,0,0,76,749,1,0,0,0,78,754,1,0,0,0,80,763,1,0,0,0,82,
		769,1,0,0,0,84,774,1,0,0,0,86,780,1,0,0,0,88,789,1,0,0,0,90,797,1,0,0,
		0,92,803,1,0,0,0,94,818,1,0,0,0,96,823,1,0,0,0,98,825,1,0,0,0,100,834,
		1,0,0,0,102,836,1,0,0,0,104,843,1,0,0,0,106,847,1,0,0,0,108,853,1,0,0,
		0,110,855,1,0,0,0,112,862,1,0,0,0,114,872,1,0,0,0,116,889,1,0,0,0,118,
		896,1,0,0,0,120,899,1,0,0,0,122,912,1,0,0,0,124,928,1,0,0,0,126,934,1,
		0,0,0,128,944,1,0,0,0,130,949,1,0,0,0,132,953,1,0,0,0,134,960,1,0,0,0,
		136,968,1,0,0,0,138,970,1,0,0,0,140,1040,1,0,0,0,142,1113,1,0,0,0,144,
		1123,1,0,0,0,146,1125,1,0,0,0,148,1129,1,0,0,0,150,1132,1,0,0,0,152,1135,
		1,0,0,0,154,1142,1,0,0,0,156,1157,1,0,0,0,158,1161,1,0,0,0,160,1169,1,
		0,0,0,162,1173,1,0,0,0,164,1208,1,0,0,0,166,1210,1,0,0,0,168,1219,1,0,
		0,0,170,1252,1,0,0,0,172,174,3,50,25,0,173,172,1,0,0,0,174,177,1,0,0,0,
		175,173,1,0,0,0,175,176,1,0,0,0,176,181,1,0,0,0,177,175,1,0,0,0,178,180,
		5,155,0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,
		0,0,182,185,1,0,0,0,183,181,1,0,0,0,184,186,3,2,1,0,185,184,1,0,0,0,185,
		186,1,0,0,0,186,196,1,0,0,0,187,189,5,155,0,0,188,187,1,0,0,0,189,192,
		1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,
		0,193,195,3,42,21,0,194,190,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,
		197,1,0,0,0,197,202,1,0,0,0,198,196,1,0,0,0,199,201,3,6,3,0,200,199,1,
		0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,
		204,202,1,0,0,0,205,206,5,0,0,1,206,1,1,0,0,0,207,208,5,15,0,0,208,209,
		3,4,2,0,209,210,5,116,0,0,210,3,1,0,0,0,211,216,5,164,0,0,212,213,5,121,
		0,0,213,215,5,164,0,0,214,212,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,
		216,217,1,0,0,0,217,5,1,0,0,0,218,216,1,0,0,0,219,226,3,8,4,0,220,226,
		3,16,8,0,221,226,3,18,9,0,222,226,3,24,12,0,223,226,3,30,15,0,224,226,
		3,34,17,0,225,219,1,0,0,0,225,220,1,0,0,0,225,221,1,0,0,0,225,222,1,0,
		0,0,225,223,1,0,0,0,225,224,1,0,0,0,226,7,1,0,0,0,227,228,5,62,0,0,228,
		230,6,4,-1,0,229,227,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,232,5,
		63,0,0,232,233,3,164,82,0,233,234,3,74,37,0,234,235,5,116,0,0,235,9,1,
		0,0,0,236,237,5,64,0,0,237,238,5,67,0,0,238,239,3,138,69,0,239,240,5,130,
		0,0,240,241,5,158,0,0,241,242,5,116,0,0,242,11,1,0,0,0,243,244,5,64,0,
		0,244,245,5,48,0,0,245,246,3,138,69,0,246,247,5,108,0,0,247,252,5,164,
		0,0,248,249,5,117,0,0,249,251,5,164,0,0,250,248,1,0,0,0,251,254,1,0,0,
		0,252,250,1,0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,
		256,5,109,0,0,256,257,5,130,0,0,257,258,3,138,69,0,258,259,5,116,0,0,259,
		13,1,0,0,0,260,261,5,64,0,0,261,262,5,68,0,0,262,263,3,138,69,0,263,264,
		5,130,0,0,264,265,5,161,0,0,265,266,5,116,0,0,266,15,1,0,0,0,267,271,3,
		10,5,0,268,271,3,12,6,0,269,271,3,14,7,0,270,267,1,0,0,0,270,268,1,0,0,
		0,270,269,1,0,0,0,271,17,1,0,0,0,272,274,5,155,0,0,273,272,1,0,0,0,274,
		277,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,275,1,
		0,0,0,278,279,3,20,10,0,279,289,5,108,0,0,280,282,5,155,0,0,281,280,1,
		0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,
		285,283,1,0,0,0,286,288,3,68,34,0,287,283,1,0,0,0,288,291,1,0,0,0,289,
		287,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,289,1,0,0,0,292,293,5,
		109,0,0,293,317,1,0,0,0,294,296,5,155,0,0,295,294,1,0,0,0,296,299,1,0,
		0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,
		301,3,22,11,0,301,311,5,108,0,0,302,304,5,155,0,0,303,302,1,0,0,0,304,
		307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,305,1,
		0,0,0,308,310,3,70,35,0,309,305,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,
		0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,5,109,0,0,315,
		317,1,0,0,0,316,275,1,0,0,0,316,297,1,0,0,0,317,19,1,0,0,0,318,319,5,29,
		0,0,319,320,5,164,0,0,320,321,5,30,0,0,321,324,5,47,0,0,322,323,5,35,0,
		0,323,325,3,4,2,0,324,322,1,0,0,0,324,325,1,0,0,0,325,21,1,0,0,0,326,327,
		5,29,0,0,327,328,5,164,0,0,328,329,5,30,0,0,329,330,5,48,0,0,330,23,1,
		0,0,0,331,333,5,155,0,0,332,331,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,
		0,334,335,1,0,0,0,335,337,1,0,0,0,336,334,1,0,0,0,337,338,3,26,13,0,338,
		350,5,108,0,0,339,341,5,155,0,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,
		1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,342,1,0,0,0,345,346,3,82,41,
		0,346,347,5,116,0,0,347,349,1,0,0,0,348,342,1,0,0,0,349,352,1,0,0,0,350,
		348,1,0,0,0,350,351,1,0,0,0,351,353,1,0,0,0,352,350,1,0,0,0,353,354,5,
		109,0,0,354,25,1,0,0,0,355,356,5,25,0,0,356,359,5,164,0,0,357,358,5,35,
		0,0,358,360,3,28,14,0,359,357,1,0,0,0,359,360,1,0,0,0,360,27,1,0,0,0,361,
		366,3,4,2,0,362,363,5,117,0,0,363,365,3,4,2,0,364,362,1,0,0,0,365,368,
		1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,29,1,0,0,0,368,366,1,0,0,0,
		369,371,5,155,0,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,
		373,1,0,0,0,373,375,1,0,0,0,374,372,1,0,0,0,375,376,3,32,16,0,376,386,
		5,108,0,0,377,379,5,155,0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,
		0,0,0,380,381,1,0,0,0,381,383,1,0,0,0,382,380,1,0,0,0,383,385,3,42,21,
		0,384,380,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,
		404,1,0,0,0,388,386,1,0,0,0,389,391,5,155,0,0,390,389,1,0,0,0,391,394,
		1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,400,1,0,0,0,394,392,1,0,0,
		0,395,401,3,64,32,0,396,401,3,16,8,0,397,401,3,8,4,0,398,401,3,18,9,0,
		399,401,3,78,39,0,400,395,1,0,0,0,400,396,1,0,0,0,400,397,1,0,0,0,400,
		398,1,0,0,0,400,399,1,0,0,0,401,403,1,0,0,0,402,392,1,0,0,0,403,406,1,
		0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,404,1,0,0,0,
		407,408,5,109,0,0,408,31,1,0,0,0,409,410,5,18,0,0,410,413,5,164,0,0,411,
		412,5,35,0,0,412,414,3,4,2,0,413,411,1,0,0,0,413,414,1,0,0,0,414,417,1,
		0,0,0,415,416,5,36,0,0,416,418,3,28,14,0,417,415,1,0,0,0,417,418,1,0,0,
		0,418,33,1,0,0,0,419,421,5,155,0,0,420,419,1,0,0,0,421,424,1,0,0,0,422,
		420,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,425,426,3,
		40,20,0,426,436,5,108,0,0,427,429,5,155,0,0,428,427,1,0,0,0,429,432,1,
		0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,
		433,435,3,42,21,0,434,430,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,
		437,1,0,0,0,437,448,1,0,0,0,438,436,1,0,0,0,439,441,5,155,0,0,440,439,
		1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,445,1,0,0,
		0,444,442,1,0,0,0,445,447,3,44,22,0,446,442,1,0,0,0,447,450,1,0,0,0,448,
		446,1,0,0,0,448,449,1,0,0,0,449,460,1,0,0,0,450,448,1,0,0,0,451,453,5,
		155,0,0,452,451,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,
		0,455,457,1,0,0,0,456,454,1,0,0,0,457,459,3,78,39,0,458,454,1,0,0,0,459,
		462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,460,1,
		0,0,0,463,464,5,109,0,0,464,35,1,0,0,0,465,467,5,155,0,0,466,465,1,0,0,
		0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,
		468,1,0,0,0,471,472,3,38,19,0,472,482,5,108,0,0,473,475,5,155,0,0,474,
		473,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,479,1,
		0,0,0,478,476,1,0,0,0,479,481,3,42,21,0,480,476,1,0,0,0,481,484,1,0,0,
		0,482,480,1,0,0,0,482,483,1,0,0,0,483,494,1,0,0,0,484,482,1,0,0,0,485,
		487,5,155,0,0,486,485,1,0,0,0,487,490,1,0,0,0,488,486,1,0,0,0,488,489,
		1,0,0,0,489,491,1,0,0,0,490,488,1,0,0,0,491,493,3,46,23,0,492,488,1,0,
		0,0,493,496,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,506,1,0,0,0,496,
		494,1,0,0,0,497,499,5,155,0,0,498,497,1,0,0,0,499,502,1,0,0,0,500,498,
		1,0,0,0,500,501,1,0,0,0,501,503,1,0,0,0,502,500,1,0,0,0,503,505,3,78,39,
		0,504,500,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,
		509,1,0,0,0,508,506,1,0,0,0,509,510,5,109,0,0,510,37,1,0,0,0,511,512,5,
		16,0,0,512,514,6,19,-1,0,513,511,1,0,0,0,513,514,1,0,0,0,514,515,1,0,0,
		0,515,516,5,26,0,0,516,519,5,164,0,0,517,518,5,35,0,0,518,520,3,4,2,0,
		519,517,1,0,0,0,519,520,1,0,0,0,520,523,1,0,0,0,521,522,5,36,0,0,522,524,
		3,28,14,0,523,521,1,0,0,0,523,524,1,0,0,0,524,39,1,0,0,0,525,526,5,16,
		0,0,526,528,6,20,-1,0,527,525,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,
		529,531,7,0,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,1,0,0,0,532,533,
		5,24,0,0,533,536,5,164,0,0,534,535,5,35,0,0,535,537,3,4,2,0,536,534,1,
		0,0,0,536,537,1,0,0,0,537,540,1,0,0,0,538,539,5,36,0,0,539,541,3,28,14,
		0,540,538,1,0,0,0,540,541,1,0,0,0,541,561,1,0,0,0,542,543,5,23,0,0,543,
		544,5,24,0,0,544,545,5,164,0,0,545,546,5,134,0,0,546,547,5,161,0,0,547,
		548,5,117,0,0,548,549,5,161,0,0,549,550,5,117,0,0,550,551,5,161,0,0,551,
		554,5,133,0,0,552,553,5,35,0,0,553,555,3,4,2,0,554,552,1,0,0,0,554,555,
		1,0,0,0,555,558,1,0,0,0,556,557,5,36,0,0,557,559,3,28,14,0,558,556,1,0,
		0,0,558,559,1,0,0,0,559,561,1,0,0,0,560,527,1,0,0,0,560,542,1,0,0,0,561,
		41,1,0,0,0,562,563,5,37,0,0,563,564,3,4,2,0,564,565,5,116,0,0,565,43,1,
		0,0,0,566,571,3,60,30,0,567,571,3,62,31,0,568,571,3,64,32,0,569,571,3,
		18,9,0,570,566,1,0,0,0,570,567,1,0,0,0,570,568,1,0,0,0,570,569,1,0,0,0,
		571,45,1,0,0,0,572,576,3,58,29,0,573,576,3,62,31,0,574,576,3,18,9,0,575,
		572,1,0,0,0,575,573,1,0,0,0,575,574,1,0,0,0,576,47,1,0,0,0,577,578,5,120,
		0,0,578,591,5,164,0,0,579,588,5,104,0,0,580,585,3,162,81,0,581,582,5,117,
		0,0,582,584,3,162,81,0,583,581,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,
		585,586,1,0,0,0,586,589,1,0,0,0,587,585,1,0,0,0,588,580,1,0,0,0,588,589,
		1,0,0,0,589,590,1,0,0,0,590,592,5,105,0,0,591,579,1,0,0,0,591,592,1,0,
		0,0,592,49,1,0,0,0,593,596,3,52,26,0,594,596,3,54,27,0,595,593,1,0,0,0,
		595,594,1,0,0,0,596,51,1,0,0,0,597,598,5,118,0,0,598,599,5,1,0,0,599,600,
		7,1,0,0,600,53,1,0,0,0,601,602,5,118,0,0,602,603,5,5,0,0,603,604,7,2,0,
		0,604,55,1,0,0,0,605,606,5,118,0,0,606,607,5,9,0,0,607,57,1,0,0,0,608,
		610,3,48,24,0,609,608,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,
		1,0,0,0,612,616,1,0,0,0,613,611,1,0,0,0,614,615,5,27,0,0,615,617,6,29,
		-1,0,616,614,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,619,5,28,0,0,
		619,620,5,164,0,0,620,624,5,108,0,0,621,623,3,66,33,0,622,621,1,0,0,0,
		623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,624,
		1,0,0,0,627,628,5,109,0,0,628,59,1,0,0,0,629,631,3,48,24,0,630,629,1,0,
		0,0,631,634,1,0,0,0,632,630,1,0,0,0,632,633,1,0,0,0,633,635,1,0,0,0,634,
		632,1,0,0,0,635,636,5,39,0,0,636,637,3,164,82,0,637,642,5,164,0,0,638,
		639,5,117,0,0,639,641,5,164,0,0,640,638,1,0,0,0,641,644,1,0,0,0,642,640,
		1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,642,1,0,0,0,645,646,5,116,
		0,0,646,61,1,0,0,0,647,649,3,48,24,0,648,647,1,0,0,0,649,652,1,0,0,0,650,
		648,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,650,1,0,0,0,653,654,5,
		42,0,0,654,655,3,164,82,0,655,660,5,164,0,0,656,657,5,117,0,0,657,659,
		5,164,0,0,658,656,1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,660,661,1,0,
		0,0,661,663,1,0,0,0,662,660,1,0,0,0,663,664,5,116,0,0,664,63,1,0,0,0,665,
		667,3,48,24,0,666,665,1,0,0,0,667,670,1,0,0,0,668,666,1,0,0,0,668,669,
		1,0,0,0,669,672,1,0,0,0,670,668,1,0,0,0,671,673,5,10,0,0,672,671,1,0,0,
		0,672,673,1,0,0,0,673,675,1,0,0,0,674,676,7,3,0,0,675,674,1,0,0,0,675,
		676,1,0,0,0,676,677,1,0,0,0,677,678,5,41,0,0,678,679,5,164,0,0,679,683,
		5,108,0,0,680,682,3,66,33,0,681,680,1,0,0,0,682,685,1,0,0,0,683,681,1,
		0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,683,1,0,0,0,686,687,5,109,0,
		0,687,65,1,0,0,0,688,690,3,48,24,0,689,688,1,0,0,0,690,693,1,0,0,0,691,
		689,1,0,0,0,691,692,1,0,0,0,692,694,1,0,0,0,693,691,1,0,0,0,694,695,3,
		164,82,0,695,696,5,164,0,0,696,697,5,116,0,0,697,67,1,0,0,0,698,700,3,
		48,24,0,699,698,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,
		0,702,704,1,0,0,0,703,701,1,0,0,0,704,705,3,164,82,0,705,706,5,164,0,0,
		706,707,5,116,0,0,707,716,1,0,0,0,708,710,3,48,24,0,709,708,1,0,0,0,710,
		713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,714,1,0,0,0,713,711,1,
		0,0,0,714,716,3,80,40,0,715,701,1,0,0,0,715,711,1,0,0,0,716,69,1,0,0,0,
		717,720,5,164,0,0,718,719,5,130,0,0,719,721,3,162,81,0,720,718,1,0,0,0,
		720,721,1,0,0,0,721,722,1,0,0,0,722,723,5,117,0,0,723,71,1,0,0,0,724,725,
		5,63,0,0,725,727,6,36,-1,0,726,724,1,0,0,0,726,727,1,0,0,0,727,728,1,0,
		0,0,728,729,3,164,82,0,729,734,3,76,38,0,730,731,5,117,0,0,731,733,3,76,
		38,0,732,730,1,0,0,0,733,736,1,0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,
		740,1,0,0,0,736,734,1,0,0,0,737,738,5,38,0,0,738,740,3,74,37,0,739,726,
		1,0,0,0,739,737,1,0,0,0,740,73,1,0,0,0,741,742,3,138,69,0,742,743,5,130,
		0,0,743,744,3,140,70,0,744,75,1,0,0,0,745,750,3,138,69,0,746,747,3,74,
		37,0,747,748,6,38,-1,0,748,750,1,0,0,0,749,745,1,0,0,0,749,746,1,0,0,0,
		750,77,1,0,0,0,751,753,3,48,24,0,752,751,1,0,0,0,753,756,1,0,0,0,754,752,
		1,0,0,0,754,755,1,0,0,0,755,759,1,0,0,0,756,754,1,0,0,0,757,758,5,44,0,
		0,758,760,6,39,-1,0,759,757,1,0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,
		762,3,80,40,0,762,79,1,0,0,0,763,764,3,82,41,0,764,765,5,108,0,0,765,766,
		3,90,45,0,766,767,5,109,0,0,767,81,1,0,0,0,768,770,3,164,82,0,769,768,
		1,0,0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,772,5,164,0,0,772,773,3,84,
		42,0,773,83,1,0,0,0,774,776,5,104,0,0,775,777,3,86,43,0,776,775,1,0,0,
		0,776,777,1,0,0,0,777,778,1,0,0,0,778,779,5,105,0,0,779,85,1,0,0,0,780,
		785,3,88,44,0,781,782,5,117,0,0,782,784,3,88,44,0,783,781,1,0,0,0,784,
		787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,87,1,0,0,0,787,785,1,0,
		0,0,788,790,7,4,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,
		792,3,164,82,0,792,793,5,164,0,0,793,89,1,0,0,0,794,796,3,156,78,0,795,
		794,1,0,0,0,796,799,1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,801,1,
		0,0,0,799,797,1,0,0,0,800,802,3,146,73,0,801,800,1,0,0,0,801,802,1,0,0,
		0,802,91,1,0,0,0,803,807,5,108,0,0,804,806,3,158,79,0,805,804,1,0,0,0,
		806,809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,810,1,0,0,0,809,807,
		1,0,0,0,810,811,5,109,0,0,811,93,1,0,0,0,812,819,3,138,69,0,813,819,3,
		130,65,0,814,819,3,110,55,0,815,819,3,104,52,0,816,819,3,106,53,0,817,
		819,3,142,71,0,818,812,1,0,0,0,818,813,1,0,0,0,818,814,1,0,0,0,818,815,
		1,0,0,0,818,816,1,0,0,0,818,817,1,0,0,0,819,95,1,0,0,0,820,824,3,138,69,
		0,821,824,3,110,55,0,822,824,3,142,71,0,823,820,1,0,0,0,823,821,1,0,0,
		0,823,822,1,0,0,0,824,97,1,0,0,0,825,828,3,94,47,0,826,827,5,110,0,0,827,
		829,3,96,48,0,828,826,1,0,0,0,829,830,1,0,0,0,830,828,1,0,0,0,830,831,
		1,0,0,0,831,99,1,0,0,0,832,835,3,138,69,0,833,835,3,142,71,0,834,832,1,
		0,0,0,834,833,1,0,0,0,835,101,1,0,0,0,836,839,3,94,47,0,837,838,5,110,
		0,0,838,840,3,100,50,0,839,837,1,0,0,0,840,841,1,0,0,0,841,839,1,0,0,0,
		841,842,1,0,0,0,842,103,1,0,0,0,843,844,7,5,0,0,844,845,5,110,0,0,845,
		846,3,138,69,0,846,105,1,0,0,0,847,848,7,5,0,0,848,849,5,110,0,0,849,850,
		3,110,55,0,850,107,1,0,0,0,851,854,3,104,52,0,852,854,3,106,53,0,853,851,
		1,0,0,0,853,852,1,0,0,0,854,109,1,0,0,0,855,856,3,4,2,0,856,858,5,104,
		0,0,857,859,3,134,67,0,858,857,1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,
		860,861,5,105,0,0,861,111,1,0,0,0,862,863,5,65,0,0,863,864,5,104,0,0,864,
		865,3,138,69,0,865,866,7,6,0,0,866,867,3,162,81,0,867,868,5,105,0,0,868,
		870,3,92,46,0,869,871,3,118,59,0,870,869,1,0,0,0,870,871,1,0,0,0,871,113,
		1,0,0,0,872,873,5,50,0,0,873,874,5,104,0,0,874,875,3,140,70,0,875,876,
		5,105,0,0,876,880,3,92,46,0,877,879,3,116,58,0,878,877,1,0,0,0,879,882,
		1,0,0,0,880,878,1,0,0,0,880,881,1,0,0,0,881,884,1,0,0,0,882,880,1,0,0,
		0,883,885,3,118,59,0,884,883,1,0,0,0,884,885,1,0,0,0,885,115,1,0,0,0,886,
		890,5,51,0,0,887,888,5,52,0,0,888,890,5,50,0,0,889,886,1,0,0,0,889,887,
		1,0,0,0,890,891,1,0,0,0,891,892,5,104,0,0,892,893,3,140,70,0,893,894,5,
		105,0,0,894,895,3,92,46,0,895,117,1,0,0,0,896,897,5,52,0,0,897,898,3,92,
		46,0,898,119,1,0,0,0,899,900,5,53,0,0,900,901,5,104,0,0,901,902,3,140,
		70,0,902,903,5,105,0,0,903,907,5,108,0,0,904,906,3,122,61,0,905,904,1,
		0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,908,1,0,0,0,908,910,1,0,0,0,
		909,907,1,0,0,0,910,911,5,109,0,0,911,121,1,0,0,0,912,913,5,60,0,0,913,
		914,3,162,81,0,914,916,5,115,0,0,915,917,5,108,0,0,916,915,1,0,0,0,916,
		917,1,0,0,0,917,921,1,0,0,0,918,920,3,156,78,0,919,918,1,0,0,0,920,923,
		1,0,0,0,921,919,1,0,0,0,921,922,1,0,0,0,922,924,1,0,0,0,923,921,1,0,0,
		0,924,926,3,154,77,0,925,927,5,109,0,0,926,925,1,0,0,0,926,927,1,0,0,0,
		927,123,1,0,0,0,928,929,5,56,0,0,929,930,5,104,0,0,930,931,3,140,70,0,
		931,932,5,105,0,0,932,933,3,92,46,0,933,125,1,0,0,0,934,935,5,54,0,0,935,
		936,5,104,0,0,936,937,3,140,70,0,937,938,5,116,0,0,938,939,3,140,70,0,
		939,940,5,116,0,0,940,941,3,140,70,0,941,942,5,105,0,0,942,943,3,92,46,
		0,943,127,1,0,0,0,944,945,5,55,0,0,945,946,3,92,46,0,946,947,5,56,0,0,
		947,948,3,130,65,0,948,129,1,0,0,0,949,950,5,104,0,0,950,951,3,140,70,
		0,951,952,5,105,0,0,952,131,1,0,0,0,953,954,3,164,82,0,954,956,5,104,0,
		0,955,957,3,134,67,0,956,955,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,
		959,5,105,0,0,959,133,1,0,0,0,960,965,3,140,70,0,961,962,5,117,0,0,962,
		964,3,140,70,0,963,961,1,0,0,0,964,967,1,0,0,0,965,963,1,0,0,0,965,966,
		1,0,0,0,966,135,1,0,0,0,967,965,1,0,0,0,968,969,7,7,0,0,969,137,1,0,0,
		0,970,971,5,164,0,0,971,139,1,0,0,0,972,973,6,70,-1,0,973,1041,3,138,69,
		0,974,1041,3,130,65,0,975,1041,3,160,80,0,976,1041,3,162,81,0,977,1041,
		3,108,54,0,978,1041,3,98,49,0,979,1041,3,110,55,0,980,1041,3,142,71,0,
		981,1041,3,132,66,0,982,983,5,113,0,0,983,1041,3,140,70,36,984,985,3,144,
		72,0,985,986,7,8,0,0,986,1041,1,0,0,0,987,988,7,8,0,0,988,1041,3,144,72,
		0,989,990,7,9,0,0,990,1041,3,140,70,33,991,992,3,144,72,0,992,993,5,130,
		0,0,993,994,3,140,70,12,994,1041,1,0,0,0,995,996,3,144,72,0,996,997,5,
		139,0,0,997,998,3,140,70,11,998,1041,1,0,0,0,999,1000,3,144,72,0,1000,
		1001,5,140,0,0,1001,1002,3,140,70,10,1002,1041,1,0,0,0,1003,1004,3,144,
		72,0,1004,1005,5,141,0,0,1005,1006,3,140,70,9,1006,1041,1,0,0,0,1007,1008,
		3,144,72,0,1008,1009,5,142,0,0,1009,1010,3,140,70,8,1010,1041,1,0,0,0,
		1011,1012,3,144,72,0,1012,1013,5,143,0,0,1013,1014,3,140,70,7,1014,1041,
		1,0,0,0,1015,1016,3,144,72,0,1016,1017,5,144,0,0,1017,1018,3,140,70,6,
		1018,1041,1,0,0,0,1019,1020,3,144,72,0,1020,1021,5,145,0,0,1021,1022,3,
		140,70,5,1022,1041,1,0,0,0,1023,1024,3,144,72,0,1024,1025,5,146,0,0,1025,
		1026,3,140,70,4,1026,1041,1,0,0,0,1027,1028,3,144,72,0,1028,1029,5,147,
		0,0,1029,1030,3,140,70,3,1030,1041,1,0,0,0,1031,1032,3,144,72,0,1032,1033,
		5,148,0,0,1033,1034,3,140,70,2,1034,1041,1,0,0,0,1035,1036,5,104,0,0,1036,
		1037,3,164,82,0,1037,1038,5,105,0,0,1038,1039,3,140,70,1,1039,1041,1,0,
		0,0,1040,972,1,0,0,0,1040,974,1,0,0,0,1040,975,1,0,0,0,1040,976,1,0,0,
		0,1040,977,1,0,0,0,1040,978,1,0,0,0,1040,979,1,0,0,0,1040,980,1,0,0,0,
		1040,981,1,0,0,0,1040,982,1,0,0,0,1040,984,1,0,0,0,1040,987,1,0,0,0,1040,
		989,1,0,0,0,1040,991,1,0,0,0,1040,995,1,0,0,0,1040,999,1,0,0,0,1040,1003,
		1,0,0,0,1040,1007,1,0,0,0,1040,1011,1,0,0,0,1040,1015,1,0,0,0,1040,1019,
		1,0,0,0,1040,1023,1,0,0,0,1040,1027,1,0,0,0,1040,1031,1,0,0,0,1040,1035,
		1,0,0,0,1041,1107,1,0,0,0,1042,1043,10,32,0,0,1043,1044,5,136,0,0,1044,
		1106,3,140,70,33,1045,1046,10,31,0,0,1046,1047,5,135,0,0,1047,1106,3,140,
		70,32,1048,1049,10,30,0,0,1049,1050,5,134,0,0,1050,1106,3,140,70,31,1051,
		1052,10,29,0,0,1052,1053,5,133,0,0,1053,1106,3,140,70,30,1054,1055,10,
		28,0,0,1055,1056,5,131,0,0,1056,1106,3,140,70,29,1057,1058,10,27,0,0,1058,
		1059,5,132,0,0,1059,1106,3,140,70,28,1060,1061,10,26,0,0,1061,1062,5,124,
		0,0,1062,1106,3,140,70,27,1063,1064,10,25,0,0,1064,1065,5,125,0,0,1065,
		1106,3,140,70,26,1066,1067,10,24,0,0,1067,1068,5,129,0,0,1068,1106,3,140,
		70,25,1069,1070,10,23,0,0,1070,1071,5,128,0,0,1071,1106,3,140,70,24,1072,
		1073,10,22,0,0,1073,1074,5,126,0,0,1074,1106,3,140,70,23,1075,1076,10,
		21,0,0,1076,1077,5,122,0,0,1077,1106,3,140,70,22,1078,1079,10,20,0,0,1079,
		1080,5,123,0,0,1080,1106,3,140,70,21,1081,1082,10,19,0,0,1082,1083,5,127,
		0,0,1083,1106,3,140,70,19,1084,1085,10,18,0,0,1085,1086,5,152,0,0,1086,
		1106,3,140,70,18,1087,1088,10,17,0,0,1088,1089,5,153,0,0,1089,1106,3,140,
		70,17,1090,1091,10,16,0,0,1091,1092,5,150,0,0,1092,1106,3,140,70,17,1093,
		1094,10,15,0,0,1094,1095,5,149,0,0,1095,1106,3,140,70,16,1096,1097,10,
		14,0,0,1097,1098,5,151,0,0,1098,1106,3,140,70,15,1099,1100,10,13,0,0,1100,
		1101,5,114,0,0,1101,1102,3,140,70,0,1102,1103,5,115,0,0,1103,1104,3,140,
		70,13,1104,1106,1,0,0,0,1105,1042,1,0,0,0,1105,1045,1,0,0,0,1105,1048,
		1,0,0,0,1105,1051,1,0,0,0,1105,1054,1,0,0,0,1105,1057,1,0,0,0,1105,1060,
		1,0,0,0,1105,1063,1,0,0,0,1105,1066,1,0,0,0,1105,1069,1,0,0,0,1105,1072,
		1,0,0,0,1105,1075,1,0,0,0,1105,1078,1,0,0,0,1105,1081,1,0,0,0,1105,1084,
		1,0,0,0,1105,1087,1,0,0,0,1105,1090,1,0,0,0,1105,1093,1,0,0,0,1105,1096,
		1,0,0,0,1105,1099,1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1107,1108,
		1,0,0,0,1108,141,1,0,0,0,1109,1107,1,0,0,0,1110,1114,3,138,69,0,1111,1114,
		3,108,54,0,1112,1114,3,110,55,0,1113,1110,1,0,0,0,1113,1111,1,0,0,0,1113,
		1112,1,0,0,0,1114,1115,1,0,0,0,1115,1116,5,106,0,0,1116,1117,3,140,70,
		0,1117,1118,5,107,0,0,1118,143,1,0,0,0,1119,1124,3,142,71,0,1120,1124,
		3,138,69,0,1121,1124,3,104,52,0,1122,1124,3,102,51,0,1123,1119,1,0,0,0,
		1123,1120,1,0,0,0,1123,1121,1,0,0,0,1123,1122,1,0,0,0,1124,145,1,0,0,0,
		1125,1126,5,49,0,0,1126,1127,3,140,70,0,1127,1128,5,116,0,0,1128,147,1,
		0,0,0,1129,1130,5,57,0,0,1130,1131,5,116,0,0,1131,149,1,0,0,0,1132,1133,
		5,58,0,0,1133,1134,5,116,0,0,1134,151,1,0,0,0,1135,1136,5,59,0,0,1136,
		1137,5,116,0,0,1137,153,1,0,0,0,1138,1143,3,148,74,0,1139,1143,3,146,73,
		0,1140,1143,3,150,75,0,1141,1143,3,152,76,0,1142,1138,1,0,0,0,1142,1139,
		1,0,0,0,1142,1140,1,0,0,0,1142,1141,1,0,0,0,1143,155,1,0,0,0,1144,1145,
		3,72,36,0,1145,1146,5,116,0,0,1146,1158,1,0,0,0,1147,1148,3,140,70,0,1148,
		1149,5,116,0,0,1149,1158,1,0,0,0,1150,1158,3,92,46,0,1151,1158,3,114,57,
		0,1152,1158,3,120,60,0,1153,1158,3,124,62,0,1154,1158,3,126,63,0,1155,
		1158,3,128,64,0,1156,1158,3,112,56,0,1157,1144,1,0,0,0,1157,1147,1,0,0,
		0,1157,1150,1,0,0,0,1157,1151,1,0,0,0,1157,1152,1,0,0,0,1157,1153,1,0,
		0,0,1157,1154,1,0,0,0,1157,1155,1,0,0,0,1157,1156,1,0,0,0,1158,157,1,0,
		0,0,1159,1162,3,156,78,0,1160,1162,3,154,77,0,1161,1159,1,0,0,0,1161,1160,
		1,0,0,0,1162,159,1,0,0,0,1163,1170,5,158,0,0,1164,1170,5,159,0,0,1165,
		1170,5,160,0,0,1166,1170,5,161,0,0,1167,1170,5,162,0,0,1168,1170,5,163,
		0,0,1169,1163,1,0,0,0,1169,1164,1,0,0,0,1169,1165,1,0,0,0,1169,1166,1,
		0,0,0,1169,1167,1,0,0,0,1169,1168,1,0,0,0,1170,161,1,0,0,0,1171,1174,3,
		160,80,0,1172,1174,3,4,2,0,1173,1171,1,0,0,0,1173,1172,1,0,0,0,1174,163,
		1,0,0,0,1175,1182,3,168,84,0,1176,1178,5,106,0,0,1177,1179,5,161,0,0,1178,
		1177,1,0,0,0,1178,1179,1,0,0,0,1179,1180,1,0,0,0,1180,1181,5,107,0,0,1181,
		1183,6,82,-1,0,1182,1176,1,0,0,0,1182,1183,1,0,0,0,1183,1184,1,0,0,0,1184,
		1185,6,82,-1,0,1185,1209,1,0,0,0,1186,1193,3,170,85,0,1187,1189,5,106,
		0,0,1188,1190,5,161,0,0,1189,1188,1,0,0,0,1189,1190,1,0,0,0,1190,1191,
		1,0,0,0,1191,1192,5,107,0,0,1192,1194,6,82,-1,0,1193,1187,1,0,0,0,1193,
		1194,1,0,0,0,1194,1195,1,0,0,0,1195,1196,6,82,-1,0,1196,1209,1,0,0,0,1197,
		1204,3,166,83,0,1198,1200,5,106,0,0,1199,1201,5,161,0,0,1200,1199,1,0,
		0,0,1200,1201,1,0,0,0,1201,1202,1,0,0,0,1202,1203,5,107,0,0,1203,1205,
		6,82,-1,0,1204,1198,1,0,0,0,1204,1205,1,0,0,0,1205,1206,1,0,0,0,1206,1207,
		6,82,-1,0,1207,1209,1,0,0,0,1208,1175,1,0,0,0,1208,1186,1,0,0,0,1208,1197,
		1,0,0,0,1209,165,1,0,0,0,1210,1211,3,4,2,0,1211,167,1,0,0,0,1212,1220,
		5,66,0,0,1213,1220,5,67,0,0,1214,1220,5,68,0,0,1215,1220,5,69,0,0,1216,
		1220,5,70,0,0,1217,1220,5,71,0,0,1218,1220,5,72,0,0,1219,1212,1,0,0,0,
		1219,1213,1,0,0,0,1219,1214,1,0,0,0,1219,1215,1,0,0,0,1219,1216,1,0,0,
		0,1219,1217,1,0,0,0,1219,1218,1,0,0,0,1220,169,1,0,0,0,1221,1253,5,73,
		0,0,1222,1253,5,74,0,0,1223,1253,5,75,0,0,1224,1253,5,76,0,0,1225,1253,
		5,77,0,0,1226,1253,5,78,0,0,1227,1253,5,79,0,0,1228,1253,5,80,0,0,1229,
		1253,5,81,0,0,1230,1253,5,82,0,0,1231,1253,5,83,0,0,1232,1253,5,84,0,0,
		1233,1253,5,85,0,0,1234,1253,5,86,0,0,1235,1253,5,87,0,0,1236,1253,5,88,
		0,0,1237,1253,5,89,0,0,1238,1253,5,90,0,0,1239,1253,5,91,0,0,1240,1253,
		5,92,0,0,1241,1253,5,93,0,0,1242,1253,5,94,0,0,1243,1253,5,95,0,0,1244,
		1253,5,96,0,0,1245,1253,5,97,0,0,1246,1253,5,99,0,0,1247,1253,5,98,0,0,
		1248,1253,5,100,0,0,1249,1253,5,101,0,0,1250,1253,5,102,0,0,1251,1253,
		5,103,0,0,1252,1221,1,0,0,0,1252,1222,1,0,0,0,1252,1223,1,0,0,0,1252,1224,
		1,0,0,0,1252,1225,1,0,0,0,1252,1226,1,0,0,0,1252,1227,1,0,0,0,1252,1228,
		1,0,0,0,1252,1229,1,0,0,0,1252,1230,1,0,0,0,1252,1231,1,0,0,0,1252,1232,
		1,0,0,0,1252,1233,1,0,0,0,1252,1234,1,0,0,0,1252,1235,1,0,0,0,1252,1236,
		1,0,0,0,1252,1237,1,0,0,0,1252,1238,1,0,0,0,1252,1239,1,0,0,0,1252,1240,
		1,0,0,0,1252,1241,1,0,0,0,1252,1242,1,0,0,0,1252,1243,1,0,0,0,1252,1244,
		1,0,0,0,1252,1245,1,0,0,0,1252,1246,1,0,0,0,1252,1247,1,0,0,0,1252,1248,
		1,0,0,0,1252,1249,1,0,0,0,1252,1250,1,0,0,0,1252,1251,1,0,0,0,1253,171,
		1,0,0,0,127,175,181,185,190,196,202,216,225,229,252,270,275,283,289,297,
		305,311,316,324,334,342,350,359,366,372,380,386,392,400,404,413,417,422,
		430,436,442,448,454,460,468,476,482,488,494,500,506,513,519,523,527,530,
		536,540,554,558,560,570,575,585,588,591,595,611,616,624,632,642,650,660,
		668,672,675,683,691,701,711,715,720,726,734,739,749,754,759,769,776,785,
		789,797,801,807,818,823,830,834,841,853,858,870,880,884,889,907,916,921,
		926,956,965,1040,1105,1107,1113,1123,1142,1157,1161,1169,1173,1178,1182,
		1189,1193,1200,1204,1208,1219,1252
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SPSL.Language
