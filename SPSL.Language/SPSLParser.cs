//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Aliens_Group\Sparky_Studios\spsl\SPSL.Language\SPSL.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SPSL.Language {

using SPSL.Language.AST;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SPSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		KEYWORD_NAMESPACE=10, KEYWORD_ABSTRACT=11, KEYWORD_VERTEX=12, KEYWORD_FRAGMENT=13, 
		KEYWORD_PIXEL=14, KEYWORD_GEOMETRY=15, KEYWORD_HULL=16, KEYWORD_DOMAIN=17, 
		KEYWORD_COMPUTE=18, KEYWORD_SHADER=19, KEYWORD_INTERFACE=20, KEYWORD_MATERIAL=21, 
		KEYWORD_PARTIAL=22, KEYWORD_PARAMS=23, KEYWORD_TYPE=24, KEYWORD_AS=25, 
		KEYWORD_IN=26, KEYWORD_OF=27, KEYWORD_OUT=28, KEYWORD_INOUT=29, KEYWORD_EXTENDS=30, 
		KEYWORD_IMPLEMENTS=31, KEYWORD_USE=32, KEYWORD_VAR=33, KEYWORD_INPUT=34, 
		KEYWORD_OUTPUT=35, KEYWORD_BUFFER=36, KEYWORD_LOCAL=37, KEYWORD_GLOBAL=38, 
		KEYWORD_OVERRIDE=39, KEYWORD_THIS=40, KEYWORD_BASE=41, KEYWORD_STRUCT=42, 
		KEYWORD_ENUM=43, KEYWORD_RETURN=44, KEYWORD_IF=45, KEYWORD_ELIF=46, KEYWORD_ELSE=47, 
		KEYWORD_SWITCH=48, KEYWORD_FOR=49, KEYWORD_DO=50, KEYWORD_WHILE=51, KEYWORD_BREAK=52, 
		KEYWORD_CONTINUE=53, KEYWORD_DISCARD=54, KEYWORD_CASE=55, KEYWORD_DEFAULT=56, 
		KEYWORD_STATIC=57, KEYWORD_CONST=58, TYPE_VOID=59, TYPE_BOOL=60, TYPE_INT=61, 
		TYPE_UINT=62, TYPE_FLOAT=63, TYPE_DOUBLE=64, TYPE_STRING=65, TYPE_VECTOR2B=66, 
		TYPE_VECTOR2F=67, TYPE_VECTOR2I=68, TYPE_VECTOR2UI=69, TYPE_VECTOR3B=70, 
		TYPE_VECTOR3F=71, TYPE_VECTOR3I=72, TYPE_VECTOR3UI=73, TYPE_VECTOR4B=74, 
		TYPE_VECTOR4F=75, TYPE_VECTOR4I=76, TYPE_VECTOR4UI=77, TYPE_MATRIX2F=78, 
		TYPE_MATRIX3F=79, TYPE_MATRIX4F=80, TYPE_MATRIX2X3F=81, TYPE_MATRIX2X4F=82, 
		TYPE_MATRIX3X2F=83, TYPE_MATRIX3X4F=84, TYPE_MATRIX4X2F=85, TYPE_MATRIX4X3F=86, 
		TYPE_COLOR3=87, TYPE_COLOR4=88, TYPE_SAMPLER=89, TYPE_TEXTURE1D=90, TYPE_TEXTURE2D=91, 
		TYPE_TEXTURE1DARRAY=92, TYPE_TEXTURE2DARRAY=93, TYPE_TEXTURE3D=94, TYPE_CUBEMAP=95, 
		TYPE_CUBEMAPARRAY=96, TOK_OPEN_PAREN=97, TOK_CLOSE_PAREN=98, TOK_OPEN_BRACKET=99, 
		TOK_CLOSE_BRACKET=100, TOK_OPEN_BRACE=101, TOK_CLOSE_BRACE=102, TOK_DOT=103, 
		TOK_UNDERSCORE=104, TOK_TILDE=105, TOK_EXCLAMATION=106, TOK_QUESTION=107, 
		TOK_COLON=108, TOK_SEMICOLON=109, TOK_COMMA=110, TOK_HASHTAG=111, TOK_DOLLAR=112, 
		TOK_AT=113, TOK_BACKSLASH=114, OP_PIPE=115, OP_AMPERSAND=116, OP_PLUS=117, 
		OP_MINUS=118, OP_ASTERISK=119, OP_EXPONENT=120, OP_MODULUS=121, OP_DIV=122, 
		OP_ASSIGN=123, OP_EQUAL=124, OP_DIFFERENT=125, OP_GREATER_THAN=126, OP_LESSER_THAN=127, 
		OP_GEQ_THAN=128, OP_LEQ_THAN=129, OP_INCREMENT=130, OP_DECREMENT=131, 
		OP_PLUS_ASSIGN=132, OP_MINUS_ASSIGN=133, OP_MUL_ASSIGN=134, OP_DIV_ASSIGN=135, 
		OP_MODULUS_ASSIGN=136, OP_BITWISE_OR_ASSIGN=137, OP_BITWISE_AND_ASSIGN=138, 
		OP_EXPONENT_ASSIGN=139, OP_LSHIFT_ASSIGN=140, OP_RSHIFT_ASSIGN=141, OP_OR=142, 
		OP_AND=143, OP_XOR=144, OP_LSHIFT=145, OP_RSHIFT=146, WHITESPACE=147, 
		DOC_COMMENT=148, BLOCK_COMMENT=149, LINE_COMMENT=150, IDENTIFIER=151, 
		BoolLiteral=152, DoubleLiteral=153, FloatLiteral=154, IntegerLiteral=155, 
		UnsignedIntegerLiteral=156, StringLiteral=157;
	public const int
		RULE_file = 0, RULE_namespaceDefinition = 1, RULE_namespacedTypeName = 2, 
		RULE_fileLevelDefinition = 3, RULE_globalVariable = 4, RULE_type = 5, 
		RULE_structDefinition = 6, RULE_enumDefinition = 7, RULE_interface = 8, 
		RULE_interfaceDefinition = 9, RULE_interfacesList = 10, RULE_shaderFragment = 11, 
		RULE_shaderFragmentDefinition = 12, RULE_shader = 13, RULE_material = 14, 
		RULE_materialDefinition = 15, RULE_shaderDefinition = 16, RULE_useDirective = 17, 
		RULE_shaderMember = 18, RULE_materialMember = 19, RULE_annotation = 20, 
		RULE_directive = 21, RULE_precisionDirective = 22, RULE_shaderLangDirective = 23, 
		RULE_parameterDirective = 24, RULE_materialParams = 25, RULE_inputVarDefinition = 26, 
		RULE_localVarDeclaration = 27, RULE_bufferDefinition = 28, RULE_bufferComponent = 29, 
		RULE_structComponent = 30, RULE_enumComponent = 31, RULE_variableDeclaration = 32, 
		RULE_variableDeclarationAssignment = 33, RULE_variableIdentity = 34, RULE_shaderFunction = 35, 
		RULE_function = 36, RULE_functionHead = 37, RULE_functionSignature = 38, 
		RULE_argList = 39, RULE_argDef = 40, RULE_functionBody = 41, RULE_statementBlock = 42, 
		RULE_referencableExpression = 43, RULE_chainableExpression = 44, RULE_chainedExpression = 45, 
		RULE_assignableChainedExpression = 46, RULE_propertyMemberReferenceExpression = 47, 
		RULE_methodMemberReferenceExpression = 48, RULE_memberReferenceExpression = 49, 
		RULE_invocationExpression = 50, RULE_ifStatement = 51, RULE_elifStatement = 52, 
		RULE_elseStatement = 53, RULE_switchStatement = 54, RULE_caseStatement = 55, 
		RULE_whileStatement = 56, RULE_forStatement = 57, RULE_doWhileStatement = 58, 
		RULE_parenthesizedExpression = 59, RULE_newInstanceExpression = 60, RULE_parametersList = 61, 
		RULE_contextAccessExpression = 62, RULE_basicExpression = 63, RULE_expressionStatement = 64, 
		RULE_arrayAccessExpression = 65, RULE_assignableExpression = 66, RULE_returnStatement = 67, 
		RULE_breakStatement = 68, RULE_continueStatement = 69, RULE_discardStatement = 70, 
		RULE_leaveControlFlowStatement = 71, RULE_stayControlFlowStatement = 72, 
		RULE_statement = 73, RULE_primitiveExpression = 74, RULE_constantExpression = 75, 
		RULE_dataType = 76, RULE_userDefinedDataType = 77, RULE_primitiveDataType = 78, 
		RULE_builtinDataType = 79;
	public static readonly string[] ruleNames = {
		"file", "namespaceDefinition", "namespacedTypeName", "fileLevelDefinition", 
		"globalVariable", "type", "structDefinition", "enumDefinition", "interface", 
		"interfaceDefinition", "interfacesList", "shaderFragment", "shaderFragmentDefinition", 
		"shader", "material", "materialDefinition", "shaderDefinition", "useDirective", 
		"shaderMember", "materialMember", "annotation", "directive", "precisionDirective", 
		"shaderLangDirective", "parameterDirective", "materialParams", "inputVarDefinition", 
		"localVarDeclaration", "bufferDefinition", "bufferComponent", "structComponent", 
		"enumComponent", "variableDeclaration", "variableDeclarationAssignment", 
		"variableIdentity", "shaderFunction", "function", "functionHead", "functionSignature", 
		"argList", "argDef", "functionBody", "statementBlock", "referencableExpression", 
		"chainableExpression", "chainedExpression", "assignableChainedExpression", 
		"propertyMemberReferenceExpression", "methodMemberReferenceExpression", 
		"memberReferenceExpression", "invocationExpression", "ifStatement", "elifStatement", 
		"elseStatement", "switchStatement", "caseStatement", "whileStatement", 
		"forStatement", "doWhileStatement", "parenthesizedExpression", "newInstanceExpression", 
		"parametersList", "contextAccessExpression", "basicExpression", "expressionStatement", 
		"arrayAccessExpression", "assignableExpression", "returnStatement", "breakStatement", 
		"continueStatement", "discardStatement", "leaveControlFlowStatement", 
		"stayControlFlowStatement", "statement", "primitiveExpression", "constantExpression", 
		"dataType", "userDefinedDataType", "primitiveDataType", "builtinDataType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'precision'", "'low'", "'medium'", "'high'", "'shaderLang'", "'GLSL'", 
		"'HLSL'", "'MSL'", "'shaderParam'", "'namespace'", "'abstract'", "'vertex'", 
		"'fragment'", "'pixel'", "'geometry'", "'hull'", "'domain'", "'compute'", 
		"'shader'", "'interface'", "'material'", "'partial'", "'params'", "'type'", 
		"'as'", "'in'", "'of'", "'out'", "'inout'", "'extends'", "'implements'", 
		"'use'", "'var'", "'input'", "'output'", "'buffer'", "'local'", "'global'", 
		"'override'", "'this'", "'base'", "'struct'", "'enum'", "'return'", "'if'", 
		"'elif'", "'else'", "'switch'", "'for'", "'do'", "'while'", "'break'", 
		"'continue'", "'discard'", "'case'", "'default'", "'static'", "'const'", 
		"'void'", "'bool'", "'int'", "'uint'", "'float'", "'double'", "'string'", 
		"'vector2b'", "'vector2f'", "'vector2i'", "'vector2ui'", "'vector3b'", 
		"'vector3f'", "'vector3i'", "'vector3ui'", "'vector4b'", "'vector4f'", 
		"'vector4i'", "'vector4ui'", "'matrix2f'", "'matrix3f'", "'matrix4f'", 
		"'matrix2x3f'", "'matrix2x4f'", "'matrix3x2f'", "'matrix3x4f'", "'matrix4x2f'", 
		"'matrix4x3f'", "'color3'", "'color4'", "'sampler'", "'texture1d'", "'texture2d'", 
		"'texture1dArray'", "'texture2dArray'", "'texture3d'", "'cubemap'", "'cubemapArray'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'.'", "'_'", "'~'", "'!'", 
		"'?'", "':'", "';'", "','", "'#'", "'$'", "'@'", "'\\'", "'|'", "'&'", 
		"'+'", "'-'", "'*'", "'^'", "'%'", "'/'", "'='", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'|='", "'&='", "'^='", "'<<='", "'>>='", null, null, "'^^'", 
		"'<<'", "'>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "KEYWORD_NAMESPACE", 
		"KEYWORD_ABSTRACT", "KEYWORD_VERTEX", "KEYWORD_FRAGMENT", "KEYWORD_PIXEL", 
		"KEYWORD_GEOMETRY", "KEYWORD_HULL", "KEYWORD_DOMAIN", "KEYWORD_COMPUTE", 
		"KEYWORD_SHADER", "KEYWORD_INTERFACE", "KEYWORD_MATERIAL", "KEYWORD_PARTIAL", 
		"KEYWORD_PARAMS", "KEYWORD_TYPE", "KEYWORD_AS", "KEYWORD_IN", "KEYWORD_OF", 
		"KEYWORD_OUT", "KEYWORD_INOUT", "KEYWORD_EXTENDS", "KEYWORD_IMPLEMENTS", 
		"KEYWORD_USE", "KEYWORD_VAR", "KEYWORD_INPUT", "KEYWORD_OUTPUT", "KEYWORD_BUFFER", 
		"KEYWORD_LOCAL", "KEYWORD_GLOBAL", "KEYWORD_OVERRIDE", "KEYWORD_THIS", 
		"KEYWORD_BASE", "KEYWORD_STRUCT", "KEYWORD_ENUM", "KEYWORD_RETURN", "KEYWORD_IF", 
		"KEYWORD_ELIF", "KEYWORD_ELSE", "KEYWORD_SWITCH", "KEYWORD_FOR", "KEYWORD_DO", 
		"KEYWORD_WHILE", "KEYWORD_BREAK", "KEYWORD_CONTINUE", "KEYWORD_DISCARD", 
		"KEYWORD_CASE", "KEYWORD_DEFAULT", "KEYWORD_STATIC", "KEYWORD_CONST", 
		"TYPE_VOID", "TYPE_BOOL", "TYPE_INT", "TYPE_UINT", "TYPE_FLOAT", "TYPE_DOUBLE", 
		"TYPE_STRING", "TYPE_VECTOR2B", "TYPE_VECTOR2F", "TYPE_VECTOR2I", "TYPE_VECTOR2UI", 
		"TYPE_VECTOR3B", "TYPE_VECTOR3F", "TYPE_VECTOR3I", "TYPE_VECTOR3UI", "TYPE_VECTOR4B", 
		"TYPE_VECTOR4F", "TYPE_VECTOR4I", "TYPE_VECTOR4UI", "TYPE_MATRIX2F", "TYPE_MATRIX3F", 
		"TYPE_MATRIX4F", "TYPE_MATRIX2X3F", "TYPE_MATRIX2X4F", "TYPE_MATRIX3X2F", 
		"TYPE_MATRIX3X4F", "TYPE_MATRIX4X2F", "TYPE_MATRIX4X3F", "TYPE_COLOR3", 
		"TYPE_COLOR4", "TYPE_SAMPLER", "TYPE_TEXTURE1D", "TYPE_TEXTURE2D", "TYPE_TEXTURE1DARRAY", 
		"TYPE_TEXTURE2DARRAY", "TYPE_TEXTURE3D", "TYPE_CUBEMAP", "TYPE_CUBEMAPARRAY", 
		"TOK_OPEN_PAREN", "TOK_CLOSE_PAREN", "TOK_OPEN_BRACKET", "TOK_CLOSE_BRACKET", 
		"TOK_OPEN_BRACE", "TOK_CLOSE_BRACE", "TOK_DOT", "TOK_UNDERSCORE", "TOK_TILDE", 
		"TOK_EXCLAMATION", "TOK_QUESTION", "TOK_COLON", "TOK_SEMICOLON", "TOK_COMMA", 
		"TOK_HASHTAG", "TOK_DOLLAR", "TOK_AT", "TOK_BACKSLASH", "OP_PIPE", "OP_AMPERSAND", 
		"OP_PLUS", "OP_MINUS", "OP_ASTERISK", "OP_EXPONENT", "OP_MODULUS", "OP_DIV", 
		"OP_ASSIGN", "OP_EQUAL", "OP_DIFFERENT", "OP_GREATER_THAN", "OP_LESSER_THAN", 
		"OP_GEQ_THAN", "OP_LEQ_THAN", "OP_INCREMENT", "OP_DECREMENT", "OP_PLUS_ASSIGN", 
		"OP_MINUS_ASSIGN", "OP_MUL_ASSIGN", "OP_DIV_ASSIGN", "OP_MODULUS_ASSIGN", 
		"OP_BITWISE_OR_ASSIGN", "OP_BITWISE_AND_ASSIGN", "OP_EXPONENT_ASSIGN", 
		"OP_LSHIFT_ASSIGN", "OP_RSHIFT_ASSIGN", "OP_OR", "OP_AND", "OP_XOR", "OP_LSHIFT", 
		"OP_RSHIFT", "WHITESPACE", "DOC_COMMENT", "BLOCK_COMMENT", "LINE_COMMENT", 
		"IDENTIFIER", "BoolLiteral", "DoubleLiteral", "FloatLiteral", "IntegerLiteral", 
		"UnsignedIntegerLiteral", "StringLiteral"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SPSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SPSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SPSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SPSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public DirectiveContext Directives;
		public NamespaceDefinitionContext Namespace;
		public FileLevelDefinitionContext FileLevelDefinitions;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SPSLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDefinitionContext namespaceDefinition() {
			return GetRuleContext<NamespaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelDefinitionContext[] fileLevelDefinition() {
			return GetRuleContexts<FileLevelDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelDefinitionContext fileLevelDefinition(int i) {
			return GetRuleContext<FileLevelDefinitionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_HASHTAG) {
				{
				{
				State = 160;
				_localctx.Directives = directive();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 169;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 166;
					Match(DOC_COMMENT);
					}
					} 
				}
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_NAMESPACE) {
				{
				State = 172;
				_localctx.Namespace = namespaceDefinition();
				}
			}

			State = 184;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 175;
						Match(DOC_COMMENT);
						}
						}
						State = 180;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 181;
					useDirective();
					}
					} 
				}
				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 432345564246439936L) != 0 || _la==DOC_COMMENT) {
				{
				{
				State = 187;
				_localctx.FileLevelDefinitions = fileLevelDefinition();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 193;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDefinitionContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_NAMESPACE() { return GetToken(SPSLParser.KEYWORD_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public NamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDefinitionContext namespaceDefinition() {
		NamespaceDefinitionContext _localctx = new NamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(KEYWORD_NAMESPACE);
			State = 196;
			_localctx.Name = namespacedTypeName();
			State = 197;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_BACKSLASH() { return GetTokens(SPSLParser.TOK_BACKSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_BACKSLASH(int i) {
			return GetToken(SPSLParser.TOK_BACKSLASH, i);
		}
		public NamespacedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNamespacedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNamespacedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacedTypeNameContext namespacedTypeName() {
		NamespacedTypeNameContext _localctx = new NamespacedTypeNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespacedTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(IDENTIFIER);
			State = 204;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 200;
					Match(TOK_BACKSLASH);
					State = 201;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 206;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileLevelDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface() {
			return GetRuleContext<InterfaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFragmentContext shaderFragment() {
			return GetRuleContext<ShaderFragmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderContext shader() {
			return GetRuleContext<ShaderContext>(0);
		}
		public FileLevelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileLevelDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFileLevelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFileLevelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileLevelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileLevelDefinitionContext fileLevelDefinition() {
		FileLevelDefinitionContext _localctx = new FileLevelDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_fileLevelDefinition);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				globalVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 208;
				type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 209;
				@interface();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 210;
				shaderFragment();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 211;
				shader();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public bool IsStatic;
		public DataTypeContext Type;
		public VariableDeclarationAssignmentContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STATIC() { return GetToken(SPSLParser.KEYWORD_STATIC, 0); }
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 8, RULE_globalVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_STATIC) {
				{
				State = 214;
				Match(KEYWORD_STATIC);
				_localctx.IsStatic =  true;
				}
			}

			State = 218;
			Match(KEYWORD_CONST);
			State = 219;
			_localctx.Type = dataType();
			State = 220;
			_localctx.Definition = variableDeclarationAssignment();
			State = 221;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumContext : TypeContext {
		public EnumDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumComponentContext[] enumComponent() {
			return GetRuleContexts<EnumComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumComponentContext enumComponent(int i) {
			return GetRuleContext<EnumComponentContext>(i);
		}
		public EnumContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructContext : TypeContext {
		public StructDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructComponentContext[] structComponent() {
			return GetRuleContexts<StructComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructComponentContext structComponent(int i) {
			return GetRuleContext<StructComponentContext>(i);
		}
		public StructContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new StructContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 223;
					Match(DOC_COMMENT);
					}
					}
					State = 228;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 229;
				((StructContext)_localctx).Definition = structDefinition();
				State = 230;
				Match(TOK_OPEN_BRACE);
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 18014673387388927L) != 0 || _la==DOC_COMMENT || _la==IDENTIFIER) {
					{
					{
					State = 234;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 231;
						Match(DOC_COMMENT);
						}
						}
						State = 236;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 237;
					structComponent();
					}
					}
					State = 242;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 243;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			case 2:
				_localctx = new EnumContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 245;
					Match(DOC_COMMENT);
					}
					}
					State = 250;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 251;
				((EnumContext)_localctx).Definition = enumDefinition();
				State = 252;
				Match(TOK_OPEN_BRACE);
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT || _la==IDENTIFIER) {
					{
					{
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 253;
						Match(DOC_COMMENT);
						}
						}
						State = 258;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 259;
					enumComponent();
					}
					}
					State = 264;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 265;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public IToken Name;
		public NamespacedTypeNameContext ExtendedType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TYPE() { return GetToken(SPSLParser.KEYWORD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STRUCT() { return GetToken(SPSLParser.KEYWORD_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(KEYWORD_TYPE);
			State = 270;
			_localctx.Name = Match(IDENTIFIER);
			State = 271;
			Match(KEYWORD_AS);
			State = 272;
			Match(KEYWORD_STRUCT);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 273;
				Match(KEYWORD_EXTENDS);
				State = 274;
				_localctx.ExtendedType = namespacedTypeName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TYPE() { return GetToken(SPSLParser.KEYWORD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ENUM() { return GetToken(SPSLParser.KEYWORD_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_enumDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(KEYWORD_TYPE);
			State = 278;
			_localctx.Name = Match(IDENTIFIER);
			State = 279;
			Match(KEYWORD_AS);
			State = 280;
			Match(KEYWORD_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		public InterfaceDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDefinitionContext interfaceDefinition() {
			return GetRuleContext<InterfaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext[] functionHead() {
			return GetRuleContexts<FunctionHeadContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead(int i) {
			return GetRuleContext<FunctionHeadContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_SEMICOLON() { return GetTokens(SPSLParser.TOK_SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON(int i) {
			return GetToken(SPSLParser.TOK_SEMICOLON, i);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 16, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 282;
				Match(DOC_COMMENT);
				}
				}
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 288;
			_localctx.Definition = interfaceDefinition();
			State = 289;
			Match(TOK_OPEN_BRACE);
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 274877906943L) != 0 || _la==DOC_COMMENT || _la==IDENTIFIER) {
				{
				{
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 290;
					Match(DOC_COMMENT);
					}
					}
					State = 295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 296;
				functionHead();
				State = 297;
				Match(TOK_SEMICOLON);
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 304;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDefinitionContext : ParserRuleContext {
		public IToken Name;
		public InterfacesListContext ExtendedInterfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INTERFACE() { return GetToken(SPSLParser.KEYWORD_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public InterfaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterfaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterfaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefinitionContext interfaceDefinition() {
		InterfaceDefinitionContext _localctx = new InterfaceDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_interfaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(KEYWORD_INTERFACE);
			State = 307;
			_localctx.Name = Match(IDENTIFIER);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 308;
				Match(KEYWORD_EXTENDS);
				State = 309;
				_localctx.ExtendedInterfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfacesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext[] namespacedTypeName() {
			return GetRuleContexts<NamespacedTypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName(int i) {
			return GetRuleContext<NamespacedTypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public InterfacesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfacesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterfacesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterfacesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfacesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfacesListContext interfacesList() {
		InterfacesListContext _localctx = new InterfacesListContext(Context, State);
		EnterRule(_localctx, 20, RULE_interfacesList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			namespacedTypeName();
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 313;
				Match(TOK_COMMA);
				State = 314;
				namespacedTypeName();
				}
				}
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFragmentContext : ParserRuleContext {
		public ShaderFragmentDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFragmentDefinitionContext shaderFragmentDefinition() {
			return GetRuleContext<ShaderFragmentDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext[] bufferDefinition() {
			return GetRuleContexts<BufferDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext bufferDefinition(int i) {
			return GetRuleContext<BufferDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext[] globalVariable() {
			return GetRuleContexts<GlobalVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext globalVariable(int i) {
			return GetRuleContext<GlobalVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public ShaderFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFragment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFragment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFragment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFragmentContext shaderFragment() {
		ShaderFragmentContext _localctx = new ShaderFragmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_shaderFragment);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 320;
				Match(DOC_COMMENT);
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 326;
			_localctx.Definition = shaderFragmentDefinition();
			State = 327;
			Match(TOK_OPEN_BRACE);
			State = 337;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 331;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 328;
						Match(DOC_COMMENT);
						}
						}
						State = 333;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 334;
					useDirective();
					}
					} 
				}
				State = 339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & -8589897727L) != 0 || (((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & -8070450532214373889L) != 0) {
				{
				{
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 340;
						Match(DOC_COMMENT);
						}
						} 
					}
					State = 345;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				State = 350;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
				case 1:
					{
					State = 346;
					bufferDefinition();
					}
					break;
				case 2:
					{
					State = 347;
					globalVariable();
					}
					break;
				case 3:
					{
					State = 348;
					type();
					}
					break;
				case 4:
					{
					State = 349;
					shaderFunction();
					}
					break;
				}
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 357;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFragmentDefinitionContext : ParserRuleContext {
		public IToken Name;
		public NamespacedTypeNameContext ExtendedFragment;
		public InterfacesListContext ExtendedInterfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FRAGMENT() { return GetToken(SPSLParser.KEYWORD_FRAGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public ShaderFragmentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFragmentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFragmentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFragmentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFragmentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFragmentDefinitionContext shaderFragmentDefinition() {
		ShaderFragmentDefinitionContext _localctx = new ShaderFragmentDefinitionContext(Context, State);
		EnterRule(_localctx, 24, RULE_shaderFragmentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(KEYWORD_FRAGMENT);
			State = 360;
			_localctx.Name = Match(IDENTIFIER);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 361;
				Match(KEYWORD_EXTENDS);
				State = 362;
				_localctx.ExtendedFragment = namespacedTypeName();
				}
			}

			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_IMPLEMENTS) {
				{
				State = 365;
				Match(KEYWORD_IMPLEMENTS);
				State = 366;
				_localctx.ExtendedInterfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderContext : ParserRuleContext {
		public ShaderDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDefinitionContext shaderDefinition() {
			return GetRuleContext<ShaderDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext[] shaderMember() {
			return GetRuleContexts<ShaderMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext shaderMember(int i) {
			return GetRuleContext<ShaderMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public ShaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderContext shader() {
		ShaderContext _localctx = new ShaderContext(Context, State);
		EnterRule(_localctx, 26, RULE_shader);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 369;
				Match(DOC_COMMENT);
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 375;
			_localctx.Definition = shaderDefinition();
			State = 376;
			Match(TOK_OPEN_BRACE);
			State = 386;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 380;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 377;
						Match(DOC_COMMENT);
						}
						}
						State = 382;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 383;
					useDirective();
					}
					} 
				}
				State = 388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			State = 398;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 392;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 389;
							Match(DOC_COMMENT);
							}
							} 
						}
						State = 394;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
					}
					State = 395;
					shaderMember();
					}
					} 
				}
				State = 400;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 288230376150663169L) != 0 || (((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 309237645313L) != 0) {
				{
				{
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 401;
					Match(DOC_COMMENT);
					}
					}
					State = 406;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 407;
				shaderFunction();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 413;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialContext : ParserRuleContext {
		public MaterialDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialDefinitionContext materialDefinition() {
			return GetRuleContext<MaterialDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialMemberContext[] materialMember() {
			return GetRuleContexts<MaterialMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialMemberContext materialMember(int i) {
			return GetRuleContext<MaterialMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public MaterialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_material; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialContext material() {
		MaterialContext _localctx = new MaterialContext(Context, State);
		EnterRule(_localctx, 28, RULE_material);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 415;
				Match(DOC_COMMENT);
				}
				}
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 421;
			_localctx.Definition = materialDefinition();
			State = 422;
			Match(TOK_OPEN_BRACE);
			State = 432;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 426;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 423;
						Match(DOC_COMMENT);
						}
						}
						State = 428;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 429;
					useDirective();
					}
					} 
				}
				State = 434;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			State = 444;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 438;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 435;
							Match(DOC_COMMENT);
							}
							} 
						}
						State = 440;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
					}
					State = 441;
					materialMember();
					}
					} 
				}
				State = 446;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 288230376150663169L) != 0 || (((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 309237645313L) != 0) {
				{
				{
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 447;
					Match(DOC_COMMENT);
					}
					}
					State = 452;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 453;
				shaderFunction();
				}
				}
				State = 458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 459;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialDefinitionContext : ParserRuleContext {
		public bool IsAbstract;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedMaterial;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_MATERIAL() { return GetToken(SPSLParser.KEYWORD_MATERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public MaterialDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialDefinitionContext materialDefinition() {
		MaterialDefinitionContext _localctx = new MaterialDefinitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_materialDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ABSTRACT) {
				{
				State = 461;
				Match(KEYWORD_ABSTRACT);
				_localctx.IsAbstract =  true;
				}
			}

			State = 465;
			Match(KEYWORD_MATERIAL);
			State = 466;
			_localctx.Name = Match(IDENTIFIER);
			State = 469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 467;
				Match(KEYWORD_EXTENDS);
				State = 468;
				_localctx.ExtendedMaterial = namespacedTypeName();
				}
			}

			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_IMPLEMENTS) {
				{
				State = 471;
				Match(KEYWORD_IMPLEMENTS);
				State = 472;
				_localctx.Interfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderDefinitionContext : ParserRuleContext {
		public bool IsAbstract;
		public IToken Type;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedShader;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VERTEX() { return GetToken(SPSLParser.KEYWORD_VERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PIXEL() { return GetToken(SPSLParser.KEYWORD_PIXEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_GEOMETRY() { return GetToken(SPSLParser.KEYWORD_GEOMETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_HULL() { return GetToken(SPSLParser.KEYWORD_HULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DOMAIN() { return GetToken(SPSLParser.KEYWORD_DOMAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_COMPUTE() { return GetToken(SPSLParser.KEYWORD_COMPUTE, 0); }
		public ShaderDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderDefinitionContext shaderDefinition() {
		ShaderDefinitionContext _localctx = new ShaderDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_shaderDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ABSTRACT) {
				{
				State = 475;
				Match(KEYWORD_ABSTRACT);
				_localctx.IsAbstract =  true;
				}
			}

			State = 480;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 512000L) != 0) {
				{
				State = 479;
				_localctx.Type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 512000L) != 0) ) {
					_localctx.Type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 482;
			Match(KEYWORD_SHADER);
			State = 483;
			_localctx.Name = Match(IDENTIFIER);
			State = 486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 484;
				Match(KEYWORD_EXTENDS);
				State = 485;
				_localctx.ExtendedShader = namespacedTypeName();
				}
			}

			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_IMPLEMENTS) {
				{
				State = 488;
				Match(KEYWORD_IMPLEMENTS);
				State = 489;
				_localctx.Interfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDirectiveContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_USE() { return GetToken(SPSLParser.KEYWORD_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UseDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUseDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUseDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDirectiveContext useDirective() {
		UseDirectiveContext _localctx = new UseDirectiveContext(Context, State);
		EnterRule(_localctx, 34, RULE_useDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(KEYWORD_USE);
			State = 493;
			_localctx.Name = namespacedTypeName();
			State = 494;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDefinitionContext inputVarDefinition() {
			return GetRuleContext<InputVarDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclarationContext localVarDeclaration() {
			return GetRuleContext<LocalVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext bufferDefinition() {
			return GetRuleContext<BufferDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ShaderMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderMemberContext shaderMember() {
		ShaderMemberContext _localctx = new ShaderMemberContext(Context, State);
		EnterRule(_localctx, 36, RULE_shaderMember);
		try {
			State = 500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 496;
				inputVarDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 497;
				localVarDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 498;
				bufferDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 499;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MaterialParamsContext materialParams() {
			return GetRuleContext<MaterialParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclarationContext localVarDeclaration() {
			return GetRuleContext<LocalVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MaterialMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialMemberContext materialMember() {
		MaterialMemberContext _localctx = new MaterialMemberContext(Context, State);
		EnterRule(_localctx, 38, RULE_materialMember);
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 502;
				materialParams();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 503;
				localVarDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 504;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_AT() { return GetToken(SPSLParser.TOK_AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext[] constantExpression() {
			return GetRuleContexts<ConstantExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression(int i) {
			return GetRuleContext<ConstantExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 40, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(TOK_AT);
			State = 508;
			_localctx.Name = Match(IDENTIFIER);
			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOK_OPEN_PAREN) {
				{
				State = 509;
				Match(TOK_OPEN_PAREN);
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & 127L) != 0) {
					{
					State = 510;
					constantExpression();
					State = 515;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TOK_COMMA) {
						{
						{
						State = 511;
						Match(TOK_COMMA);
						State = 512;
						constantExpression();
						}
						}
						State = 517;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 520;
				Match(TOK_CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionDirectiveContext precisionDirective() {
			return GetRuleContext<PrecisionDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderLangDirectiveContext shaderLangDirective() {
			return GetRuleContext<ShaderLangDirectiveContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 42, RULE_directive);
		try {
			State = 525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				precisionDirective();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524;
				shaderLangDirective();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public PrecisionDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precisionDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrecisionDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrecisionDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecisionDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionDirectiveContext precisionDirective() {
		PrecisionDirectiveContext _localctx = new PrecisionDirectiveContext(Context, State);
		EnterRule(_localctx, 44, RULE_precisionDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			Match(TOK_HASHTAG);
			State = 528;
			Match(T__0);
			State = 529;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderLangDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public ShaderLangDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderLangDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderLangDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderLangDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderLangDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderLangDirectiveContext shaderLangDirective() {
		ShaderLangDirectiveContext _localctx = new ShaderLangDirectiveContext(Context, State);
		EnterRule(_localctx, 46, RULE_shaderLangDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			Match(TOK_HASHTAG);
			State = 532;
			Match(T__4);
			State = 533;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public ParameterDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParameterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParameterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDirectiveContext parameterDirective() {
		ParameterDirectiveContext _localctx = new ParameterDirectiveContext(Context, State);
		EnterRule(_localctx, 48, RULE_parameterDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(TOK_HASHTAG);
			State = 536;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialParamsContext : ParserRuleContext {
		public bool IsPartial;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PARAMS() { return GetToken(SPSLParser.KEYWORD_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PARTIAL() { return GetToken(SPSLParser.KEYWORD_PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext[] bufferComponent() {
			return GetRuleContexts<BufferComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext bufferComponent(int i) {
			return GetRuleContext<BufferComponentContext>(i);
		}
		public MaterialParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialParamsContext materialParams() {
		MaterialParamsContext _localctx = new MaterialParamsContext(Context, State);
		EnterRule(_localctx, 50, RULE_materialParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 538;
				annotation();
				}
				}
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 546;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_PARTIAL) {
				{
				State = 544;
				Match(KEYWORD_PARTIAL);
				_localctx.IsPartial =  true;
				}
			}

			State = 548;
			Match(KEYWORD_PARAMS);
			State = 549;
			_localctx.Name = Match(IDENTIFIER);
			State = 550;
			Match(TOK_OPEN_BRACE);
			State = 554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 18014673387388927L) != 0 || _la==IDENTIFIER) {
				{
				{
				State = 551;
				bufferComponent();
				}
				}
				State = 556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 557;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVarDefinitionContext : ParserRuleContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INPUT() { return GetToken(SPSLParser.KEYWORD_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public InputVarDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVarDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInputVarDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInputVarDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVarDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVarDefinitionContext inputVarDefinition() {
		InputVarDefinitionContext _localctx = new InputVarDefinitionContext(Context, State);
		EnterRule(_localctx, 52, RULE_inputVarDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 559;
				annotation();
				}
				}
				State = 564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 565;
			Match(KEYWORD_INPUT);
			State = 566;
			_localctx.Type = dataType();
			State = 567;
			Match(IDENTIFIER);
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 568;
				Match(TOK_COMMA);
				State = 569;
				Match(IDENTIFIER);
				}
				}
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 575;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarDeclarationContext : ParserRuleContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_LOCAL() { return GetToken(SPSLParser.KEYWORD_LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public LocalVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterLocalVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitLocalVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarDeclarationContext localVarDeclaration() {
		LocalVarDeclarationContext _localctx = new LocalVarDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_localVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 577;
				annotation();
				}
				}
				State = 582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 583;
			Match(KEYWORD_LOCAL);
			State = 584;
			_localctx.Type = dataType();
			State = 585;
			Match(IDENTIFIER);
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 586;
				Match(TOK_COMMA);
				State = 587;
				Match(IDENTIFIER);
				}
				}
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 593;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferDefinitionContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BUFFER() { return GetToken(SPSLParser.KEYWORD_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext[] bufferComponent() {
			return GetRuleContexts<BufferComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext bufferComponent(int i) {
			return GetRuleContext<BufferComponentContext>(i);
		}
		public BufferDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBufferDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferDefinitionContext bufferDefinition() {
		BufferDefinitionContext _localctx = new BufferDefinitionContext(Context, State);
		EnterRule(_localctx, 56, RULE_bufferDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 595;
				annotation();
				}
				}
				State = 600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 601;
			Match(KEYWORD_BUFFER);
			State = 602;
			_localctx.Name = Match(IDENTIFIER);
			State = 603;
			Match(TOK_OPEN_BRACE);
			State = 607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 18014673387388927L) != 0 || _la==IDENTIFIER) {
				{
				{
				State = 604;
				bufferComponent();
				}
				}
				State = 609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 610;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferComponentContext : ParserRuleContext {
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public BufferComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBufferComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBufferComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBufferComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferComponentContext bufferComponent() {
		BufferComponentContext _localctx = new BufferComponentContext(Context, State);
		EnterRule(_localctx, 58, RULE_bufferComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 612;
				annotation();
				}
				}
				State = 617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 618;
			_localctx.Type = dataType();
			State = 619;
			_localctx.Name = Match(IDENTIFIER);
			State = 620;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructComponentContext : ParserRuleContext {
		public StructComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structComponent; } }
	 
		public StructComponentContext() { }
		public virtual void CopyFrom(StructComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructPropertyContext : StructComponentContext {
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StructPropertyContext(StructComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructFunctionContext : StructComponentContext {
		public FunctionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StructFunctionContext(StructComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructComponentContext structComponent() {
		StructComponentContext _localctx = new StructComponentContext(Context, State);
		EnterRule(_localctx, 60, RULE_structComponent);
		int _la;
		try {
			State = 639;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				_localctx = new StructPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 622;
					annotation();
					}
					}
					State = 627;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 628;
				((StructPropertyContext)_localctx).Type = dataType();
				State = 629;
				((StructPropertyContext)_localctx).Name = Match(IDENTIFIER);
				State = 630;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				_localctx = new StructFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 632;
					annotation();
					}
					}
					State = 637;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 638;
				((StructFunctionContext)_localctx).Function = function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumComponentContext : ParserRuleContext {
		public IToken Name;
		public ConstantExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA() { return GetToken(SPSLParser.TOK_COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnumComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnumComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumComponentContext enumComponent() {
		EnumComponentContext _localctx = new EnumComponentContext(Context, State);
		EnterRule(_localctx, 62, RULE_enumComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			_localctx.Name = Match(IDENTIFIER);
			State = 644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASSIGN) {
				{
				State = 642;
				Match(OP_ASSIGN);
				State = 643;
				_localctx.Value = constantExpression();
				}
			}

			State = 646;
			Match(TOK_COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public bool IsConst;
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	 
		public VariableDeclarationContext() { }
		public virtual void CopyFrom(VariableDeclarationContext context) {
			base.CopyFrom(context);
			this.IsConst = context.IsConst;
		}
	}
	public partial class UntypedVariableDeclarationContext : VariableDeclarationContext {
		public VariableDeclarationAssignmentContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VAR() { return GetToken(SPSLParser.KEYWORD_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public UntypedVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUntypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUntypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedVariableDeclarationContext : VariableDeclarationContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentityContext[] variableIdentity() {
			return GetRuleContexts<VariableIdentityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentityContext variableIdentity(int i) {
			return GetRuleContext<VariableIdentityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public TypedVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_variableDeclaration);
		int _la;
		try {
			State = 663;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_CONST:
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
			case IDENTIFIER:
				_localctx = new TypedVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_CONST) {
					{
					State = 648;
					Match(KEYWORD_CONST);
					((TypedVariableDeclarationContext)_localctx).IsConst =  true;
					}
				}

				State = 652;
				((TypedVariableDeclarationContext)_localctx).Type = dataType();
				State = 653;
				variableIdentity();
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_COMMA) {
					{
					{
					State = 654;
					Match(TOK_COMMA);
					State = 655;
					variableIdentity();
					}
					}
					State = 660;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case KEYWORD_VAR:
				_localctx = new UntypedVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 661;
				Match(KEYWORD_VAR);
				State = 662;
				((UntypedVariableDeclarationContext)_localctx).Declaration = variableDeclarationAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationAssignmentContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public VariableDeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
		VariableDeclarationAssignmentContext _localctx = new VariableDeclarationAssignmentContext(Context, State);
		EnterRule(_localctx, 66, RULE_variableDeclarationAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			_localctx.Identifier = basicExpression();
			State = 666;
			Match(OP_ASSIGN);
			State = 667;
			_localctx.Expression = expressionStatement(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableIdentityContext : ParserRuleContext {
		public bool IsAssignment;
		public BasicExpressionContext Identifier;
		public VariableDeclarationAssignmentContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public VariableIdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableIdentity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterVariableIdentity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitVariableIdentity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableIdentityContext variableIdentity() {
		VariableIdentityContext _localctx = new VariableIdentityContext(Context, State);
		EnterRule(_localctx, 68, RULE_variableIdentity);
		try {
			State = 673;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 669;
				_localctx.Identifier = basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 670;
				_localctx.Declaration = variableDeclarationAssignment();
				_localctx.IsAssignment =  true;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFunctionContext : ParserRuleContext {
		public bool IsOverride;
		public FunctionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OVERRIDE() { return GetToken(SPSLParser.KEYWORD_OVERRIDE, 0); }
		public ShaderFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFunctionContext shaderFunction() {
		ShaderFunctionContext _localctx = new ShaderFunctionContext(Context, State);
		EnterRule(_localctx, 70, RULE_shaderFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 675;
				annotation();
				}
				}
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_OVERRIDE) {
				{
				State = 681;
				Match(KEYWORD_OVERRIDE);
				_localctx.IsOverride =  true;
				}
			}

			State = 685;
			_localctx.Function = function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctionHeadContext Head;
		public FunctionBodyContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 72, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			_localctx.Head = functionHead();
			State = 688;
			Match(TOK_OPEN_BRACE);
			State = 689;
			_localctx.Body = functionBody();
			State = 690;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		public DataTypeContext Type;
		public IToken Name;
		public FunctionSignatureContext Signature;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 74, RULE_functionHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 692;
				_localctx.Type = dataType();
				}
				break;
			}
			State = 695;
			_localctx.Name = Match(IDENTIFIER);
			State = 696;
			_localctx.Signature = functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public ArgListContext Arguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 76, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(TOK_OPEN_PAREN);
			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & -4294967283L) != 0 || (((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & 2305843009213694079L) != 0) {
				{
				State = 699;
				_localctx.Arguments = argList();
				}
			}

			State = 702;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgDefContext[] argDef() {
			return GetRuleContexts<ArgDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgDefContext argDef(int i) {
			return GetRuleContext<ArgDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 78, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			argDef();
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 705;
				Match(TOK_COMMA);
				State = 706;
				argDef();
				}
				}
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefContext : ParserRuleContext {
		public IToken Flow;
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IN() { return GetToken(SPSLParser.KEYWORD_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OUT() { return GetToken(SPSLParser.KEYWORD_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INOUT() { return GetToken(SPSLParser.KEYWORD_INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		public ArgDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArgDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArgDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefContext argDef() {
		ArgDefContext _localctx = new ArgDefContext(Context, State);
		EnterRule(_localctx, 80, RULE_argDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 288230377024126976L) != 0) {
				{
				State = 712;
				_localctx.Flow = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 288230377024126976L) != 0) ) {
					_localctx.Flow = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 715;
			_localctx.Type = dataType();
			State = 716;
			_localctx.Name = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public ReturnStatementContext ReturnStatement;
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext[] stayControlFlowStatement() {
			return GetRuleContexts<StayControlFlowStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement(int i) {
			return GetRuleContext<StayControlFlowStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 82, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & -33058431L) != 0 || (((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 2287828636477162001L) != 0) {
				{
				{
				State = 718;
				stayControlFlowStatement();
				}
				}
				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_RETURN) {
				{
				State = 724;
				_localctx.ReturnStatement = returnStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 84, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			Match(TOK_OPEN_BRACE);
			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & -29386367L) != 0 || (((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 2287828636477162001L) != 0) {
				{
				{
				State = 728;
				statement();
				}
				}
				State = 733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 734;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		public ReferencableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterReferencableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitReferencableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferencableExpressionContext referencableExpression() {
		ReferencableExpressionContext _localctx = new ReferencableExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_referencableExpression);
		try {
			State = 741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737;
				parenthesizedExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 738;
				invocationExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 739;
				propertyMemberReferenceExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 740;
				methodMemberReferenceExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		public ChainableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableExpressionContext chainableExpression() {
		ChainableExpressionContext _localctx = new ChainableExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_chainableExpression);
		try {
			State = 745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 743;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 744;
				invocationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainedExpressionContext : ParserRuleContext {
		public ReferencableExpressionContext Target;
		[System.Diagnostics.DebuggerNonUserCode] public ReferencableExpressionContext referencableExpression() {
			return GetRuleContext<ReferencableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_DOT() { return GetTokens(SPSLParser.TOK_DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT(int i) {
			return GetToken(SPSLParser.TOK_DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableExpressionContext[] chainableExpression() {
			return GetRuleContexts<ChainableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableExpressionContext chainableExpression(int i) {
			return GetRuleContext<ChainableExpressionContext>(i);
		}
		public ChainedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainedExpressionContext chainedExpression() {
		ChainedExpressionContext _localctx = new ChainedExpressionContext(Context, State);
		EnterRule(_localctx, 90, RULE_chainedExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 747;
			_localctx.Target = referencableExpression();
			State = 750;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 748;
					Match(TOK_DOT);
					State = 749;
					chainableExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 752;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableChainedExpressionContext : ParserRuleContext {
		public ReferencableExpressionContext Target;
		[System.Diagnostics.DebuggerNonUserCode] public ReferencableExpressionContext referencableExpression() {
			return GetRuleContext<ReferencableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_DOT() { return GetTokens(SPSLParser.TOK_DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT(int i) {
			return GetToken(SPSLParser.TOK_DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext[] basicExpression() {
			return GetRuleContexts<BasicExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression(int i) {
			return GetRuleContext<BasicExpressionContext>(i);
		}
		public AssignableChainedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableChainedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableChainedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableChainedExpressionContext assignableChainedExpression() {
		AssignableChainedExpressionContext _localctx = new AssignableChainedExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_assignableChainedExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			_localctx.Target = referencableExpression();
			State = 757;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 755;
					Match(TOK_DOT);
					State = 756;
					basicExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 759;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberReferenceExpressionContext : ParserRuleContext {
		public IToken Target;
		public BasicExpressionContext Member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT() { return GetToken(SPSLParser.TOK_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public PropertyMemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPropertyMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPropertyMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
		PropertyMemberReferenceExpressionContext _localctx = new PropertyMemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_propertyMemberReferenceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			_localctx.Target = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE || _la==IDENTIFIER) ) {
				_localctx.Target = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 762;
			Match(TOK_DOT);
			State = 763;
			_localctx.Member = basicExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodMemberReferenceExpressionContext : ParserRuleContext {
		public IToken Target;
		public InvocationExpressionContext Member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT() { return GetToken(SPSLParser.TOK_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public MethodMemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodMemberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMethodMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMethodMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
		MethodMemberReferenceExpressionContext _localctx = new MethodMemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_methodMemberReferenceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			_localctx.Target = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE || _la==IDENTIFIER) ) {
				_localctx.Target = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 766;
			Match(TOK_DOT);
			State = 767;
			_localctx.Member = invocationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberReferenceExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		public MemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberReferenceExpressionContext memberReferenceExpression() {
		MemberReferenceExpressionContext _localctx = new MemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_memberReferenceExpression);
		try {
			State = 771;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 769;
				propertyMemberReferenceExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 770;
				methodMemberReferenceExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationExpressionContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		public ParametersListContext Parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersListContext parametersList() {
			return GetRuleContext<ParametersListContext>(0);
		}
		public InvocationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationExpressionContext invocationExpression() {
		InvocationExpressionContext _localctx = new InvocationExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_invocationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			_localctx.Name = namespacedTypeName();
			State = 774;
			Match(TOK_OPEN_PAREN);
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & 288230376151187459L) != 0 || (((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4468415305619457L) != 0) {
				{
				State = 775;
				_localctx.Parameters = parametersList();
				}
			}

			State = 778;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		public ElseStatementContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(SPSLParser.KEYWORD_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifStatementContext[] elifStatement() {
			return GetRuleContexts<ElifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifStatementContext elifStatement(int i) {
			return GetRuleContext<ElifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(KEYWORD_IF);
			State = 781;
			Match(TOK_OPEN_PAREN);
			State = 782;
			_localctx.Expression = expressionStatement(0);
			State = 783;
			Match(TOK_CLOSE_PAREN);
			State = 784;
			_localctx.Block = statementBlock();
			State = 788;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 785;
					elifStatement();
					}
					} 
				}
				State = 790;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			State = 792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 791;
				_localctx.Else = elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELIF() { return GetToken(SPSLParser.KEYWORD_ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(SPSLParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(SPSLParser.KEYWORD_IF, 0); }
		public ElifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifStatementContext elifStatement() {
		ElifStatementContext _localctx = new ElifStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_elifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_ELIF:
				{
				State = 794;
				Match(KEYWORD_ELIF);
				}
				break;
			case KEYWORD_ELSE:
				{
				State = 795;
				Match(KEYWORD_ELSE);
				State = 796;
				Match(KEYWORD_IF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 799;
			Match(TOK_OPEN_PAREN);
			State = 800;
			_localctx.Expression = expressionStatement(0);
			State = 801;
			Match(TOK_CLOSE_PAREN);
			State = 802;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(SPSLParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			Match(KEYWORD_ELSE);
			State = 805;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SWITCH() { return GetToken(SPSLParser.KEYWORD_SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			Match(KEYWORD_SWITCH);
			State = 808;
			Match(TOK_OPEN_PAREN);
			State = 809;
			_localctx.Expression = expressionStatement(0);
			State = 810;
			Match(TOK_CLOSE_PAREN);
			State = 811;
			Match(TOK_OPEN_BRACE);
			State = 815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEYWORD_CASE) {
				{
				{
				State = 812;
				caseStatement();
				}
				}
				State = 817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 818;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public ConstantExpressionContext Expression;
		public StayControlFlowStatementContext Statements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CASE() { return GetToken(SPSLParser.KEYWORD_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COLON() { return GetToken(SPSLParser.TOK_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeaveControlFlowStatementContext leaveControlFlowStatement() {
			return GetRuleContext<LeaveControlFlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext[] stayControlFlowStatement() {
			return GetRuleContexts<StayControlFlowStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement(int i) {
			return GetRuleContext<StayControlFlowStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(KEYWORD_CASE);
			State = 821;
			_localctx.Expression = constantExpression();
			State = 822;
			Match(TOK_COLON);
			State = 824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 823;
				Match(TOK_OPEN_BRACE);
				}
				break;
			}
			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & -33058431L) != 0 || (((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 2287828636477162001L) != 0) {
				{
				{
				State = 826;
				_localctx.Statements = stayControlFlowStatement();
				}
				}
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 832;
			leaveControlFlowStatement();
			State = 834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 833;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(SPSLParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			Match(KEYWORD_WHILE);
			State = 837;
			Match(TOK_OPEN_PAREN);
			State = 838;
			_localctx.Expression = expressionStatement(0);
			State = 839;
			Match(TOK_CLOSE_PAREN);
			State = 840;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ExpressionStatementContext Initialization;
		public ExpressionStatementContext Condition;
		public ExpressionStatementContext Iteration;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FOR() { return GetToken(SPSLParser.KEYWORD_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_SEMICOLON() { return GetTokens(SPSLParser.TOK_SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON(int i) {
			return GetToken(SPSLParser.TOK_SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			Match(KEYWORD_FOR);
			State = 843;
			Match(TOK_OPEN_PAREN);
			State = 844;
			_localctx.Initialization = expressionStatement(0);
			State = 845;
			Match(TOK_SEMICOLON);
			State = 846;
			_localctx.Condition = expressionStatement(0);
			State = 847;
			Match(TOK_SEMICOLON);
			State = 848;
			_localctx.Iteration = expressionStatement(0);
			State = 849;
			Match(TOK_CLOSE_PAREN);
			State = 850;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		public StatementBlockContext Block;
		public ParenthesizedExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DO() { return GetToken(SPSLParser.KEYWORD_DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(SPSLParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 852;
			Match(KEYWORD_DO);
			State = 853;
			_localctx.Block = statementBlock();
			State = 854;
			Match(KEYWORD_WHILE);
			State = 855;
			_localctx.Expression = parenthesizedExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_parenthesizedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			Match(TOK_OPEN_PAREN);
			State = 858;
			_localctx.Expression = expressionStatement(0);
			State = 859;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceExpressionContext : ParserRuleContext {
		public DataTypeContext Type;
		public ParametersListContext Parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersListContext parametersList() {
			return GetRuleContext<ParametersListContext>(0);
		}
		public NewInstanceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstanceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstanceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceExpressionContext newInstanceExpression() {
		NewInstanceExpressionContext _localctx = new NewInstanceExpressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_newInstanceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			_localctx.Type = dataType();
			State = 862;
			Match(TOK_OPEN_PAREN);
			State = 864;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & 288230376151187459L) != 0 || (((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & 4468415305619457L) != 0) {
				{
				State = 863;
				_localctx.Parameters = parametersList();
				}
			}

			State = 866;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public ParametersListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParametersList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParametersList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersListContext parametersList() {
		ParametersListContext _localctx = new ParametersListContext(Context, State);
		EnterRule(_localctx, 122, RULE_parametersList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868;
			expressionStatement(0);
			State = 873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 869;
				Match(TOK_COMMA);
				State = 870;
				expressionStatement(0);
				}
				}
				State = 875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextAccessExpressionContext : ParserRuleContext {
		public IToken Indentifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		public ContextAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterContextAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitContextAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextAccessExpressionContext contextAccessExpression() {
		ContextAccessExpressionContext _localctx = new ContextAccessExpressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_contextAccessExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			_localctx.Indentifier = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE) ) {
				_localctx.Indentifier = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicExpressionContext : ParserRuleContext {
		public IToken Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public BasicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBasicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBasicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicExpressionContext basicExpression() {
		BasicExpressionContext _localctx = new BasicExpressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_basicExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			_localctx.Identifier = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
	 
		public ExpressionStatementContext() { }
		public virtual void CopyFrom(ExpressionStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixUnaryOperationExpressionContext : ExpressionStatementContext {
		public AssignableExpressionContext Expression;
		public IToken Operator;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INCREMENT() { return GetToken(SPSLParser.OP_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DECREMENT() { return GetToken(SPSLParser.OP_DECREMENT, 0); }
		public PostfixUnaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPostfixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPostfixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionStatementContext {
		public AssignableExpressionContext Left;
		public IToken Operator;
		public ExpressionStatementContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS_ASSIGN() { return GetToken(SPSLParser.OP_PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS_ASSIGN() { return GetToken(SPSLParser.OP_MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL_ASSIGN() { return GetToken(SPSLParser.OP_MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGN() { return GetToken(SPSLParser.OP_DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MODULUS_ASSIGN() { return GetToken(SPSLParser.OP_MODULUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_OR_ASSIGN() { return GetToken(SPSLParser.OP_BITWISE_OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_AND_ASSIGN() { return GetToken(SPSLParser.OP_BITWISE_AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EXPONENT_ASSIGN() { return GetToken(SPSLParser.OP_EXPONENT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT_ASSIGN() { return GetToken(SPSLParser.OP_LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT_ASSIGN() { return GetToken(SPSLParser.OP_RSHIFT_ASSIGN, 0); }
		public AssignmentExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Condition;
		public ExpressionStatementContext WhenTrue;
		public ExpressionStatementContext WhenFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_QUESTION() { return GetToken(SPSLParser.TOK_QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COLON() { return GetToken(SPSLParser.TOK_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		public TernaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTernaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTernaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContext : ExpressionStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberReferenceExpressionContext memberReferenceExpression() {
			return GetRuleContext<MemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainedExpressionContext chainedExpression() {
			return GetRuleContext<ChainedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceExpressionContext newInstanceExpression() {
			return GetRuleContext<NewInstanceExpressionContext>(0);
		}
		public ExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Left;
		public IToken Operator;
		public ExpressionStatementContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEQ_THAN() { return GetToken(SPSLParser.OP_LEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GEQ_THAN() { return GetToken(SPSLParser.OP_GEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(SPSLParser.OP_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIFFERENT() { return GetToken(SPSLParser.OP_DIFFERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS() { return GetToken(SPSLParser.OP_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS() { return GetToken(SPSLParser.OP_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(SPSLParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MODULUS() { return GetToken(SPSLParser.OP_MODULUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASTERISK() { return GetToken(SPSLParser.OP_ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PIPE() { return GetToken(SPSLParser.OP_PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AMPERSAND() { return GetToken(SPSLParser.OP_AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EXPONENT() { return GetToken(SPSLParser.OP_EXPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT() { return GetToken(SPSLParser.OP_LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT() { return GetToken(SPSLParser.OP_RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(SPSLParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(SPSLParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(SPSLParser.OP_XOR, 0); }
		public BinaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBinaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBinaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixUnaryOperationExpressionContext : ExpressionStatementContext {
		public IToken Operator;
		public AssignableExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INCREMENT() { return GetToken(SPSLParser.OP_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DECREMENT() { return GetToken(SPSLParser.OP_DECREMENT, 0); }
		public PrefixUnaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrefixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrefixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_EXCLAMATION() { return GetToken(SPSLParser.TOK_EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public NegateOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNegateOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNegateOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionStatementContext {
		public DataTypeContext Type;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public CastExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SignedExpressionContext : ExpressionStatementContext {
		public IToken Operator;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS() { return GetToken(SPSLParser.OP_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS() { return GetToken(SPSLParser.OP_PLUS, 0); }
		public SignedExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSignedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSignedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		return expressionStatement(0);
	}

	private ExpressionStatementContext expressionStatement(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, _parentState);
		ExpressionStatementContext _prevctx = _localctx;
		int _startState = 128;
		EnterRecursionRule(_localctx, 128, RULE_expressionStatement, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 881;
				basicExpression();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 882;
				parenthesizedExpression();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 883;
				primitiveExpression();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 884;
				constantExpression();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 885;
				memberReferenceExpression();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 886;
				chainedExpression();
				}
				break;
			case 7:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 887;
				invocationExpression();
				}
				break;
			case 8:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 888;
				arrayAccessExpression();
				}
				break;
			case 9:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 889;
				newInstanceExpression();
				}
				break;
			case 10:
				{
				_localctx = new NegateOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 890;
				Match(TOK_EXCLAMATION);
				State = 891;
				((NegateOperationExpressionContext)_localctx).Expression = expressionStatement(36);
				}
				break;
			case 11:
				{
				_localctx = new PostfixUnaryOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 892;
				((PostfixUnaryOperationExpressionContext)_localctx).Expression = assignableExpression();
				State = 893;
				((PostfixUnaryOperationExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_INCREMENT || _la==OP_DECREMENT) ) {
					((PostfixUnaryOperationExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				{
				_localctx = new PrefixUnaryOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 895;
				((PrefixUnaryOperationExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_INCREMENT || _la==OP_DECREMENT) ) {
					((PrefixUnaryOperationExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 896;
				((PrefixUnaryOperationExpressionContext)_localctx).Expression = assignableExpression();
				}
				break;
			case 13:
				{
				_localctx = new SignedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 897;
				((SignedExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_PLUS || _la==OP_MINUS) ) {
					((SignedExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 898;
				((SignedExpressionContext)_localctx).Expression = expressionStatement(33);
				}
				break;
			case 14:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 899;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 900;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_ASSIGN);
				State = 901;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(12);
				}
				break;
			case 15:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 903;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 904;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_PLUS_ASSIGN);
				State = 905;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(11);
				}
				break;
			case 16:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 907;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 908;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MINUS_ASSIGN);
				State = 909;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(10);
				}
				break;
			case 17:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 911;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 912;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MUL_ASSIGN);
				State = 913;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(9);
				}
				break;
			case 18:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 915;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 916;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_DIV_ASSIGN);
				State = 917;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(8);
				}
				break;
			case 19:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 919;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 920;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MODULUS_ASSIGN);
				State = 921;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(7);
				}
				break;
			case 20:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 923;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 924;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_BITWISE_OR_ASSIGN);
				State = 925;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(6);
				}
				break;
			case 21:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 927;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 928;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_BITWISE_AND_ASSIGN);
				State = 929;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(5);
				}
				break;
			case 22:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 931;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 932;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_EXPONENT_ASSIGN);
				State = 933;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(4);
				}
				break;
			case 23:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 935;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 936;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_LSHIFT_ASSIGN);
				State = 937;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(3);
				}
				break;
			case 24:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 939;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 940;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_RSHIFT_ASSIGN);
				State = 941;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(2);
				}
				break;
			case 25:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 943;
				Match(TOK_OPEN_PAREN);
				State = 944;
				((CastExpressionContext)_localctx).Type = dataType();
				State = 945;
				Match(TOK_CLOSE_PAREN);
				State = 946;
				((CastExpressionContext)_localctx).Expression = expressionStatement(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1015;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1013;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
					case 1:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 950;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 951;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LEQ_THAN);
						State = 952;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(33);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 953;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 954;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_GEQ_THAN);
						State = 955;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(32);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 956;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 957;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LESSER_THAN);
						State = 958;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(31);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 959;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 960;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_GREATER_THAN);
						State = 961;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(30);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 962;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 963;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_EQUAL);
						State = 964;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(29);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 965;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 966;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_DIFFERENT);
						State = 967;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(28);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 968;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 969;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_PLUS);
						State = 970;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(27);
						}
						break;
					case 8:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 971;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 972;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_MINUS);
						State = 973;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(26);
						}
						break;
					case 9:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 974;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 975;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_DIV);
						State = 976;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(25);
						}
						break;
					case 10:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 977;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 978;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_MODULUS);
						State = 979;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(24);
						}
						break;
					case 11:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 980;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 981;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_ASTERISK);
						State = 982;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(23);
						}
						break;
					case 12:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 983;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 984;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_PIPE);
						State = 985;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(22);
						}
						break;
					case 13:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 986;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 987;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_AMPERSAND);
						State = 988;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(21);
						}
						break;
					case 14:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 989;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 990;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_EXPONENT);
						State = 991;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(19);
						}
						break;
					case 15:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 992;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 993;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LSHIFT);
						State = 994;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(18);
						}
						break;
					case 16:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 995;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 996;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_RSHIFT);
						State = 997;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(17);
						}
						break;
					case 17:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 998;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 999;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_AND);
						State = 1000;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(17);
						}
						break;
					case 18:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1001;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1002;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_OR);
						State = 1003;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(16);
						}
						break;
					case 19:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1004;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1005;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_XOR);
						State = 1006;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(15);
						}
						break;
					case 20:
						{
						_localctx = new TernaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((TernaryOperationExpressionContext)_localctx).Condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1007;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1008;
						Match(TOK_QUESTION);
						State = 1009;
						((TernaryOperationExpressionContext)_localctx).WhenTrue = expressionStatement(0);
						State = 1010;
						Match(TOK_COLON);
						State = 1011;
						((TernaryOperationExpressionContext)_localctx).WhenFalse = expressionStatement(13);
						}
						break;
					}
					} 
				}
				State = 1017;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayAccessExpressionContext : ParserRuleContext {
		public ExpressionStatementContext Index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberReferenceExpressionContext memberReferenceExpression() {
			return GetRuleContext<MemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		public ArrayAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessExpressionContext arrayAccessExpression() {
		ArrayAccessExpressionContext _localctx = new ArrayAccessExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_arrayAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 1018;
				basicExpression();
				}
				break;
			case 2:
				{
				State = 1019;
				memberReferenceExpression();
				}
				break;
			case 3:
				{
				State = 1020;
				invocationExpression();
				}
				break;
			}
			State = 1023;
			Match(TOK_OPEN_BRACKET);
			State = 1024;
			_localctx.Index = expressionStatement(0);
			State = 1025;
			Match(TOK_CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainedExpressionContext assignableChainedExpression() {
			return GetRuleContext<AssignableChainedExpressionContext>(0);
		}
		public AssignableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableExpressionContext assignableExpression() {
		AssignableExpressionContext _localctx = new AssignableExpressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_assignableExpression);
		try {
			State = 1031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1027;
				arrayAccessExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1028;
				basicExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1029;
				propertyMemberReferenceExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1030;
				assignableChainedExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_RETURN() { return GetToken(SPSLParser.KEYWORD_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1033;
			Match(KEYWORD_RETURN);
			State = 1034;
			_localctx.Expression = expressionStatement(0);
			State = 1035;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BREAK() { return GetToken(SPSLParser.KEYWORD_BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 136, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1037;
			Match(KEYWORD_BREAK);
			State = 1038;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONTINUE() { return GetToken(SPSLParser.KEYWORD_CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 138, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040;
			Match(KEYWORD_CONTINUE);
			State = 1041;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DISCARD() { return GetToken(SPSLParser.KEYWORD_DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public DiscardStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDiscardStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDiscardStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiscardStatementContext discardStatement() {
		DiscardStatementContext _localctx = new DiscardStatementContext(Context, State);
		EnterRule(_localctx, 140, RULE_discardStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1043;
			Match(KEYWORD_DISCARD);
			State = 1044;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveControlFlowStatementContext : ParserRuleContext {
		public BreakStatementContext BreakStatement;
		public ReturnStatementContext ReturnStatement;
		public ContinueStatementContext ContinueStatement;
		public DiscardStatementContext DiscardStatement;
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardStatementContext discardStatement() {
			return GetRuleContext<DiscardStatementContext>(0);
		}
		public LeaveControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveControlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterLeaveControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitLeaveControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveControlFlowStatementContext leaveControlFlowStatement() {
		LeaveControlFlowStatementContext _localctx = new LeaveControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 142, RULE_leaveControlFlowStatement);
		try {
			State = 1050;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1046;
				_localctx.BreakStatement = breakStatement();
				}
				break;
			case KEYWORD_RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1047;
				_localctx.ReturnStatement = returnStatement();
				}
				break;
			case KEYWORD_CONTINUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1048;
				_localctx.ContinueStatement = continueStatement();
				}
				break;
			case KEYWORD_DISCARD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1049;
				_localctx.DiscardStatement = discardStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StayControlFlowStatementContext : ParserRuleContext {
		public VariableDeclarationContext VariableDeclaration;
		public ExpressionStatementContext ExpressionStatement;
		public StatementBlockContext StatementBlock;
		public IfStatementContext IfStatement;
		public SwitchStatementContext SwitchStatement;
		public WhileStatementContext WhileStatement;
		public ForStatementContext ForStatement;
		public DoWhileStatementContext DoWhileStatement;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		public StayControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stayControlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStayControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStayControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStayControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StayControlFlowStatementContext stayControlFlowStatement() {
		StayControlFlowStatementContext _localctx = new StayControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_stayControlFlowStatement);
		try {
			State = 1064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1052;
				_localctx.VariableDeclaration = variableDeclaration();
				State = 1053;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1055;
				_localctx.ExpressionStatement = expressionStatement(0);
				State = 1056;
				Match(TOK_SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1058;
				_localctx.StatementBlock = statementBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1059;
				_localctx.IfStatement = ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1060;
				_localctx.SwitchStatement = switchStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1061;
				_localctx.WhileStatement = whileStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1062;
				_localctx.ForStatement = forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1063;
				_localctx.DoWhileStatement = doWhileStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StayControlFlowStatementContext StayControlFlowStatement;
		public LeaveControlFlowStatementContext LeaveControlFlowStatement;
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement() {
			return GetRuleContext<StayControlFlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveControlFlowStatementContext leaveControlFlowStatement() {
			return GetRuleContext<LeaveControlFlowStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_statement);
		try {
			State = 1068;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_VAR:
			case KEYWORD_THIS:
			case KEYWORD_BASE:
			case KEYWORD_IF:
			case KEYWORD_SWITCH:
			case KEYWORD_FOR:
			case KEYWORD_DO:
			case KEYWORD_WHILE:
			case KEYWORD_CONST:
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
			case TOK_OPEN_PAREN:
			case TOK_OPEN_BRACE:
			case TOK_EXCLAMATION:
			case OP_PLUS:
			case OP_MINUS:
			case OP_INCREMENT:
			case OP_DECREMENT:
			case IDENTIFIER:
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1066;
				_localctx.StayControlFlowStatement = stayControlFlowStatement();
				}
				break;
			case KEYWORD_RETURN:
			case KEYWORD_BREAK:
			case KEYWORD_CONTINUE:
			case KEYWORD_DISCARD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1067;
				_localctx.LeaveControlFlowStatement = leaveControlFlowStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		public IToken Literal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(SPSLParser.BoolLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleLiteral() { return GetToken(SPSLParser.DoubleLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatLiteral() { return GetToken(SPSLParser.FloatLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnsignedIntegerLiteral() { return GetToken(SPSLParser.UnsignedIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SPSLParser.StringLiteral, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_primitiveExpression);
		try {
			State = 1076;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1070;
				_localctx.Literal = Match(BoolLiteral);
				}
				break;
			case DoubleLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1071;
				_localctx.Literal = Match(DoubleLiteral);
				}
				break;
			case FloatLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1072;
				_localctx.Literal = Match(FloatLiteral);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1073;
				_localctx.Literal = Match(IntegerLiteral);
				}
				break;
			case UnsignedIntegerLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1074;
				_localctx.Literal = Match(UnsignedIntegerLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1075;
				_localctx.Literal = Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
	 
		public ConstantExpressionContext() { }
		public virtual void CopyFrom(ConstantExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UserDefinedConstantExpressionContext : ConstantExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UserDefinedConstantExpressionContext(ConstantExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUserDefinedConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUserDefinedConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveConstantExpressionContext : ConstantExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public PrimitiveConstantExpressionContext(ConstantExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_constantExpression);
		try {
			State = 1080;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
				_localctx = new PrimitiveConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1078;
				primitiveExpression();
				}
				break;
			case IDENTIFIER:
				_localctx = new UserDefinedConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1079;
				namespacedTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public bool IsArray;
		public DataTypeKind DataType;
		public IToken ArraySize;
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveDataTypeContext primitiveDataType() {
			return GetRuleContext<PrimitiveDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinDataTypeContext builtinDataType() {
			return GetRuleContext<BuiltinDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedDataTypeContext userDefinedDataType() {
			return GetRuleContext<UserDefinedDataTypeContext>(0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_dataType);
		int _la;
		try {
			State = 1115;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1082;
				primitiveDataType();
				State = 1089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1083;
					Match(TOK_OPEN_BRACKET);
					State = 1085;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1084;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1087;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.Primitive;
				}
				break;
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1093;
				builtinDataType();
				State = 1100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1094;
					Match(TOK_OPEN_BRACKET);
					State = 1096;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1095;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1098;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.BuiltIn;
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1104;
				userDefinedDataType();
				State = 1111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1105;
					Match(TOK_OPEN_BRACKET);
					State = 1107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1106;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1109;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.UserDefined;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserDefinedDataTypeContext : ParserRuleContext {
		public NamespacedTypeNameContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UserDefinedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUserDefinedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUserDefinedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedDataTypeContext userDefinedDataType() {
		UserDefinedDataTypeContext _localctx = new UserDefinedDataTypeContext(Context, State);
		EnterRule(_localctx, 154, RULE_userDefinedDataType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117;
			_localctx.Type = namespacedTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveDataTypeContext : ParserRuleContext {
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VOID() { return GetToken(SPSLParser.TYPE_VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(SPSLParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(SPSLParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT() { return GetToken(SPSLParser.TYPE_UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(SPSLParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_DOUBLE() { return GetToken(SPSLParser.TYPE_DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(SPSLParser.TYPE_STRING, 0); }
		public PrimitiveDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveDataTypeContext primitiveDataType() {
		PrimitiveDataTypeContext _localctx = new PrimitiveDataTypeContext(Context, State);
		EnterRule(_localctx, 156, RULE_primitiveDataType);
		try {
			State = 1126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1119;
				_localctx.Type = Match(TYPE_VOID);
				}
				break;
			case TYPE_BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1120;
				_localctx.Type = Match(TYPE_BOOL);
				}
				break;
			case TYPE_INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1121;
				_localctx.Type = Match(TYPE_INT);
				}
				break;
			case TYPE_UINT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1122;
				_localctx.Type = Match(TYPE_UINT);
				}
				break;
			case TYPE_FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1123;
				_localctx.Type = Match(TYPE_FLOAT);
				}
				break;
			case TYPE_DOUBLE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1124;
				_localctx.Type = Match(TYPE_DOUBLE);
				}
				break;
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1125;
				_localctx.Type = Match(TYPE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinDataTypeContext : ParserRuleContext {
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2B() { return GetToken(SPSLParser.TYPE_VECTOR2B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2F() { return GetToken(SPSLParser.TYPE_VECTOR2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2I() { return GetToken(SPSLParser.TYPE_VECTOR2I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2UI() { return GetToken(SPSLParser.TYPE_VECTOR2UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3B() { return GetToken(SPSLParser.TYPE_VECTOR3B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3F() { return GetToken(SPSLParser.TYPE_VECTOR3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3I() { return GetToken(SPSLParser.TYPE_VECTOR3I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3UI() { return GetToken(SPSLParser.TYPE_VECTOR3UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4B() { return GetToken(SPSLParser.TYPE_VECTOR4B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4F() { return GetToken(SPSLParser.TYPE_VECTOR4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4I() { return GetToken(SPSLParser.TYPE_VECTOR4I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4UI() { return GetToken(SPSLParser.TYPE_VECTOR4UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2F() { return GetToken(SPSLParser.TYPE_MATRIX2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3F() { return GetToken(SPSLParser.TYPE_MATRIX3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4F() { return GetToken(SPSLParser.TYPE_MATRIX4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X3F() { return GetToken(SPSLParser.TYPE_MATRIX2X3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X4F() { return GetToken(SPSLParser.TYPE_MATRIX2X4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X2F() { return GetToken(SPSLParser.TYPE_MATRIX3X2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X4F() { return GetToken(SPSLParser.TYPE_MATRIX3X4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X2F() { return GetToken(SPSLParser.TYPE_MATRIX4X2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X3F() { return GetToken(SPSLParser.TYPE_MATRIX4X3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COLOR3() { return GetToken(SPSLParser.TYPE_COLOR3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COLOR4() { return GetToken(SPSLParser.TYPE_COLOR4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SAMPLER() { return GetToken(SPSLParser.TYPE_SAMPLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE1D() { return GetToken(SPSLParser.TYPE_TEXTURE1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE1DARRAY() { return GetToken(SPSLParser.TYPE_TEXTURE1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE2D() { return GetToken(SPSLParser.TYPE_TEXTURE2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE2DARRAY() { return GetToken(SPSLParser.TYPE_TEXTURE2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE3D() { return GetToken(SPSLParser.TYPE_TEXTURE3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CUBEMAP() { return GetToken(SPSLParser.TYPE_CUBEMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CUBEMAPARRAY() { return GetToken(SPSLParser.TYPE_CUBEMAPARRAY, 0); }
		public BuiltinDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBuiltinDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBuiltinDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinDataTypeContext builtinDataType() {
		BuiltinDataTypeContext _localctx = new BuiltinDataTypeContext(Context, State);
		EnterRule(_localctx, 158, RULE_builtinDataType);
		try {
			State = 1159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VECTOR2B:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1128;
				_localctx.Type = Match(TYPE_VECTOR2B);
				}
				break;
			case TYPE_VECTOR2F:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1129;
				_localctx.Type = Match(TYPE_VECTOR2F);
				}
				break;
			case TYPE_VECTOR2I:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1130;
				_localctx.Type = Match(TYPE_VECTOR2I);
				}
				break;
			case TYPE_VECTOR2UI:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1131;
				_localctx.Type = Match(TYPE_VECTOR2UI);
				}
				break;
			case TYPE_VECTOR3B:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1132;
				_localctx.Type = Match(TYPE_VECTOR3B);
				}
				break;
			case TYPE_VECTOR3F:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1133;
				_localctx.Type = Match(TYPE_VECTOR3F);
				}
				break;
			case TYPE_VECTOR3I:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1134;
				_localctx.Type = Match(TYPE_VECTOR3I);
				}
				break;
			case TYPE_VECTOR3UI:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1135;
				_localctx.Type = Match(TYPE_VECTOR3UI);
				}
				break;
			case TYPE_VECTOR4B:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1136;
				_localctx.Type = Match(TYPE_VECTOR4B);
				}
				break;
			case TYPE_VECTOR4F:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1137;
				_localctx.Type = Match(TYPE_VECTOR4F);
				}
				break;
			case TYPE_VECTOR4I:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1138;
				_localctx.Type = Match(TYPE_VECTOR4I);
				}
				break;
			case TYPE_VECTOR4UI:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1139;
				_localctx.Type = Match(TYPE_VECTOR4UI);
				}
				break;
			case TYPE_MATRIX2F:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1140;
				_localctx.Type = Match(TYPE_MATRIX2F);
				}
				break;
			case TYPE_MATRIX3F:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1141;
				_localctx.Type = Match(TYPE_MATRIX3F);
				}
				break;
			case TYPE_MATRIX4F:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1142;
				_localctx.Type = Match(TYPE_MATRIX4F);
				}
				break;
			case TYPE_MATRIX2X3F:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1143;
				_localctx.Type = Match(TYPE_MATRIX2X3F);
				}
				break;
			case TYPE_MATRIX2X4F:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1144;
				_localctx.Type = Match(TYPE_MATRIX2X4F);
				}
				break;
			case TYPE_MATRIX3X2F:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1145;
				_localctx.Type = Match(TYPE_MATRIX3X2F);
				}
				break;
			case TYPE_MATRIX3X4F:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1146;
				_localctx.Type = Match(TYPE_MATRIX3X4F);
				}
				break;
			case TYPE_MATRIX4X2F:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1147;
				_localctx.Type = Match(TYPE_MATRIX4X2F);
				}
				break;
			case TYPE_MATRIX4X3F:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1148;
				_localctx.Type = Match(TYPE_MATRIX4X3F);
				}
				break;
			case TYPE_COLOR3:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1149;
				_localctx.Type = Match(TYPE_COLOR3);
				}
				break;
			case TYPE_COLOR4:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1150;
				_localctx.Type = Match(TYPE_COLOR4);
				}
				break;
			case TYPE_SAMPLER:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1151;
				_localctx.Type = Match(TYPE_SAMPLER);
				}
				break;
			case TYPE_TEXTURE1D:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1152;
				_localctx.Type = Match(TYPE_TEXTURE1D);
				}
				break;
			case TYPE_TEXTURE1DARRAY:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1153;
				_localctx.Type = Match(TYPE_TEXTURE1DARRAY);
				}
				break;
			case TYPE_TEXTURE2D:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1154;
				_localctx.Type = Match(TYPE_TEXTURE2D);
				}
				break;
			case TYPE_TEXTURE2DARRAY:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1155;
				_localctx.Type = Match(TYPE_TEXTURE2DARRAY);
				}
				break;
			case TYPE_TEXTURE3D:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1156;
				_localctx.Type = Match(TYPE_TEXTURE3D);
				}
				break;
			case TYPE_CUBEMAP:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1157;
				_localctx.Type = Match(TYPE_CUBEMAP);
				}
				break;
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1158;
				_localctx.Type = Match(TYPE_CUBEMAPARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 64: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 32);
		case 1: return Precpred(Context, 31);
		case 2: return Precpred(Context, 30);
		case 3: return Precpred(Context, 29);
		case 4: return Precpred(Context, 28);
		case 5: return Precpred(Context, 27);
		case 6: return Precpred(Context, 26);
		case 7: return Precpred(Context, 25);
		case 8: return Precpred(Context, 24);
		case 9: return Precpred(Context, 23);
		case 10: return Precpred(Context, 22);
		case 11: return Precpred(Context, 21);
		case 12: return Precpred(Context, 20);
		case 13: return Precpred(Context, 19);
		case 14: return Precpred(Context, 18);
		case 15: return Precpred(Context, 17);
		case 16: return Precpred(Context, 16);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 14);
		case 19: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,157,1162,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,1,0,5,0,162,8,0,10,0,12,0,165,9,0,1,0,5,0,168,8,0,
		10,0,12,0,171,9,0,1,0,3,0,174,8,0,1,0,5,0,177,8,0,10,0,12,0,180,9,0,1,
		0,5,0,183,8,0,10,0,12,0,186,9,0,1,0,5,0,189,8,0,10,0,12,0,192,9,0,1,0,
		1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,5,2,203,8,2,10,2,12,2,206,9,2,1,3,1,3,
		1,3,1,3,1,3,3,3,213,8,3,1,4,1,4,3,4,217,8,4,1,4,1,4,1,4,1,4,1,4,1,5,5,
		5,225,8,5,10,5,12,5,228,9,5,1,5,1,5,1,5,5,5,233,8,5,10,5,12,5,236,9,5,
		1,5,5,5,239,8,5,10,5,12,5,242,9,5,1,5,1,5,1,5,5,5,247,8,5,10,5,12,5,250,
		9,5,1,5,1,5,1,5,5,5,255,8,5,10,5,12,5,258,9,5,1,5,5,5,261,8,5,10,5,12,
		5,264,9,5,1,5,1,5,3,5,268,8,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,276,8,6,1,7,
		1,7,1,7,1,7,1,7,1,8,5,8,284,8,8,10,8,12,8,287,9,8,1,8,1,8,1,8,5,8,292,
		8,8,10,8,12,8,295,9,8,1,8,1,8,1,8,5,8,300,8,8,10,8,12,8,303,9,8,1,8,1,
		8,1,9,1,9,1,9,1,9,3,9,311,8,9,1,10,1,10,1,10,5,10,316,8,10,10,10,12,10,
		319,9,10,1,11,5,11,322,8,11,10,11,12,11,325,9,11,1,11,1,11,1,11,5,11,330,
		8,11,10,11,12,11,333,9,11,1,11,5,11,336,8,11,10,11,12,11,339,9,11,1,11,
		5,11,342,8,11,10,11,12,11,345,9,11,1,11,1,11,1,11,1,11,3,11,351,8,11,5,
		11,353,8,11,10,11,12,11,356,9,11,1,11,1,11,1,12,1,12,1,12,1,12,3,12,364,
		8,12,1,12,1,12,3,12,368,8,12,1,13,5,13,371,8,13,10,13,12,13,374,9,13,1,
		13,1,13,1,13,5,13,379,8,13,10,13,12,13,382,9,13,1,13,5,13,385,8,13,10,
		13,12,13,388,9,13,1,13,5,13,391,8,13,10,13,12,13,394,9,13,1,13,5,13,397,
		8,13,10,13,12,13,400,9,13,1,13,5,13,403,8,13,10,13,12,13,406,9,13,1,13,
		5,13,409,8,13,10,13,12,13,412,9,13,1,13,1,13,1,14,5,14,417,8,14,10,14,
		12,14,420,9,14,1,14,1,14,1,14,5,14,425,8,14,10,14,12,14,428,9,14,1,14,
		5,14,431,8,14,10,14,12,14,434,9,14,1,14,5,14,437,8,14,10,14,12,14,440,
		9,14,1,14,5,14,443,8,14,10,14,12,14,446,9,14,1,14,5,14,449,8,14,10,14,
		12,14,452,9,14,1,14,5,14,455,8,14,10,14,12,14,458,9,14,1,14,1,14,1,15,
		1,15,3,15,464,8,15,1,15,1,15,1,15,1,15,3,15,470,8,15,1,15,1,15,3,15,474,
		8,15,1,16,1,16,3,16,478,8,16,1,16,3,16,481,8,16,1,16,1,16,1,16,1,16,3,
		16,487,8,16,1,16,1,16,3,16,491,8,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
		1,18,3,18,501,8,18,1,19,1,19,1,19,3,19,506,8,19,1,20,1,20,1,20,1,20,1,
		20,1,20,5,20,514,8,20,10,20,12,20,517,9,20,3,20,519,8,20,1,20,3,20,522,
		8,20,1,21,1,21,3,21,526,8,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
		24,1,24,1,24,1,25,5,25,540,8,25,10,25,12,25,543,9,25,1,25,1,25,3,25,547,
		8,25,1,25,1,25,1,25,1,25,5,25,553,8,25,10,25,12,25,556,9,25,1,25,1,25,
		1,26,5,26,561,8,26,10,26,12,26,564,9,26,1,26,1,26,1,26,1,26,1,26,5,26,
		571,8,26,10,26,12,26,574,9,26,1,26,1,26,1,27,5,27,579,8,27,10,27,12,27,
		582,9,27,1,27,1,27,1,27,1,27,1,27,5,27,589,8,27,10,27,12,27,592,9,27,1,
		27,1,27,1,28,5,28,597,8,28,10,28,12,28,600,9,28,1,28,1,28,1,28,1,28,5,
		28,606,8,28,10,28,12,28,609,9,28,1,28,1,28,1,29,5,29,614,8,29,10,29,12,
		29,617,9,29,1,29,1,29,1,29,1,29,1,30,5,30,624,8,30,10,30,12,30,627,9,30,
		1,30,1,30,1,30,1,30,1,30,5,30,634,8,30,10,30,12,30,637,9,30,1,30,3,30,
		640,8,30,1,31,1,31,1,31,3,31,645,8,31,1,31,1,31,1,32,1,32,3,32,651,8,32,
		1,32,1,32,1,32,1,32,5,32,657,8,32,10,32,12,32,660,9,32,1,32,1,32,3,32,
		664,8,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,674,8,34,1,35,5,
		35,677,8,35,10,35,12,35,680,9,35,1,35,1,35,3,35,684,8,35,1,35,1,35,1,36,
		1,36,1,36,1,36,1,36,1,37,3,37,694,8,37,1,37,1,37,1,37,1,38,1,38,3,38,701,
		8,38,1,38,1,38,1,39,1,39,1,39,5,39,708,8,39,10,39,12,39,711,9,39,1,40,
		3,40,714,8,40,1,40,1,40,1,40,1,41,5,41,720,8,41,10,41,12,41,723,9,41,1,
		41,3,41,726,8,41,1,42,1,42,5,42,730,8,42,10,42,12,42,733,9,42,1,42,1,42,
		1,43,1,43,1,43,1,43,1,43,3,43,742,8,43,1,44,1,44,3,44,746,8,44,1,45,1,
		45,1,45,4,45,751,8,45,11,45,12,45,752,1,46,1,46,1,46,4,46,758,8,46,11,
		46,12,46,759,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,3,49,772,
		8,49,1,50,1,50,1,50,3,50,777,8,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,
		51,5,51,787,8,51,10,51,12,51,790,9,51,1,51,3,51,793,8,51,1,52,1,52,1,52,
		3,52,798,8,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,
		54,1,54,1,54,5,54,814,8,54,10,54,12,54,817,9,54,1,54,1,54,1,55,1,55,1,
		55,1,55,3,55,825,8,55,1,55,5,55,828,8,55,10,55,12,55,831,9,55,1,55,1,55,
		3,55,835,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,
		57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,
		60,1,60,1,60,3,60,865,8,60,1,60,1,60,1,61,1,61,1,61,5,61,872,8,61,10,61,
		12,61,875,9,61,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,3,64,949,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
		64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
		64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
		64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
		64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
		64,5,64,1014,8,64,10,64,12,64,1017,9,64,1,65,1,65,1,65,3,65,1022,8,65,
		1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,3,66,1032,8,66,1,67,1,67,1,67,
		1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,71,
		3,71,1051,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
		1,72,3,72,1065,8,72,1,73,1,73,3,73,1069,8,73,1,74,1,74,1,74,1,74,1,74,
		1,74,3,74,1077,8,74,1,75,1,75,3,75,1081,8,75,1,76,1,76,1,76,3,76,1086,
		8,76,1,76,1,76,3,76,1090,8,76,1,76,1,76,1,76,1,76,1,76,3,76,1097,8,76,
		1,76,1,76,3,76,1101,8,76,1,76,1,76,1,76,1,76,1,76,3,76,1108,8,76,1,76,
		1,76,3,76,1112,8,76,1,76,1,76,3,76,1116,8,76,1,77,1,77,1,78,1,78,1,78,
		1,78,1,78,1,78,1,78,3,78,1127,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
		1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
		1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1160,8,79,1,79,
		0,1,128,80,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
		92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
		130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,0,8,2,0,12,
		12,14,18,1,0,2,4,1,0,6,8,3,0,26,26,28,29,58,58,2,0,40,41,151,151,1,0,40,
		41,1,0,130,131,1,0,117,118,1301,0,163,1,0,0,0,2,195,1,0,0,0,4,199,1,0,
		0,0,6,212,1,0,0,0,8,216,1,0,0,0,10,267,1,0,0,0,12,269,1,0,0,0,14,277,1,
		0,0,0,16,285,1,0,0,0,18,306,1,0,0,0,20,312,1,0,0,0,22,323,1,0,0,0,24,359,
		1,0,0,0,26,372,1,0,0,0,28,418,1,0,0,0,30,463,1,0,0,0,32,477,1,0,0,0,34,
		492,1,0,0,0,36,500,1,0,0,0,38,505,1,0,0,0,40,507,1,0,0,0,42,525,1,0,0,
		0,44,527,1,0,0,0,46,531,1,0,0,0,48,535,1,0,0,0,50,541,1,0,0,0,52,562,1,
		0,0,0,54,580,1,0,0,0,56,598,1,0,0,0,58,615,1,0,0,0,60,639,1,0,0,0,62,641,
		1,0,0,0,64,663,1,0,0,0,66,665,1,0,0,0,68,673,1,0,0,0,70,678,1,0,0,0,72,
		687,1,0,0,0,74,693,1,0,0,0,76,698,1,0,0,0,78,704,1,0,0,0,80,713,1,0,0,
		0,82,721,1,0,0,0,84,727,1,0,0,0,86,741,1,0,0,0,88,745,1,0,0,0,90,747,1,
		0,0,0,92,754,1,0,0,0,94,761,1,0,0,0,96,765,1,0,0,0,98,771,1,0,0,0,100,
		773,1,0,0,0,102,780,1,0,0,0,104,797,1,0,0,0,106,804,1,0,0,0,108,807,1,
		0,0,0,110,820,1,0,0,0,112,836,1,0,0,0,114,842,1,0,0,0,116,852,1,0,0,0,
		118,857,1,0,0,0,120,861,1,0,0,0,122,868,1,0,0,0,124,876,1,0,0,0,126,878,
		1,0,0,0,128,948,1,0,0,0,130,1021,1,0,0,0,132,1031,1,0,0,0,134,1033,1,0,
		0,0,136,1037,1,0,0,0,138,1040,1,0,0,0,140,1043,1,0,0,0,142,1050,1,0,0,
		0,144,1064,1,0,0,0,146,1068,1,0,0,0,148,1076,1,0,0,0,150,1080,1,0,0,0,
		152,1115,1,0,0,0,154,1117,1,0,0,0,156,1126,1,0,0,0,158,1159,1,0,0,0,160,
		162,3,42,21,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,
		1,0,0,0,164,169,1,0,0,0,165,163,1,0,0,0,166,168,5,148,0,0,167,166,1,0,
		0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,173,1,0,0,0,171,
		169,1,0,0,0,172,174,3,2,1,0,173,172,1,0,0,0,173,174,1,0,0,0,174,184,1,
		0,0,0,175,177,5,148,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,
		0,178,179,1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,181,183,3,34,17,0,182,
		178,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,190,1,
		0,0,0,186,184,1,0,0,0,187,189,3,6,3,0,188,187,1,0,0,0,189,192,1,0,0,0,
		190,188,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,193,194,
		5,0,0,1,194,1,1,0,0,0,195,196,5,10,0,0,196,197,3,4,2,0,197,198,5,109,0,
		0,198,3,1,0,0,0,199,204,5,151,0,0,200,201,5,114,0,0,201,203,5,151,0,0,
		202,200,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,5,
		1,0,0,0,206,204,1,0,0,0,207,213,3,8,4,0,208,213,3,10,5,0,209,213,3,16,
		8,0,210,213,3,22,11,0,211,213,3,26,13,0,212,207,1,0,0,0,212,208,1,0,0,
		0,212,209,1,0,0,0,212,210,1,0,0,0,212,211,1,0,0,0,213,7,1,0,0,0,214,215,
		5,57,0,0,215,217,6,4,-1,0,216,214,1,0,0,0,216,217,1,0,0,0,217,218,1,0,
		0,0,218,219,5,58,0,0,219,220,3,152,76,0,220,221,3,66,33,0,221,222,5,109,
		0,0,222,9,1,0,0,0,223,225,5,148,0,0,224,223,1,0,0,0,225,228,1,0,0,0,226,
		224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,3,
		12,6,0,230,240,5,101,0,0,231,233,5,148,0,0,232,231,1,0,0,0,233,236,1,0,
		0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,234,1,0,0,0,237,
		239,3,60,30,0,238,234,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,
		1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,244,5,102,0,0,244,268,1,0,
		0,0,245,247,5,148,0,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,
		248,249,1,0,0,0,249,251,1,0,0,0,250,248,1,0,0,0,251,252,3,14,7,0,252,262,
		5,101,0,0,253,255,5,148,0,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,
		0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,258,256,1,0,0,0,259,261,3,62,31,
		0,260,256,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,
		265,1,0,0,0,264,262,1,0,0,0,265,266,5,102,0,0,266,268,1,0,0,0,267,226,
		1,0,0,0,267,248,1,0,0,0,268,11,1,0,0,0,269,270,5,24,0,0,270,271,5,151,
		0,0,271,272,5,25,0,0,272,275,5,42,0,0,273,274,5,30,0,0,274,276,3,4,2,0,
		275,273,1,0,0,0,275,276,1,0,0,0,276,13,1,0,0,0,277,278,5,24,0,0,278,279,
		5,151,0,0,279,280,5,25,0,0,280,281,5,43,0,0,281,15,1,0,0,0,282,284,5,148,
		0,0,283,282,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,
		288,1,0,0,0,287,285,1,0,0,0,288,289,3,18,9,0,289,301,5,101,0,0,290,292,
		5,148,0,0,291,290,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,
		0,0,294,296,1,0,0,0,295,293,1,0,0,0,296,297,3,74,37,0,297,298,5,109,0,
		0,298,300,1,0,0,0,299,293,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,
		302,1,0,0,0,302,304,1,0,0,0,303,301,1,0,0,0,304,305,5,102,0,0,305,17,1,
		0,0,0,306,307,5,20,0,0,307,310,5,151,0,0,308,309,5,30,0,0,309,311,3,20,
		10,0,310,308,1,0,0,0,310,311,1,0,0,0,311,19,1,0,0,0,312,317,3,4,2,0,313,
		314,5,110,0,0,314,316,3,4,2,0,315,313,1,0,0,0,316,319,1,0,0,0,317,315,
		1,0,0,0,317,318,1,0,0,0,318,21,1,0,0,0,319,317,1,0,0,0,320,322,5,148,0,
		0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,
		326,1,0,0,0,325,323,1,0,0,0,326,327,3,24,12,0,327,337,5,101,0,0,328,330,
		5,148,0,0,329,328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,
		0,0,332,334,1,0,0,0,333,331,1,0,0,0,334,336,3,34,17,0,335,331,1,0,0,0,
		336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,354,1,0,0,0,339,337,
		1,0,0,0,340,342,5,148,0,0,341,340,1,0,0,0,342,345,1,0,0,0,343,341,1,0,
		0,0,343,344,1,0,0,0,344,350,1,0,0,0,345,343,1,0,0,0,346,351,3,56,28,0,
		347,351,3,8,4,0,348,351,3,10,5,0,349,351,3,70,35,0,350,346,1,0,0,0,350,
		347,1,0,0,0,350,348,1,0,0,0,350,349,1,0,0,0,351,353,1,0,0,0,352,343,1,
		0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,
		356,354,1,0,0,0,357,358,5,102,0,0,358,23,1,0,0,0,359,360,5,13,0,0,360,
		363,5,151,0,0,361,362,5,30,0,0,362,364,3,4,2,0,363,361,1,0,0,0,363,364,
		1,0,0,0,364,367,1,0,0,0,365,366,5,31,0,0,366,368,3,20,10,0,367,365,1,0,
		0,0,367,368,1,0,0,0,368,25,1,0,0,0,369,371,5,148,0,0,370,369,1,0,0,0,371,
		374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,372,1,
		0,0,0,375,376,3,32,16,0,376,386,5,101,0,0,377,379,5,148,0,0,378,377,1,
		0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,383,1,0,0,0,
		382,380,1,0,0,0,383,385,3,34,17,0,384,380,1,0,0,0,385,388,1,0,0,0,386,
		384,1,0,0,0,386,387,1,0,0,0,387,398,1,0,0,0,388,386,1,0,0,0,389,391,5,
		148,0,0,390,389,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,
		0,393,395,1,0,0,0,394,392,1,0,0,0,395,397,3,36,18,0,396,392,1,0,0,0,397,
		400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,410,1,0,0,0,400,398,1,
		0,0,0,401,403,5,148,0,0,402,401,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,
		0,404,405,1,0,0,0,405,407,1,0,0,0,406,404,1,0,0,0,407,409,3,70,35,0,408,
		404,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,411,1,0,0,0,411,413,1,
		0,0,0,412,410,1,0,0,0,413,414,5,102,0,0,414,27,1,0,0,0,415,417,5,148,0,
		0,416,415,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,
		421,1,0,0,0,420,418,1,0,0,0,421,422,3,30,15,0,422,432,5,101,0,0,423,425,
		5,148,0,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,
		0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,431,3,34,17,0,430,426,1,0,0,0,
		431,434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,444,1,0,0,0,434,432,
		1,0,0,0,435,437,5,148,0,0,436,435,1,0,0,0,437,440,1,0,0,0,438,436,1,0,
		0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,438,1,0,0,0,441,443,3,38,19,0,
		442,438,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,456,
		1,0,0,0,446,444,1,0,0,0,447,449,5,148,0,0,448,447,1,0,0,0,449,452,1,0,
		0,0,450,448,1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,450,1,0,0,0,453,
		455,3,70,35,0,454,450,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,457,
		1,0,0,0,457,459,1,0,0,0,458,456,1,0,0,0,459,460,5,102,0,0,460,29,1,0,0,
		0,461,462,5,11,0,0,462,464,6,15,-1,0,463,461,1,0,0,0,463,464,1,0,0,0,464,
		465,1,0,0,0,465,466,5,21,0,0,466,469,5,151,0,0,467,468,5,30,0,0,468,470,
		3,4,2,0,469,467,1,0,0,0,469,470,1,0,0,0,470,473,1,0,0,0,471,472,5,31,0,
		0,472,474,3,20,10,0,473,471,1,0,0,0,473,474,1,0,0,0,474,31,1,0,0,0,475,
		476,5,11,0,0,476,478,6,16,-1,0,477,475,1,0,0,0,477,478,1,0,0,0,478,480,
		1,0,0,0,479,481,7,0,0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,
		0,482,483,5,19,0,0,483,486,5,151,0,0,484,485,5,30,0,0,485,487,3,4,2,0,
		486,484,1,0,0,0,486,487,1,0,0,0,487,490,1,0,0,0,488,489,5,31,0,0,489,491,
		3,20,10,0,490,488,1,0,0,0,490,491,1,0,0,0,491,33,1,0,0,0,492,493,5,32,
		0,0,493,494,3,4,2,0,494,495,5,109,0,0,495,35,1,0,0,0,496,501,3,52,26,0,
		497,501,3,54,27,0,498,501,3,56,28,0,499,501,3,10,5,0,500,496,1,0,0,0,500,
		497,1,0,0,0,500,498,1,0,0,0,500,499,1,0,0,0,501,37,1,0,0,0,502,506,3,50,
		25,0,503,506,3,54,27,0,504,506,3,10,5,0,505,502,1,0,0,0,505,503,1,0,0,
		0,505,504,1,0,0,0,506,39,1,0,0,0,507,508,5,113,0,0,508,521,5,151,0,0,509,
		518,5,97,0,0,510,515,3,150,75,0,511,512,5,110,0,0,512,514,3,150,75,0,513,
		511,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,0,516,519,1,
		0,0,0,517,515,1,0,0,0,518,510,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,
		520,522,5,98,0,0,521,509,1,0,0,0,521,522,1,0,0,0,522,41,1,0,0,0,523,526,
		3,44,22,0,524,526,3,46,23,0,525,523,1,0,0,0,525,524,1,0,0,0,526,43,1,0,
		0,0,527,528,5,111,0,0,528,529,5,1,0,0,529,530,7,1,0,0,530,45,1,0,0,0,531,
		532,5,111,0,0,532,533,5,5,0,0,533,534,7,2,0,0,534,47,1,0,0,0,535,536,5,
		111,0,0,536,537,5,9,0,0,537,49,1,0,0,0,538,540,3,40,20,0,539,538,1,0,0,
		0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,546,1,0,0,0,543,
		541,1,0,0,0,544,545,5,22,0,0,545,547,6,25,-1,0,546,544,1,0,0,0,546,547,
		1,0,0,0,547,548,1,0,0,0,548,549,5,23,0,0,549,550,5,151,0,0,550,554,5,101,
		0,0,551,553,3,58,29,0,552,551,1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,0,
		554,555,1,0,0,0,555,557,1,0,0,0,556,554,1,0,0,0,557,558,5,102,0,0,558,
		51,1,0,0,0,559,561,3,40,20,0,560,559,1,0,0,0,561,564,1,0,0,0,562,560,1,
		0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,562,1,0,0,0,565,566,5,34,0,0,
		566,567,3,152,76,0,567,572,5,151,0,0,568,569,5,110,0,0,569,571,5,151,0,
		0,570,568,1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,
		575,1,0,0,0,574,572,1,0,0,0,575,576,5,109,0,0,576,53,1,0,0,0,577,579,3,
		40,20,0,578,577,1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,
		0,581,583,1,0,0,0,582,580,1,0,0,0,583,584,5,37,0,0,584,585,3,152,76,0,
		585,590,5,151,0,0,586,587,5,110,0,0,587,589,5,151,0,0,588,586,1,0,0,0,
		589,592,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,593,1,0,0,0,592,590,
		1,0,0,0,593,594,5,109,0,0,594,55,1,0,0,0,595,597,3,40,20,0,596,595,1,0,
		0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,601,1,0,0,0,600,
		598,1,0,0,0,601,602,5,36,0,0,602,603,5,151,0,0,603,607,5,101,0,0,604,606,
		3,58,29,0,605,604,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,
		0,0,608,610,1,0,0,0,609,607,1,0,0,0,610,611,5,102,0,0,611,57,1,0,0,0,612,
		614,3,40,20,0,613,612,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,616,
		1,0,0,0,616,618,1,0,0,0,617,615,1,0,0,0,618,619,3,152,76,0,619,620,5,151,
		0,0,620,621,5,109,0,0,621,59,1,0,0,0,622,624,3,40,20,0,623,622,1,0,0,0,
		624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,625,
		1,0,0,0,628,629,3,152,76,0,629,630,5,151,0,0,630,631,5,109,0,0,631,640,
		1,0,0,0,632,634,3,40,20,0,633,632,1,0,0,0,634,637,1,0,0,0,635,633,1,0,
		0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,635,1,0,0,0,638,640,3,72,36,0,
		639,625,1,0,0,0,639,635,1,0,0,0,640,61,1,0,0,0,641,644,5,151,0,0,642,643,
		5,123,0,0,643,645,3,150,75,0,644,642,1,0,0,0,644,645,1,0,0,0,645,646,1,
		0,0,0,646,647,5,110,0,0,647,63,1,0,0,0,648,649,5,58,0,0,649,651,6,32,-1,
		0,650,648,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,653,3,152,76,0,653,
		658,3,68,34,0,654,655,5,110,0,0,655,657,3,68,34,0,656,654,1,0,0,0,657,
		660,1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,664,1,0,0,0,660,658,1,
		0,0,0,661,662,5,33,0,0,662,664,3,66,33,0,663,650,1,0,0,0,663,661,1,0,0,
		0,664,65,1,0,0,0,665,666,3,126,63,0,666,667,5,123,0,0,667,668,3,128,64,
		0,668,67,1,0,0,0,669,674,3,126,63,0,670,671,3,66,33,0,671,672,6,34,-1,
		0,672,674,1,0,0,0,673,669,1,0,0,0,673,670,1,0,0,0,674,69,1,0,0,0,675,677,
		3,40,20,0,676,675,1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,
		0,0,679,683,1,0,0,0,680,678,1,0,0,0,681,682,5,39,0,0,682,684,6,35,-1,0,
		683,681,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,3,72,36,0,686,
		71,1,0,0,0,687,688,3,74,37,0,688,689,5,101,0,0,689,690,3,82,41,0,690,691,
		5,102,0,0,691,73,1,0,0,0,692,694,3,152,76,0,693,692,1,0,0,0,693,694,1,
		0,0,0,694,695,1,0,0,0,695,696,5,151,0,0,696,697,3,76,38,0,697,75,1,0,0,
		0,698,700,5,97,0,0,699,701,3,78,39,0,700,699,1,0,0,0,700,701,1,0,0,0,701,
		702,1,0,0,0,702,703,5,98,0,0,703,77,1,0,0,0,704,709,3,80,40,0,705,706,
		5,110,0,0,706,708,3,80,40,0,707,705,1,0,0,0,708,711,1,0,0,0,709,707,1,
		0,0,0,709,710,1,0,0,0,710,79,1,0,0,0,711,709,1,0,0,0,712,714,7,3,0,0,713,
		712,1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,716,3,152,76,0,716,717,
		5,151,0,0,717,81,1,0,0,0,718,720,3,144,72,0,719,718,1,0,0,0,720,723,1,
		0,0,0,721,719,1,0,0,0,721,722,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,
		724,726,3,134,67,0,725,724,1,0,0,0,725,726,1,0,0,0,726,83,1,0,0,0,727,
		731,5,101,0,0,728,730,3,146,73,0,729,728,1,0,0,0,730,733,1,0,0,0,731,729,
		1,0,0,0,731,732,1,0,0,0,732,734,1,0,0,0,733,731,1,0,0,0,734,735,5,102,
		0,0,735,85,1,0,0,0,736,742,3,126,63,0,737,742,3,118,59,0,738,742,3,100,
		50,0,739,742,3,94,47,0,740,742,3,96,48,0,741,736,1,0,0,0,741,737,1,0,0,
		0,741,738,1,0,0,0,741,739,1,0,0,0,741,740,1,0,0,0,742,87,1,0,0,0,743,746,
		3,126,63,0,744,746,3,100,50,0,745,743,1,0,0,0,745,744,1,0,0,0,746,89,1,
		0,0,0,747,750,3,86,43,0,748,749,5,103,0,0,749,751,3,88,44,0,750,748,1,
		0,0,0,751,752,1,0,0,0,752,750,1,0,0,0,752,753,1,0,0,0,753,91,1,0,0,0,754,
		757,3,86,43,0,755,756,5,103,0,0,756,758,3,126,63,0,757,755,1,0,0,0,758,
		759,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,93,1,0,0,0,761,762,7,4,
		0,0,762,763,5,103,0,0,763,764,3,126,63,0,764,95,1,0,0,0,765,766,7,4,0,
		0,766,767,5,103,0,0,767,768,3,100,50,0,768,97,1,0,0,0,769,772,3,94,47,
		0,770,772,3,96,48,0,771,769,1,0,0,0,771,770,1,0,0,0,772,99,1,0,0,0,773,
		774,3,4,2,0,774,776,5,97,0,0,775,777,3,122,61,0,776,775,1,0,0,0,776,777,
		1,0,0,0,777,778,1,0,0,0,778,779,5,98,0,0,779,101,1,0,0,0,780,781,5,45,
		0,0,781,782,5,97,0,0,782,783,3,128,64,0,783,784,5,98,0,0,784,788,3,84,
		42,0,785,787,3,104,52,0,786,785,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,
		0,788,789,1,0,0,0,789,792,1,0,0,0,790,788,1,0,0,0,791,793,3,106,53,0,792,
		791,1,0,0,0,792,793,1,0,0,0,793,103,1,0,0,0,794,798,5,46,0,0,795,796,5,
		47,0,0,796,798,5,45,0,0,797,794,1,0,0,0,797,795,1,0,0,0,798,799,1,0,0,
		0,799,800,5,97,0,0,800,801,3,128,64,0,801,802,5,98,0,0,802,803,3,84,42,
		0,803,105,1,0,0,0,804,805,5,47,0,0,805,806,3,84,42,0,806,107,1,0,0,0,807,
		808,5,48,0,0,808,809,5,97,0,0,809,810,3,128,64,0,810,811,5,98,0,0,811,
		815,5,101,0,0,812,814,3,110,55,0,813,812,1,0,0,0,814,817,1,0,0,0,815,813,
		1,0,0,0,815,816,1,0,0,0,816,818,1,0,0,0,817,815,1,0,0,0,818,819,5,102,
		0,0,819,109,1,0,0,0,820,821,5,55,0,0,821,822,3,150,75,0,822,824,5,108,
		0,0,823,825,5,101,0,0,824,823,1,0,0,0,824,825,1,0,0,0,825,829,1,0,0,0,
		826,828,3,144,72,0,827,826,1,0,0,0,828,831,1,0,0,0,829,827,1,0,0,0,829,
		830,1,0,0,0,830,832,1,0,0,0,831,829,1,0,0,0,832,834,3,142,71,0,833,835,
		5,102,0,0,834,833,1,0,0,0,834,835,1,0,0,0,835,111,1,0,0,0,836,837,5,51,
		0,0,837,838,5,97,0,0,838,839,3,128,64,0,839,840,5,98,0,0,840,841,3,84,
		42,0,841,113,1,0,0,0,842,843,5,49,0,0,843,844,5,97,0,0,844,845,3,128,64,
		0,845,846,5,109,0,0,846,847,3,128,64,0,847,848,5,109,0,0,848,849,3,128,
		64,0,849,850,5,98,0,0,850,851,3,84,42,0,851,115,1,0,0,0,852,853,5,50,0,
		0,853,854,3,84,42,0,854,855,5,51,0,0,855,856,3,118,59,0,856,117,1,0,0,
		0,857,858,5,97,0,0,858,859,3,128,64,0,859,860,5,98,0,0,860,119,1,0,0,0,
		861,862,3,152,76,0,862,864,5,97,0,0,863,865,3,122,61,0,864,863,1,0,0,0,
		864,865,1,0,0,0,865,866,1,0,0,0,866,867,5,98,0,0,867,121,1,0,0,0,868,873,
		3,128,64,0,869,870,5,110,0,0,870,872,3,128,64,0,871,869,1,0,0,0,872,875,
		1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,123,1,0,0,0,875,873,1,0,0,
		0,876,877,7,5,0,0,877,125,1,0,0,0,878,879,5,151,0,0,879,127,1,0,0,0,880,
		881,6,64,-1,0,881,949,3,126,63,0,882,949,3,118,59,0,883,949,3,148,74,0,
		884,949,3,150,75,0,885,949,3,98,49,0,886,949,3,90,45,0,887,949,3,100,50,
		0,888,949,3,130,65,0,889,949,3,120,60,0,890,891,5,106,0,0,891,949,3,128,
		64,36,892,893,3,132,66,0,893,894,7,6,0,0,894,949,1,0,0,0,895,896,7,6,0,
		0,896,949,3,132,66,0,897,898,7,7,0,0,898,949,3,128,64,33,899,900,3,132,
		66,0,900,901,5,123,0,0,901,902,3,128,64,12,902,949,1,0,0,0,903,904,3,132,
		66,0,904,905,5,132,0,0,905,906,3,128,64,11,906,949,1,0,0,0,907,908,3,132,
		66,0,908,909,5,133,0,0,909,910,3,128,64,10,910,949,1,0,0,0,911,912,3,132,
		66,0,912,913,5,134,0,0,913,914,3,128,64,9,914,949,1,0,0,0,915,916,3,132,
		66,0,916,917,5,135,0,0,917,918,3,128,64,8,918,949,1,0,0,0,919,920,3,132,
		66,0,920,921,5,136,0,0,921,922,3,128,64,7,922,949,1,0,0,0,923,924,3,132,
		66,0,924,925,5,137,0,0,925,926,3,128,64,6,926,949,1,0,0,0,927,928,3,132,
		66,0,928,929,5,138,0,0,929,930,3,128,64,5,930,949,1,0,0,0,931,932,3,132,
		66,0,932,933,5,139,0,0,933,934,3,128,64,4,934,949,1,0,0,0,935,936,3,132,
		66,0,936,937,5,140,0,0,937,938,3,128,64,3,938,949,1,0,0,0,939,940,3,132,
		66,0,940,941,5,141,0,0,941,942,3,128,64,2,942,949,1,0,0,0,943,944,5,97,
		0,0,944,945,3,152,76,0,945,946,5,98,0,0,946,947,3,128,64,1,947,949,1,0,
		0,0,948,880,1,0,0,0,948,882,1,0,0,0,948,883,1,0,0,0,948,884,1,0,0,0,948,
		885,1,0,0,0,948,886,1,0,0,0,948,887,1,0,0,0,948,888,1,0,0,0,948,889,1,
		0,0,0,948,890,1,0,0,0,948,892,1,0,0,0,948,895,1,0,0,0,948,897,1,0,0,0,
		948,899,1,0,0,0,948,903,1,0,0,0,948,907,1,0,0,0,948,911,1,0,0,0,948,915,
		1,0,0,0,948,919,1,0,0,0,948,923,1,0,0,0,948,927,1,0,0,0,948,931,1,0,0,
		0,948,935,1,0,0,0,948,939,1,0,0,0,948,943,1,0,0,0,949,1015,1,0,0,0,950,
		951,10,32,0,0,951,952,5,129,0,0,952,1014,3,128,64,33,953,954,10,31,0,0,
		954,955,5,128,0,0,955,1014,3,128,64,32,956,957,10,30,0,0,957,958,5,127,
		0,0,958,1014,3,128,64,31,959,960,10,29,0,0,960,961,5,126,0,0,961,1014,
		3,128,64,30,962,963,10,28,0,0,963,964,5,124,0,0,964,1014,3,128,64,29,965,
		966,10,27,0,0,966,967,5,125,0,0,967,1014,3,128,64,28,968,969,10,26,0,0,
		969,970,5,117,0,0,970,1014,3,128,64,27,971,972,10,25,0,0,972,973,5,118,
		0,0,973,1014,3,128,64,26,974,975,10,24,0,0,975,976,5,122,0,0,976,1014,
		3,128,64,25,977,978,10,23,0,0,978,979,5,121,0,0,979,1014,3,128,64,24,980,
		981,10,22,0,0,981,982,5,119,0,0,982,1014,3,128,64,23,983,984,10,21,0,0,
		984,985,5,115,0,0,985,1014,3,128,64,22,986,987,10,20,0,0,987,988,5,116,
		0,0,988,1014,3,128,64,21,989,990,10,19,0,0,990,991,5,120,0,0,991,1014,
		3,128,64,19,992,993,10,18,0,0,993,994,5,145,0,0,994,1014,3,128,64,18,995,
		996,10,17,0,0,996,997,5,146,0,0,997,1014,3,128,64,17,998,999,10,16,0,0,
		999,1000,5,143,0,0,1000,1014,3,128,64,17,1001,1002,10,15,0,0,1002,1003,
		5,142,0,0,1003,1014,3,128,64,16,1004,1005,10,14,0,0,1005,1006,5,144,0,
		0,1006,1014,3,128,64,15,1007,1008,10,13,0,0,1008,1009,5,107,0,0,1009,1010,
		3,128,64,0,1010,1011,5,108,0,0,1011,1012,3,128,64,13,1012,1014,1,0,0,0,
		1013,950,1,0,0,0,1013,953,1,0,0,0,1013,956,1,0,0,0,1013,959,1,0,0,0,1013,
		962,1,0,0,0,1013,965,1,0,0,0,1013,968,1,0,0,0,1013,971,1,0,0,0,1013,974,
		1,0,0,0,1013,977,1,0,0,0,1013,980,1,0,0,0,1013,983,1,0,0,0,1013,986,1,
		0,0,0,1013,989,1,0,0,0,1013,992,1,0,0,0,1013,995,1,0,0,0,1013,998,1,0,
		0,0,1013,1001,1,0,0,0,1013,1004,1,0,0,0,1013,1007,1,0,0,0,1014,1017,1,
		0,0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,129,1,0,0,0,1017,1015,1,
		0,0,0,1018,1022,3,126,63,0,1019,1022,3,98,49,0,1020,1022,3,100,50,0,1021,
		1018,1,0,0,0,1021,1019,1,0,0,0,1021,1020,1,0,0,0,1022,1023,1,0,0,0,1023,
		1024,5,99,0,0,1024,1025,3,128,64,0,1025,1026,5,100,0,0,1026,131,1,0,0,
		0,1027,1032,3,130,65,0,1028,1032,3,126,63,0,1029,1032,3,94,47,0,1030,1032,
		3,92,46,0,1031,1027,1,0,0,0,1031,1028,1,0,0,0,1031,1029,1,0,0,0,1031,1030,
		1,0,0,0,1032,133,1,0,0,0,1033,1034,5,44,0,0,1034,1035,3,128,64,0,1035,
		1036,5,109,0,0,1036,135,1,0,0,0,1037,1038,5,52,0,0,1038,1039,5,109,0,0,
		1039,137,1,0,0,0,1040,1041,5,53,0,0,1041,1042,5,109,0,0,1042,139,1,0,0,
		0,1043,1044,5,54,0,0,1044,1045,5,109,0,0,1045,141,1,0,0,0,1046,1051,3,
		136,68,0,1047,1051,3,134,67,0,1048,1051,3,138,69,0,1049,1051,3,140,70,
		0,1050,1046,1,0,0,0,1050,1047,1,0,0,0,1050,1048,1,0,0,0,1050,1049,1,0,
		0,0,1051,143,1,0,0,0,1052,1053,3,64,32,0,1053,1054,5,109,0,0,1054,1065,
		1,0,0,0,1055,1056,3,128,64,0,1056,1057,5,109,0,0,1057,1065,1,0,0,0,1058,
		1065,3,84,42,0,1059,1065,3,102,51,0,1060,1065,3,108,54,0,1061,1065,3,112,
		56,0,1062,1065,3,114,57,0,1063,1065,3,116,58,0,1064,1052,1,0,0,0,1064,
		1055,1,0,0,0,1064,1058,1,0,0,0,1064,1059,1,0,0,0,1064,1060,1,0,0,0,1064,
		1061,1,0,0,0,1064,1062,1,0,0,0,1064,1063,1,0,0,0,1065,145,1,0,0,0,1066,
		1069,3,144,72,0,1067,1069,3,142,71,0,1068,1066,1,0,0,0,1068,1067,1,0,0,
		0,1069,147,1,0,0,0,1070,1077,5,152,0,0,1071,1077,5,153,0,0,1072,1077,5,
		154,0,0,1073,1077,5,155,0,0,1074,1077,5,156,0,0,1075,1077,5,157,0,0,1076,
		1070,1,0,0,0,1076,1071,1,0,0,0,1076,1072,1,0,0,0,1076,1073,1,0,0,0,1076,
		1074,1,0,0,0,1076,1075,1,0,0,0,1077,149,1,0,0,0,1078,1081,3,148,74,0,1079,
		1081,3,4,2,0,1080,1078,1,0,0,0,1080,1079,1,0,0,0,1081,151,1,0,0,0,1082,
		1089,3,156,78,0,1083,1085,5,99,0,0,1084,1086,5,155,0,0,1085,1084,1,0,0,
		0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1088,5,100,0,0,1088,1090,6,
		76,-1,0,1089,1083,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1092,
		6,76,-1,0,1092,1116,1,0,0,0,1093,1100,3,158,79,0,1094,1096,5,99,0,0,1095,
		1097,5,155,0,0,1096,1095,1,0,0,0,1096,1097,1,0,0,0,1097,1098,1,0,0,0,1098,
		1099,5,100,0,0,1099,1101,6,76,-1,0,1100,1094,1,0,0,0,1100,1101,1,0,0,0,
		1101,1102,1,0,0,0,1102,1103,6,76,-1,0,1103,1116,1,0,0,0,1104,1111,3,154,
		77,0,1105,1107,5,99,0,0,1106,1108,5,155,0,0,1107,1106,1,0,0,0,1107,1108,
		1,0,0,0,1108,1109,1,0,0,0,1109,1110,5,100,0,0,1110,1112,6,76,-1,0,1111,
		1105,1,0,0,0,1111,1112,1,0,0,0,1112,1113,1,0,0,0,1113,1114,6,76,-1,0,1114,
		1116,1,0,0,0,1115,1082,1,0,0,0,1115,1093,1,0,0,0,1115,1104,1,0,0,0,1116,
		153,1,0,0,0,1117,1118,3,4,2,0,1118,155,1,0,0,0,1119,1127,5,59,0,0,1120,
		1127,5,60,0,0,1121,1127,5,61,0,0,1122,1127,5,62,0,0,1123,1127,5,63,0,0,
		1124,1127,5,64,0,0,1125,1127,5,65,0,0,1126,1119,1,0,0,0,1126,1120,1,0,
		0,0,1126,1121,1,0,0,0,1126,1122,1,0,0,0,1126,1123,1,0,0,0,1126,1124,1,
		0,0,0,1126,1125,1,0,0,0,1127,157,1,0,0,0,1128,1160,5,66,0,0,1129,1160,
		5,67,0,0,1130,1160,5,68,0,0,1131,1160,5,69,0,0,1132,1160,5,70,0,0,1133,
		1160,5,71,0,0,1134,1160,5,72,0,0,1135,1160,5,73,0,0,1136,1160,5,74,0,0,
		1137,1160,5,75,0,0,1138,1160,5,76,0,0,1139,1160,5,77,0,0,1140,1160,5,78,
		0,0,1141,1160,5,79,0,0,1142,1160,5,80,0,0,1143,1160,5,81,0,0,1144,1160,
		5,82,0,0,1145,1160,5,83,0,0,1146,1160,5,84,0,0,1147,1160,5,85,0,0,1148,
		1160,5,86,0,0,1149,1160,5,87,0,0,1150,1160,5,88,0,0,1151,1160,5,89,0,0,
		1152,1160,5,90,0,0,1153,1160,5,92,0,0,1154,1160,5,91,0,0,1155,1160,5,93,
		0,0,1156,1160,5,94,0,0,1157,1160,5,95,0,0,1158,1160,5,96,0,0,1159,1128,
		1,0,0,0,1159,1129,1,0,0,0,1159,1130,1,0,0,0,1159,1131,1,0,0,0,1159,1132,
		1,0,0,0,1159,1133,1,0,0,0,1159,1134,1,0,0,0,1159,1135,1,0,0,0,1159,1136,
		1,0,0,0,1159,1137,1,0,0,0,1159,1138,1,0,0,0,1159,1139,1,0,0,0,1159,1140,
		1,0,0,0,1159,1141,1,0,0,0,1159,1142,1,0,0,0,1159,1143,1,0,0,0,1159,1144,
		1,0,0,0,1159,1145,1,0,0,0,1159,1146,1,0,0,0,1159,1147,1,0,0,0,1159,1148,
		1,0,0,0,1159,1149,1,0,0,0,1159,1150,1,0,0,0,1159,1151,1,0,0,0,1159,1152,
		1,0,0,0,1159,1153,1,0,0,0,1159,1154,1,0,0,0,1159,1155,1,0,0,0,1159,1156,
		1,0,0,0,1159,1157,1,0,0,0,1159,1158,1,0,0,0,1160,159,1,0,0,0,118,163,169,
		173,178,184,190,204,212,216,226,234,240,248,256,262,267,275,285,293,301,
		310,317,323,331,337,343,350,354,363,367,372,380,386,392,398,404,410,418,
		426,432,438,444,450,456,463,469,473,477,480,486,490,500,505,515,518,521,
		525,541,546,554,562,572,580,590,598,607,615,625,635,639,644,650,658,663,
		673,678,683,693,700,709,713,721,725,731,741,745,752,759,771,776,788,792,
		797,815,824,829,834,864,873,948,1013,1015,1021,1031,1050,1064,1068,1076,
		1080,1085,1089,1096,1100,1107,1111,1115,1126,1159
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SPSL.Language
