group HLSL: Base;

// SPSL translator template for HLSL

// Constant Buffer
cbuffer(name, binding, set, properties) ::= <<
cbuffer <name> : register(b<binding>, space<set>)
{
  <properties:prop(); separator = ";\n">;
};
>>

// Structure
struct(name, properties, functions) ::= <<
struct <name>
{
  <if(properties)>
  <properties:prop(); separator = ";\n">;
  <endif>
  <if(functions)>

  <functions; separator = "\n\n">
  <endif>
};
>>

// Enumeration
enum(name, properties) ::= <<
<properties:{p|const <p.type> <name>_<p.name> = <p.value>}; separator = ";\n">;
>>

// Global Variable
const_global_var(isStatic, type, name, initializer) ::= <<
<if(isStatic)>static <endif>const <type> <name> = <initializer>;
>>

// Type cast
cast(type, value) ::= "(<type>)<value>"

member_invocation(owner, function, params) ::= "<owner>.<invocation(function, params)>"

new_instance(type, params) ::= "<invocation(type, params)>"

// Permutation Variable
permutation_var(m, enum_values) ::= <<
<if(enum_values)>
<enum_values:macro(); separator = "\n">
<endif>
<m:macro()>
>>

// Permute block
permute_block(condition, block, otherwise) ::= <<
#if <condition>
<block>
<if(otherwise)>
#else
<otherwise>
<endif>
#endif
>>
