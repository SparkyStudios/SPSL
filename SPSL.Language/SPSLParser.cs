//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\sparky_studios\SPSL\SPSL.Language\SPSL.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SPSL.Language {

using SPSL.Language.AST;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class SPSLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		KEYWORD_NAMESPACE=10, KEYWORD_ABSTRACT=11, KEYWORD_VERTEX=12, KEYWORD_FRAGMENT=13, 
		KEYWORD_PIXEL=14, KEYWORD_GEOMETRY=15, KEYWORD_HULL=16, KEYWORD_DOMAIN=17, 
		KEYWORD_COMPUTE=18, KEYWORD_SHADER=19, KEYWORD_INTERFACE=20, KEYWORD_MATERIAL=21, 
		KEYWORD_PARTIAL=22, KEYWORD_PARAMS=23, KEYWORD_TYPE=24, KEYWORD_AS=25, 
		KEYWORD_IN=26, KEYWORD_OF=27, KEYWORD_OUT=28, KEYWORD_INOUT=29, KEYWORD_EXTENDS=30, 
		KEYWORD_IMPLEMENTS=31, KEYWORD_USE=32, KEYWORD_VAR=33, KEYWORD_INPUT=34, 
		KEYWORD_OUTPUT=35, KEYWORD_BUFFER=36, KEYWORD_LOCAL=37, KEYWORD_GLOBAL=38, 
		KEYWORD_OVERRIDE=39, KEYWORD_THIS=40, KEYWORD_BASE=41, KEYWORD_STRUCT=42, 
		KEYWORD_ENUM=43, KEYWORD_RETURN=44, KEYWORD_IF=45, KEYWORD_ELIF=46, KEYWORD_ELSE=47, 
		KEYWORD_SWITCH=48, KEYWORD_FOR=49, KEYWORD_DO=50, KEYWORD_WHILE=51, KEYWORD_BREAK=52, 
		KEYWORD_CONTINUE=53, KEYWORD_DISCARD=54, KEYWORD_CASE=55, KEYWORD_DEFAULT=56, 
		KEYWORD_STATIC=57, KEYWORD_CONST=58, KEYWORD_PERMUTATION=59, KEYWORD_PERMUTE=60, 
		TYPE_VOID=61, TYPE_BOOL=62, TYPE_INT=63, TYPE_UINT=64, TYPE_FLOAT=65, 
		TYPE_DOUBLE=66, TYPE_STRING=67, TYPE_VECTOR2B=68, TYPE_VECTOR2F=69, TYPE_VECTOR2I=70, 
		TYPE_VECTOR2UI=71, TYPE_VECTOR3B=72, TYPE_VECTOR3F=73, TYPE_VECTOR3I=74, 
		TYPE_VECTOR3UI=75, TYPE_VECTOR4B=76, TYPE_VECTOR4F=77, TYPE_VECTOR4I=78, 
		TYPE_VECTOR4UI=79, TYPE_MATRIX2F=80, TYPE_MATRIX3F=81, TYPE_MATRIX4F=82, 
		TYPE_MATRIX2X3F=83, TYPE_MATRIX2X4F=84, TYPE_MATRIX3X2F=85, TYPE_MATRIX3X4F=86, 
		TYPE_MATRIX4X2F=87, TYPE_MATRIX4X3F=88, TYPE_COLOR3=89, TYPE_COLOR4=90, 
		TYPE_SAMPLER=91, TYPE_TEXTURE1D=92, TYPE_TEXTURE2D=93, TYPE_TEXTURE1DARRAY=94, 
		TYPE_TEXTURE2DARRAY=95, TYPE_TEXTURE3D=96, TYPE_CUBEMAP=97, TYPE_CUBEMAPARRAY=98, 
		TOK_OPEN_PAREN=99, TOK_CLOSE_PAREN=100, TOK_OPEN_BRACKET=101, TOK_CLOSE_BRACKET=102, 
		TOK_OPEN_BRACE=103, TOK_CLOSE_BRACE=104, TOK_DOT=105, TOK_UNDERSCORE=106, 
		TOK_TILDE=107, TOK_EXCLAMATION=108, TOK_QUESTION=109, TOK_COLON=110, TOK_SEMICOLON=111, 
		TOK_COMMA=112, TOK_HASHTAG=113, TOK_DOLLAR=114, TOK_AT=115, TOK_BACKSLASH=116, 
		OP_PIPE=117, OP_AMPERSAND=118, OP_PLUS=119, OP_MINUS=120, OP_ASTERISK=121, 
		OP_EXPONENT=122, OP_MODULUS=123, OP_DIV=124, OP_ASSIGN=125, OP_EQUAL=126, 
		OP_DIFFERENT=127, OP_GREATER_THAN=128, OP_LESSER_THAN=129, OP_GEQ_THAN=130, 
		OP_LEQ_THAN=131, OP_INCREMENT=132, OP_DECREMENT=133, OP_PLUS_ASSIGN=134, 
		OP_MINUS_ASSIGN=135, OP_MUL_ASSIGN=136, OP_DIV_ASSIGN=137, OP_MODULUS_ASSIGN=138, 
		OP_BITWISE_OR_ASSIGN=139, OP_BITWISE_AND_ASSIGN=140, OP_EXPONENT_ASSIGN=141, 
		OP_LSHIFT_ASSIGN=142, OP_RSHIFT_ASSIGN=143, OP_OR=144, OP_AND=145, OP_XOR=146, 
		OP_LSHIFT=147, OP_RSHIFT=148, WHITESPACE=149, DOC_COMMENT=150, BLOCK_COMMENT=151, 
		LINE_COMMENT=152, BoolLiteral=153, DoubleLiteral=154, FloatLiteral=155, 
		IntegerLiteral=156, UnsignedIntegerLiteral=157, StringLiteral=158, IDENTIFIER=159;
	public const int
		RULE_file = 0, RULE_namespaceDefinition = 1, RULE_namespacedTypeName = 2, 
		RULE_fileLevelDefinition = 3, RULE_globalVariable = 4, RULE_permutationVariableBool = 5, 
		RULE_permutationVariableEnum = 6, RULE_permutationVariableInteger = 7, 
		RULE_permutationVariable = 8, RULE_type = 9, RULE_structDefinition = 10, 
		RULE_enumDefinition = 11, RULE_interface = 12, RULE_interfaceDefinition = 13, 
		RULE_interfacesList = 14, RULE_shaderFragment = 15, RULE_shaderFragmentDefinition = 16, 
		RULE_shader = 17, RULE_material = 18, RULE_materialDefinition = 19, RULE_shaderDefinition = 20, 
		RULE_useDirective = 21, RULE_shaderMember = 22, RULE_materialMember = 23, 
		RULE_annotation = 24, RULE_directive = 25, RULE_precisionDirective = 26, 
		RULE_shaderLangDirective = 27, RULE_parameterDirective = 28, RULE_materialParams = 29, 
		RULE_inputVarDefinition = 30, RULE_localVarDeclaration = 31, RULE_bufferDefinition = 32, 
		RULE_bufferComponent = 33, RULE_structComponent = 34, RULE_enumComponent = 35, 
		RULE_variableDeclaration = 36, RULE_variableDeclarationAssignment = 37, 
		RULE_variableIdentity = 38, RULE_shaderFunction = 39, RULE_function = 40, 
		RULE_functionHead = 41, RULE_functionSignature = 42, RULE_argList = 43, 
		RULE_argDef = 44, RULE_functionBody = 45, RULE_statementBlock = 46, RULE_referencableExpression = 47, 
		RULE_chainableExpression = 48, RULE_chainedExpression = 49, RULE_assignableChainedExpression = 50, 
		RULE_propertyMemberReferenceExpression = 51, RULE_methodMemberReferenceExpression = 52, 
		RULE_memberReferenceExpression = 53, RULE_invocationExpression = 54, RULE_permuteStatement = 55, 
		RULE_ifStatement = 56, RULE_elifStatement = 57, RULE_elseStatement = 58, 
		RULE_switchStatement = 59, RULE_caseStatement = 60, RULE_whileStatement = 61, 
		RULE_forStatement = 62, RULE_doWhileStatement = 63, RULE_parenthesizedExpression = 64, 
		RULE_newInstanceExpression = 65, RULE_parametersList = 66, RULE_contextAccessExpression = 67, 
		RULE_basicExpression = 68, RULE_expressionStatement = 69, RULE_arrayAccessExpression = 70, 
		RULE_assignableExpression = 71, RULE_returnStatement = 72, RULE_breakStatement = 73, 
		RULE_continueStatement = 74, RULE_discardStatement = 75, RULE_leaveControlFlowStatement = 76, 
		RULE_stayControlFlowStatement = 77, RULE_statement = 78, RULE_primitiveExpression = 79, 
		RULE_constantExpression = 80, RULE_dataType = 81, RULE_userDefinedDataType = 82, 
		RULE_primitiveDataType = 83, RULE_builtinDataType = 84;
	public static readonly string[] ruleNames = {
		"file", "namespaceDefinition", "namespacedTypeName", "fileLevelDefinition", 
		"globalVariable", "permutationVariableBool", "permutationVariableEnum", 
		"permutationVariableInteger", "permutationVariable", "type", "structDefinition", 
		"enumDefinition", "interface", "interfaceDefinition", "interfacesList", 
		"shaderFragment", "shaderFragmentDefinition", "shader", "material", "materialDefinition", 
		"shaderDefinition", "useDirective", "shaderMember", "materialMember", 
		"annotation", "directive", "precisionDirective", "shaderLangDirective", 
		"parameterDirective", "materialParams", "inputVarDefinition", "localVarDeclaration", 
		"bufferDefinition", "bufferComponent", "structComponent", "enumComponent", 
		"variableDeclaration", "variableDeclarationAssignment", "variableIdentity", 
		"shaderFunction", "function", "functionHead", "functionSignature", "argList", 
		"argDef", "functionBody", "statementBlock", "referencableExpression", 
		"chainableExpression", "chainedExpression", "assignableChainedExpression", 
		"propertyMemberReferenceExpression", "methodMemberReferenceExpression", 
		"memberReferenceExpression", "invocationExpression", "permuteStatement", 
		"ifStatement", "elifStatement", "elseStatement", "switchStatement", "caseStatement", 
		"whileStatement", "forStatement", "doWhileStatement", "parenthesizedExpression", 
		"newInstanceExpression", "parametersList", "contextAccessExpression", 
		"basicExpression", "expressionStatement", "arrayAccessExpression", "assignableExpression", 
		"returnStatement", "breakStatement", "continueStatement", "discardStatement", 
		"leaveControlFlowStatement", "stayControlFlowStatement", "statement", 
		"primitiveExpression", "constantExpression", "dataType", "userDefinedDataType", 
		"primitiveDataType", "builtinDataType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'precision'", "'low'", "'medium'", "'high'", "'shaderLang'", "'GLSL'", 
		"'HLSL'", "'MSL'", "'shaderParam'", "'namespace'", "'abstract'", "'vertex'", 
		"'fragment'", "'pixel'", "'geometry'", "'hull'", "'domain'", "'compute'", 
		"'shader'", "'interface'", "'material'", "'partial'", "'params'", "'type'", 
		"'as'", "'in'", "'of'", "'out'", "'inout'", "'extends'", "'implements'", 
		"'use'", "'var'", "'input'", "'output'", "'buffer'", "'local'", "'global'", 
		"'override'", "'this'", "'base'", "'struct'", "'enum'", "'return'", "'if'", 
		"'elif'", "'else'", "'switch'", "'for'", "'do'", "'while'", "'break'", 
		"'continue'", "'discard'", "'case'", "'default'", "'static'", "'const'", 
		"'permutation'", "'permute'", "'void'", "'bool'", "'int'", "'uint'", "'float'", 
		"'double'", "'string'", "'vector2b'", "'vector2f'", "'vector2i'", "'vector2ui'", 
		"'vector3b'", "'vector3f'", "'vector3i'", "'vector3ui'", "'vector4b'", 
		"'vector4f'", "'vector4i'", "'vector4ui'", "'matrix2f'", "'matrix3f'", 
		"'matrix4f'", "'matrix2x3f'", "'matrix2x4f'", "'matrix3x2f'", "'matrix3x4f'", 
		"'matrix4x2f'", "'matrix4x3f'", "'color3'", "'color4'", "'sampler'", "'texture1d'", 
		"'texture2d'", "'texture1dArray'", "'texture2dArray'", "'texture3d'", 
		"'cubemap'", "'cubemapArray'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
		"'.'", "'_'", "'~'", "'!'", "'?'", "':'", "';'", "','", "'#'", "'$'", 
		"'@'", "'\\'", "'|'", "'&'", "'+'", "'-'", "'*'", "'^'", "'%'", "'/'", 
		"'='", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'++'", "'--'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'|='", "'&='", "'^='", "'<<='", "'>>='", 
		null, null, "'^^'", "'<<'", "'>>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "KEYWORD_NAMESPACE", 
		"KEYWORD_ABSTRACT", "KEYWORD_VERTEX", "KEYWORD_FRAGMENT", "KEYWORD_PIXEL", 
		"KEYWORD_GEOMETRY", "KEYWORD_HULL", "KEYWORD_DOMAIN", "KEYWORD_COMPUTE", 
		"KEYWORD_SHADER", "KEYWORD_INTERFACE", "KEYWORD_MATERIAL", "KEYWORD_PARTIAL", 
		"KEYWORD_PARAMS", "KEYWORD_TYPE", "KEYWORD_AS", "KEYWORD_IN", "KEYWORD_OF", 
		"KEYWORD_OUT", "KEYWORD_INOUT", "KEYWORD_EXTENDS", "KEYWORD_IMPLEMENTS", 
		"KEYWORD_USE", "KEYWORD_VAR", "KEYWORD_INPUT", "KEYWORD_OUTPUT", "KEYWORD_BUFFER", 
		"KEYWORD_LOCAL", "KEYWORD_GLOBAL", "KEYWORD_OVERRIDE", "KEYWORD_THIS", 
		"KEYWORD_BASE", "KEYWORD_STRUCT", "KEYWORD_ENUM", "KEYWORD_RETURN", "KEYWORD_IF", 
		"KEYWORD_ELIF", "KEYWORD_ELSE", "KEYWORD_SWITCH", "KEYWORD_FOR", "KEYWORD_DO", 
		"KEYWORD_WHILE", "KEYWORD_BREAK", "KEYWORD_CONTINUE", "KEYWORD_DISCARD", 
		"KEYWORD_CASE", "KEYWORD_DEFAULT", "KEYWORD_STATIC", "KEYWORD_CONST", 
		"KEYWORD_PERMUTATION", "KEYWORD_PERMUTE", "TYPE_VOID", "TYPE_BOOL", "TYPE_INT", 
		"TYPE_UINT", "TYPE_FLOAT", "TYPE_DOUBLE", "TYPE_STRING", "TYPE_VECTOR2B", 
		"TYPE_VECTOR2F", "TYPE_VECTOR2I", "TYPE_VECTOR2UI", "TYPE_VECTOR3B", "TYPE_VECTOR3F", 
		"TYPE_VECTOR3I", "TYPE_VECTOR3UI", "TYPE_VECTOR4B", "TYPE_VECTOR4F", "TYPE_VECTOR4I", 
		"TYPE_VECTOR4UI", "TYPE_MATRIX2F", "TYPE_MATRIX3F", "TYPE_MATRIX4F", "TYPE_MATRIX2X3F", 
		"TYPE_MATRIX2X4F", "TYPE_MATRIX3X2F", "TYPE_MATRIX3X4F", "TYPE_MATRIX4X2F", 
		"TYPE_MATRIX4X3F", "TYPE_COLOR3", "TYPE_COLOR4", "TYPE_SAMPLER", "TYPE_TEXTURE1D", 
		"TYPE_TEXTURE2D", "TYPE_TEXTURE1DARRAY", "TYPE_TEXTURE2DARRAY", "TYPE_TEXTURE3D", 
		"TYPE_CUBEMAP", "TYPE_CUBEMAPARRAY", "TOK_OPEN_PAREN", "TOK_CLOSE_PAREN", 
		"TOK_OPEN_BRACKET", "TOK_CLOSE_BRACKET", "TOK_OPEN_BRACE", "TOK_CLOSE_BRACE", 
		"TOK_DOT", "TOK_UNDERSCORE", "TOK_TILDE", "TOK_EXCLAMATION", "TOK_QUESTION", 
		"TOK_COLON", "TOK_SEMICOLON", "TOK_COMMA", "TOK_HASHTAG", "TOK_DOLLAR", 
		"TOK_AT", "TOK_BACKSLASH", "OP_PIPE", "OP_AMPERSAND", "OP_PLUS", "OP_MINUS", 
		"OP_ASTERISK", "OP_EXPONENT", "OP_MODULUS", "OP_DIV", "OP_ASSIGN", "OP_EQUAL", 
		"OP_DIFFERENT", "OP_GREATER_THAN", "OP_LESSER_THAN", "OP_GEQ_THAN", "OP_LEQ_THAN", 
		"OP_INCREMENT", "OP_DECREMENT", "OP_PLUS_ASSIGN", "OP_MINUS_ASSIGN", "OP_MUL_ASSIGN", 
		"OP_DIV_ASSIGN", "OP_MODULUS_ASSIGN", "OP_BITWISE_OR_ASSIGN", "OP_BITWISE_AND_ASSIGN", 
		"OP_EXPONENT_ASSIGN", "OP_LSHIFT_ASSIGN", "OP_RSHIFT_ASSIGN", "OP_OR", 
		"OP_AND", "OP_XOR", "OP_LSHIFT", "OP_RSHIFT", "WHITESPACE", "DOC_COMMENT", 
		"BLOCK_COMMENT", "LINE_COMMENT", "BoolLiteral", "DoubleLiteral", "FloatLiteral", 
		"IntegerLiteral", "UnsignedIntegerLiteral", "StringLiteral", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SPSL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SPSLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SPSLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SPSLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public DirectiveContext Directives;
		public NamespaceDefinitionContext Namespace;
		public FileLevelDefinitionContext FileLevelDefinitions;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SPSLParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext[] directive() {
			return GetRuleContexts<DirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive(int i) {
			return GetRuleContext<DirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceDefinitionContext namespaceDefinition() {
			return GetRuleContext<NamespaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelDefinitionContext[] fileLevelDefinition() {
			return GetRuleContexts<FileLevelDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileLevelDefinitionContext fileLevelDefinition(int i) {
			return GetRuleContext<FileLevelDefinitionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_HASHTAG) {
				{
				{
				State = 170;
				_localctx.Directives = directive();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 179;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 176;
					Match(DOC_COMMENT);
					}
					} 
				}
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_NAMESPACE) {
				{
				State = 182;
				_localctx.Namespace = namespaceDefinition();
				}
			}

			State = 194;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 188;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 185;
						Match(DOC_COMMENT);
						}
						}
						State = 190;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 191;
					useDirective();
					}
					} 
				}
				State = 196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1008806316549863424L) != 0) || _la==DOC_COMMENT) {
				{
				{
				State = 197;
				_localctx.FileLevelDefinitions = fileLevelDefinition();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 203;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDefinitionContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_NAMESPACE() { return GetToken(SPSLParser.KEYWORD_NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public NamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNamespaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDefinitionContext namespaceDefinition() {
		NamespaceDefinitionContext _localctx = new NamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(KEYWORD_NAMESPACE);
			State = 206;
			_localctx.Name = namespacedTypeName();
			State = 207;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacedTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_BACKSLASH() { return GetTokens(SPSLParser.TOK_BACKSLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_BACKSLASH(int i) {
			return GetToken(SPSLParser.TOK_BACKSLASH, i);
		}
		public NamespacedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNamespacedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNamespacedTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacedTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacedTypeNameContext namespacedTypeName() {
		NamespacedTypeNameContext _localctx = new NamespacedTypeNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespacedTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(IDENTIFIER);
			State = 214;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 210;
					Match(TOK_BACKSLASH);
					State = 211;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 216;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileLevelDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext globalVariable() {
			return GetRuleContext<GlobalVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableContext permutationVariable() {
			return GetRuleContext<PermutationVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceContext @interface() {
			return GetRuleContext<InterfaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFragmentContext shaderFragment() {
			return GetRuleContext<ShaderFragmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderContext shader() {
			return GetRuleContext<ShaderContext>(0);
		}
		public FileLevelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileLevelDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFileLevelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFileLevelDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileLevelDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileLevelDefinitionContext fileLevelDefinition() {
		FileLevelDefinitionContext _localctx = new FileLevelDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_fileLevelDefinition);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217;
				globalVariable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				permutationVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219;
				type();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 220;
				@interface();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 221;
				shaderFragment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 222;
				shader();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		public bool IsStatic;
		public DataTypeContext Type;
		public VariableDeclarationAssignmentContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STATIC() { return GetToken(SPSLParser.KEYWORD_STATIC, 0); }
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterGlobalVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitGlobalVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 8, RULE_globalVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_STATIC) {
				{
				State = 225;
				Match(KEYWORD_STATIC);
				_localctx.IsStatic =  true;
				}
			}

			State = 229;
			Match(KEYWORD_CONST);
			State = 230;
			_localctx.Type = dataType();
			State = 231;
			_localctx.Definition = variableDeclarationAssignment();
			State = 232;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableBoolContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(SPSLParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(SPSLParser.BoolLiteral, 0); }
		public PermutationVariableBoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableBool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableBoolContext permutationVariableBool() {
		PermutationVariableBoolContext _localctx = new PermutationVariableBoolContext(Context, State);
		EnterRule(_localctx, 10, RULE_permutationVariableBool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(KEYWORD_PERMUTATION);
			State = 235;
			Match(TYPE_BOOL);
			State = 236;
			_localctx.Identifier = basicExpression();
			State = 237;
			Match(OP_ASSIGN);
			State = 238;
			_localctx.Value = Match(BoolLiteral);
			State = 239;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableEnumContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public BasicExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ENUM() { return GetToken(SPSLParser.KEYWORD_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext[] basicExpression() {
			return GetRuleContexts<BasicExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression(int i) {
			return GetRuleContext<BasicExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public PermutationVariableEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableEnumContext permutationVariableEnum() {
		PermutationVariableEnumContext _localctx = new PermutationVariableEnumContext(Context, State);
		EnterRule(_localctx, 12, RULE_permutationVariableEnum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(KEYWORD_PERMUTATION);
			State = 242;
			Match(KEYWORD_ENUM);
			State = 243;
			_localctx.Identifier = basicExpression();
			State = 244;
			Match(TOK_OPEN_BRACE);
			State = 245;
			Match(IDENTIFIER);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 246;
				Match(TOK_COMMA);
				State = 247;
				Match(IDENTIFIER);
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 253;
			Match(TOK_CLOSE_BRACE);
			State = 254;
			Match(OP_ASSIGN);
			State = 255;
			_localctx.Value = basicExpression();
			State = 256;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableIntegerContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTATION() { return GetToken(SPSLParser.KEYWORD_PERMUTATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(SPSLParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		public PermutationVariableIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariableInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariableInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariableInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariableInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableIntegerContext permutationVariableInteger() {
		PermutationVariableIntegerContext _localctx = new PermutationVariableIntegerContext(Context, State);
		EnterRule(_localctx, 14, RULE_permutationVariableInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			Match(KEYWORD_PERMUTATION);
			State = 259;
			Match(TYPE_INT);
			State = 260;
			_localctx.Identifier = basicExpression();
			State = 261;
			Match(OP_ASSIGN);
			State = 262;
			_localctx.Value = Match(IntegerLiteral);
			State = 263;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermutationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableBoolContext permutationVariableBool() {
			return GetRuleContext<PermutationVariableBoolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableEnumContext permutationVariableEnum() {
			return GetRuleContext<PermutationVariableEnumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermutationVariableIntegerContext permutationVariableInteger() {
			return GetRuleContext<PermutationVariableIntegerContext>(0);
		}
		public PermutationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permutationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermutationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermutationVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermutationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermutationVariableContext permutationVariable() {
		PermutationVariableContext _localctx = new PermutationVariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_permutationVariable);
		try {
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265;
				permutationVariableBool();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				permutationVariableEnum();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267;
				permutationVariableInteger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EnumContext : TypeContext {
		public EnumDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumComponentContext[] enumComponent() {
			return GetRuleContexts<EnumComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumComponentContext enumComponent(int i) {
			return GetRuleContext<EnumComponentContext>(i);
		}
		public EnumContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructContext : TypeContext {
		public StructDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructComponentContext[] structComponent() {
			return GetRuleContexts<StructComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructComponentContext structComponent(int i) {
			return GetRuleContext<StructComponentContext>(i);
		}
		public StructContext(TypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_type);
		int _la;
		try {
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new StructContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 270;
					Match(DOC_COMMENT);
					}
					}
					State = 275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 276;
				((StructContext)_localctx).Definition = structDefinition();
				State = 277;
				Match(TOK_OPEN_BRACE);
				State = 287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 18014673387388927L) != 0) || _la==DOC_COMMENT || _la==IDENTIFIER) {
					{
					{
					State = 281;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 278;
						Match(DOC_COMMENT);
						}
						}
						State = 283;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 284;
					structComponent();
					}
					}
					State = 289;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 290;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			case 2:
				_localctx = new EnumContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 292;
					Match(DOC_COMMENT);
					}
					}
					State = 297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 298;
				((EnumContext)_localctx).Definition = enumDefinition();
				State = 299;
				Match(TOK_OPEN_BRACE);
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT || _la==IDENTIFIER) {
					{
					{
					State = 303;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 300;
						Match(DOC_COMMENT);
						}
						}
						State = 305;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 306;
					enumComponent();
					}
					}
					State = 311;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 312;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public IToken Name;
		public NamespacedTypeNameContext ExtendedType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TYPE() { return GetToken(SPSLParser.KEYWORD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_STRUCT() { return GetToken(SPSLParser.KEYWORD_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(KEYWORD_TYPE);
			State = 317;
			_localctx.Name = Match(IDENTIFIER);
			State = 318;
			Match(KEYWORD_AS);
			State = 319;
			Match(KEYWORD_STRUCT);
			State = 322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 320;
				Match(KEYWORD_EXTENDS);
				State = 321;
				_localctx.ExtendedType = namespacedTypeName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_TYPE() { return GetToken(SPSLParser.KEYWORD_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_AS() { return GetToken(SPSLParser.KEYWORD_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ENUM() { return GetToken(SPSLParser.KEYWORD_ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(KEYWORD_TYPE);
			State = 325;
			_localctx.Name = Match(IDENTIFIER);
			State = 326;
			Match(KEYWORD_AS);
			State = 327;
			Match(KEYWORD_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceContext : ParserRuleContext {
		public InterfaceDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceDefinitionContext interfaceDefinition() {
			return GetRuleContext<InterfaceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext[] functionHead() {
			return GetRuleContexts<FunctionHeadContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead(int i) {
			return GetRuleContext<FunctionHeadContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_SEMICOLON() { return GetTokens(SPSLParser.TOK_SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON(int i) {
			return GetToken(SPSLParser.TOK_SEMICOLON, i);
		}
		public InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterface(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceContext @interface() {
		InterfaceContext _localctx = new InterfaceContext(Context, State);
		EnterRule(_localctx, 24, RULE_interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 329;
				Match(DOC_COMMENT);
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 335;
			_localctx.Definition = interfaceDefinition();
			State = 336;
			Match(TOK_OPEN_BRACE);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 274877906943L) != 0) || _la==DOC_COMMENT || _la==IDENTIFIER) {
				{
				{
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 337;
					Match(DOC_COMMENT);
					}
					}
					State = 342;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 343;
				functionHead();
				State = 344;
				Match(TOK_SEMICOLON);
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 351;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDefinitionContext : ParserRuleContext {
		public IToken Name;
		public InterfacesListContext ExtendedInterfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INTERFACE() { return GetToken(SPSLParser.KEYWORD_INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public InterfaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterfaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterfaceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefinitionContext interfaceDefinition() {
		InterfaceDefinitionContext _localctx = new InterfaceDefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_interfaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(KEYWORD_INTERFACE);
			State = 354;
			_localctx.Name = Match(IDENTIFIER);
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 355;
				Match(KEYWORD_EXTENDS);
				State = 356;
				_localctx.ExtendedInterfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfacesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext[] namespacedTypeName() {
			return GetRuleContexts<NamespacedTypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName(int i) {
			return GetRuleContext<NamespacedTypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public InterfacesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfacesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInterfacesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInterfacesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfacesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfacesListContext interfacesList() {
		InterfacesListContext _localctx = new InterfacesListContext(Context, State);
		EnterRule(_localctx, 28, RULE_interfacesList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			namespacedTypeName();
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 360;
				Match(TOK_COMMA);
				State = 361;
				namespacedTypeName();
				}
				}
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFragmentContext : ParserRuleContext {
		public ShaderFragmentDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFragmentDefinitionContext shaderFragmentDefinition() {
			return GetRuleContext<ShaderFragmentDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext[] bufferDefinition() {
			return GetRuleContexts<BufferDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext bufferDefinition(int i) {
			return GetRuleContext<BufferDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext[] globalVariable() {
			return GetRuleContexts<GlobalVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext globalVariable(int i) {
			return GetRuleContext<GlobalVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public ShaderFragmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFragment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFragment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFragment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFragment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFragmentContext shaderFragment() {
		ShaderFragmentContext _localctx = new ShaderFragmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_shaderFragment);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 367;
				Match(DOC_COMMENT);
				}
				}
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 373;
			_localctx.Definition = shaderFragmentDefinition();
			State = 374;
			Match(TOK_OPEN_BRACE);
			State = 384;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 378;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 375;
						Match(DOC_COMMENT);
						}
						}
						State = 380;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 381;
					useDirective();
					}
					} 
				}
				State = 386;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -1873496826494058496L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 2251834173423615L) != 0) || _la==DOC_COMMENT || _la==IDENTIFIER) {
				{
				{
				State = 390;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 387;
						Match(DOC_COMMENT);
						}
						} 
					}
					State = 392;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 397;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
				case 1:
					{
					State = 393;
					bufferDefinition();
					}
					break;
				case 2:
					{
					State = 394;
					globalVariable();
					}
					break;
				case 3:
					{
					State = 395;
					type();
					}
					break;
				case 4:
					{
					State = 396;
					shaderFunction();
					}
					break;
				}
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 404;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFragmentDefinitionContext : ParserRuleContext {
		public IToken Name;
		public NamespacedTypeNameContext ExtendedFragment;
		public InterfacesListContext ExtendedInterfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FRAGMENT() { return GetToken(SPSLParser.KEYWORD_FRAGMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public ShaderFragmentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFragmentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFragmentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFragmentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFragmentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFragmentDefinitionContext shaderFragmentDefinition() {
		ShaderFragmentDefinitionContext _localctx = new ShaderFragmentDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_shaderFragmentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			Match(KEYWORD_FRAGMENT);
			State = 407;
			_localctx.Name = Match(IDENTIFIER);
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 408;
				Match(KEYWORD_EXTENDS);
				State = 409;
				_localctx.ExtendedFragment = namespacedTypeName();
				}
			}

			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_IMPLEMENTS) {
				{
				State = 412;
				Match(KEYWORD_IMPLEMENTS);
				State = 413;
				_localctx.ExtendedInterfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderContext : ParserRuleContext {
		public ShaderDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShaderDefinitionContext shaderDefinition() {
			return GetRuleContext<ShaderDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext[] shaderMember() {
			return GetRuleContexts<ShaderMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderMemberContext shaderMember(int i) {
			return GetRuleContext<ShaderMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public ShaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderContext shader() {
		ShaderContext _localctx = new ShaderContext(Context, State);
		EnterRule(_localctx, 34, RULE_shader);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 416;
				Match(DOC_COMMENT);
				}
				}
				State = 421;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 422;
			_localctx.Definition = shaderDefinition();
			State = 423;
			Match(TOK_OPEN_BRACE);
			State = 433;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 427;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 424;
						Match(DOC_COMMENT);
						}
						}
						State = 429;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 430;
					useDirective();
					}
					} 
				}
				State = 435;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 445;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 439;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 436;
							Match(DOC_COMMENT);
							}
							} 
						}
						State = 441;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
					}
					State = 442;
					shaderMember();
					}
					} 
				}
				State = 447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 1152921504602652673L) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 17626545782785L) != 0)) {
				{
				{
				State = 451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 448;
					Match(DOC_COMMENT);
					}
					}
					State = 453;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 454;
				shaderFunction();
				}
				}
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 460;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialContext : ParserRuleContext {
		public MaterialDefinitionContext Definition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MaterialDefinitionContext materialDefinition() {
			return GetRuleContext<MaterialDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOC_COMMENT() { return GetTokens(SPSLParser.DOC_COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOC_COMMENT(int i) {
			return GetToken(SPSLParser.DOC_COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext[] useDirective() {
			return GetRuleContexts<UseDirectiveContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseDirectiveContext useDirective(int i) {
			return GetRuleContext<UseDirectiveContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialMemberContext[] materialMember() {
			return GetRuleContexts<MaterialMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaterialMemberContext materialMember(int i) {
			return GetRuleContext<MaterialMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext[] shaderFunction() {
			return GetRuleContexts<ShaderFunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderFunctionContext shaderFunction(int i) {
			return GetRuleContext<ShaderFunctionContext>(i);
		}
		public MaterialContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_material; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterial(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterial(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialContext material() {
		MaterialContext _localctx = new MaterialContext(Context, State);
		EnterRule(_localctx, 36, RULE_material);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOC_COMMENT) {
				{
				{
				State = 462;
				Match(DOC_COMMENT);
				}
				}
				State = 467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 468;
			_localctx.Definition = materialDefinition();
			State = 469;
			Match(TOK_OPEN_BRACE);
			State = 479;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 473;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==DOC_COMMENT) {
						{
						{
						State = 470;
						Match(DOC_COMMENT);
						}
						}
						State = 475;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 476;
					useDirective();
					}
					} 
				}
				State = 481;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 491;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 485;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 482;
							Match(DOC_COMMENT);
							}
							} 
						}
						State = 487;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
					}
					State = 488;
					materialMember();
					}
					} 
				}
				State = 493;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & 1152921504602652673L) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 17626545782785L) != 0)) {
				{
				{
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOC_COMMENT) {
					{
					{
					State = 494;
					Match(DOC_COMMENT);
					}
					}
					State = 499;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 500;
				shaderFunction();
				}
				}
				State = 505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 506;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialDefinitionContext : ParserRuleContext {
		public bool IsAbstract;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedMaterial;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_MATERIAL() { return GetToken(SPSLParser.KEYWORD_MATERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public MaterialDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialDefinitionContext materialDefinition() {
		MaterialDefinitionContext _localctx = new MaterialDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_materialDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ABSTRACT) {
				{
				State = 508;
				Match(KEYWORD_ABSTRACT);
				_localctx.IsAbstract =  true;
				}
			}

			State = 512;
			Match(KEYWORD_MATERIAL);
			State = 513;
			_localctx.Name = Match(IDENTIFIER);
			State = 516;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_EXTENDS) {
				{
				State = 514;
				Match(KEYWORD_EXTENDS);
				State = 515;
				_localctx.ExtendedMaterial = namespacedTypeName();
				}
			}

			State = 520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_IMPLEMENTS) {
				{
				State = 518;
				Match(KEYWORD_IMPLEMENTS);
				State = 519;
				_localctx.Interfaces = interfacesList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderDefinitionContext : ParserRuleContext {
		public bool IsAbstract;
		public ShaderDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderDefinition; } }
	 
		public ShaderDefinitionContext() { }
		public virtual void CopyFrom(ShaderDefinitionContext context) {
			base.CopyFrom(context);
			this.IsAbstract = context.IsAbstract;
		}
	}
	public partial class GenericShaderDefinitionContext : ShaderDefinitionContext {
		public IToken Type;
		public IToken Name;
		public NamespacedTypeNameContext ExtendedShader;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VERTEX() { return GetToken(SPSLParser.KEYWORD_VERTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PIXEL() { return GetToken(SPSLParser.KEYWORD_PIXEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_GEOMETRY() { return GetToken(SPSLParser.KEYWORD_GEOMETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_HULL() { return GetToken(SPSLParser.KEYWORD_HULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DOMAIN() { return GetToken(SPSLParser.KEYWORD_DOMAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_COMPUTE() { return GetToken(SPSLParser.KEYWORD_COMPUTE, 0); }
		public GenericShaderDefinitionContext(ShaderDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterGenericShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitGenericShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericShaderDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputeShaderDefinitionContext : ShaderDefinitionContext {
		public IToken Type;
		public IToken Name;
		public IToken ThreadCountX;
		public IToken ThreadCountY;
		public IToken ThreadCountZ;
		public NamespacedTypeNameContext ExtendedShader;
		public InterfacesListContext Interfaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SHADER() { return GetToken(SPSLParser.KEYWORD_SHADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_COMPUTE() { return GetToken(SPSLParser.KEYWORD_COMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IntegerLiteral() { return GetTokens(SPSLParser.IntegerLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral(int i) {
			return GetToken(SPSLParser.IntegerLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ABSTRACT() { return GetToken(SPSLParser.KEYWORD_ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_EXTENDS() { return GetToken(SPSLParser.KEYWORD_EXTENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IMPLEMENTS() { return GetToken(SPSLParser.KEYWORD_IMPLEMENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfacesListContext interfacesList() {
			return GetRuleContext<InterfacesListContext>(0);
		}
		public ComputeShaderDefinitionContext(ShaderDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterComputeShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitComputeShaderDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputeShaderDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderDefinitionContext shaderDefinition() {
		ShaderDefinitionContext _localctx = new ShaderDefinitionContext(Context, State);
		EnterRule(_localctx, 40, RULE_shaderDefinition);
		int _la;
		try {
			State = 561;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				_localctx = new GenericShaderDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_ABSTRACT) {
					{
					State = 522;
					Match(KEYWORD_ABSTRACT);
					((GenericShaderDefinitionContext)_localctx).IsAbstract =  true;
					}
				}

				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 512000L) != 0)) {
					{
					State = 526;
					((GenericShaderDefinitionContext)_localctx).Type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 512000L) != 0)) ) {
						((GenericShaderDefinitionContext)_localctx).Type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 529;
				Match(KEYWORD_SHADER);
				State = 530;
				((GenericShaderDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_EXTENDS) {
					{
					State = 531;
					Match(KEYWORD_EXTENDS);
					State = 532;
					((GenericShaderDefinitionContext)_localctx).ExtendedShader = namespacedTypeName();
					}
				}

				State = 537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_IMPLEMENTS) {
					{
					State = 535;
					Match(KEYWORD_IMPLEMENTS);
					State = 536;
					((GenericShaderDefinitionContext)_localctx).Interfaces = interfacesList();
					}
				}

				}
				break;
			case 2:
				_localctx = new ComputeShaderDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_ABSTRACT) {
					{
					State = 539;
					Match(KEYWORD_ABSTRACT);
					((ComputeShaderDefinitionContext)_localctx).IsAbstract =  true;
					}
				}

				State = 543;
				((ComputeShaderDefinitionContext)_localctx).Type = Match(KEYWORD_COMPUTE);
				State = 544;
				Match(KEYWORD_SHADER);
				State = 545;
				((ComputeShaderDefinitionContext)_localctx).Name = Match(IDENTIFIER);
				State = 546;
				Match(OP_LESSER_THAN);
				State = 547;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountX = Match(IntegerLiteral);
				State = 548;
				Match(TOK_COMMA);
				State = 549;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountY = Match(IntegerLiteral);
				State = 550;
				Match(TOK_COMMA);
				State = 551;
				((ComputeShaderDefinitionContext)_localctx).ThreadCountZ = Match(IntegerLiteral);
				State = 552;
				Match(OP_GREATER_THAN);
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_EXTENDS) {
					{
					State = 553;
					Match(KEYWORD_EXTENDS);
					State = 554;
					((ComputeShaderDefinitionContext)_localctx).ExtendedShader = namespacedTypeName();
					}
				}

				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_IMPLEMENTS) {
					{
					State = 557;
					Match(KEYWORD_IMPLEMENTS);
					State = 558;
					((ComputeShaderDefinitionContext)_localctx).Interfaces = interfacesList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseDirectiveContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_USE() { return GetToken(SPSLParser.KEYWORD_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UseDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUseDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUseDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseDirectiveContext useDirective() {
		UseDirectiveContext _localctx = new UseDirectiveContext(Context, State);
		EnterRule(_localctx, 42, RULE_useDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			Match(KEYWORD_USE);
			State = 564;
			_localctx.Name = namespacedTypeName();
			State = 565;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InputVarDefinitionContext inputVarDefinition() {
			return GetRuleContext<InputVarDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclarationContext localVarDeclaration() {
			return GetRuleContext<LocalVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferDefinitionContext bufferDefinition() {
			return GetRuleContext<BufferDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ShaderMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderMemberContext shaderMember() {
		ShaderMemberContext _localctx = new ShaderMemberContext(Context, State);
		EnterRule(_localctx, 44, RULE_shaderMember);
		try {
			State = 571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567;
				inputVarDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 568;
				localVarDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 569;
				bufferDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 570;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MaterialParamsContext materialParams() {
			return GetRuleContext<MaterialParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalVarDeclarationContext localVarDeclaration() {
			return GetRuleContext<LocalVarDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MaterialMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialMemberContext materialMember() {
		MaterialMemberContext _localctx = new MaterialMemberContext(Context, State);
		EnterRule(_localctx, 46, RULE_materialMember);
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 573;
				materialParams();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 574;
				localVarDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 575;
				type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_AT() { return GetToken(SPSLParser.TOK_AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext[] constantExpression() {
			return GetRuleContexts<ConstantExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression(int i) {
			return GetRuleContext<ConstantExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 48, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(TOK_AT);
			State = 579;
			_localctx.Name = Match(IDENTIFIER);
			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOK_OPEN_PAREN) {
				{
				State = 580;
				Match(TOK_OPEN_PAREN);
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 153)) & ~0x3f) == 0 && ((1L << (_la - 153)) & 127L) != 0)) {
					{
					State = 581;
					constantExpression();
					State = 586;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==TOK_COMMA) {
						{
						{
						State = 582;
						Match(TOK_COMMA);
						State = 583;
						constantExpression();
						}
						}
						State = 588;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 591;
				Match(TOK_CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionDirectiveContext precisionDirective() {
			return GetRuleContext<PrecisionDirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShaderLangDirectiveContext shaderLangDirective() {
			return GetRuleContext<ShaderLangDirectiveContext>(0);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 50, RULE_directive);
		try {
			State = 596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 594;
				precisionDirective();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 595;
				shaderLangDirective();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public PrecisionDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precisionDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrecisionDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrecisionDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecisionDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionDirectiveContext precisionDirective() {
		PrecisionDirectiveContext _localctx = new PrecisionDirectiveContext(Context, State);
		EnterRule(_localctx, 52, RULE_precisionDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			Match(TOK_HASHTAG);
			State = 599;
			Match(T__0);
			State = 600;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderLangDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public ShaderLangDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderLangDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderLangDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderLangDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderLangDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderLangDirectiveContext shaderLangDirective() {
		ShaderLangDirectiveContext _localctx = new ShaderLangDirectiveContext(Context, State);
		EnterRule(_localctx, 54, RULE_shaderLangDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			Match(TOK_HASHTAG);
			State = 603;
			Match(T__4);
			State = 604;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_HASHTAG() { return GetToken(SPSLParser.TOK_HASHTAG, 0); }
		public ParameterDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDirective; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParameterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParameterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDirectiveContext parameterDirective() {
		ParameterDirectiveContext _localctx = new ParameterDirectiveContext(Context, State);
		EnterRule(_localctx, 56, RULE_parameterDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			Match(TOK_HASHTAG);
			State = 607;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaterialParamsContext : ParserRuleContext {
		public bool IsPartial;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PARAMS() { return GetToken(SPSLParser.KEYWORD_PARAMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PARTIAL() { return GetToken(SPSLParser.KEYWORD_PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext[] bufferComponent() {
			return GetRuleContexts<BufferComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext bufferComponent(int i) {
			return GetRuleContext<BufferComponentContext>(i);
		}
		public MaterialParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_materialParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMaterialParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMaterialParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaterialParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MaterialParamsContext materialParams() {
		MaterialParamsContext _localctx = new MaterialParamsContext(Context, State);
		EnterRule(_localctx, 58, RULE_materialParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 609;
				annotation();
				}
				}
				State = 614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_PARTIAL) {
				{
				State = 615;
				Match(KEYWORD_PARTIAL);
				_localctx.IsPartial =  true;
				}
			}

			State = 619;
			Match(KEYWORD_PARAMS);
			State = 620;
			_localctx.Name = Match(IDENTIFIER);
			State = 621;
			Match(TOK_OPEN_BRACE);
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 18014673387388927L) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 622;
				bufferComponent();
				}
				}
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 628;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputVarDefinitionContext : ParserRuleContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INPUT() { return GetToken(SPSLParser.KEYWORD_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public InputVarDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputVarDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInputVarDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInputVarDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputVarDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputVarDefinitionContext inputVarDefinition() {
		InputVarDefinitionContext _localctx = new InputVarDefinitionContext(Context, State);
		EnterRule(_localctx, 60, RULE_inputVarDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 630;
				annotation();
				}
				}
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 636;
			Match(KEYWORD_INPUT);
			State = 637;
			_localctx.Type = dataType();
			State = 638;
			Match(IDENTIFIER);
			State = 643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 639;
				Match(TOK_COMMA);
				State = 640;
				Match(IDENTIFIER);
				}
				}
				State = 645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 646;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVarDeclarationContext : ParserRuleContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_LOCAL() { return GetToken(SPSLParser.KEYWORD_LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(SPSLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SPSLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public LocalVarDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVarDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterLocalVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitLocalVarDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVarDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVarDeclarationContext localVarDeclaration() {
		LocalVarDeclarationContext _localctx = new LocalVarDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_localVarDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 648;
				annotation();
				}
				}
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 654;
			Match(KEYWORD_LOCAL);
			State = 655;
			_localctx.Type = dataType();
			State = 656;
			Match(IDENTIFIER);
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 657;
				Match(TOK_COMMA);
				State = 658;
				Match(IDENTIFIER);
				}
				}
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 664;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferDefinitionContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BUFFER() { return GetToken(SPSLParser.KEYWORD_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext[] bufferComponent() {
			return GetRuleContexts<BufferComponentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BufferComponentContext bufferComponent(int i) {
			return GetRuleContext<BufferComponentContext>(i);
		}
		public BufferDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBufferDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBufferDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferDefinitionContext bufferDefinition() {
		BufferDefinitionContext _localctx = new BufferDefinitionContext(Context, State);
		EnterRule(_localctx, 64, RULE_bufferDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 666;
				annotation();
				}
				}
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 672;
			Match(KEYWORD_BUFFER);
			State = 673;
			_localctx.Name = Match(IDENTIFIER);
			State = 674;
			Match(TOK_OPEN_BRACE);
			State = 678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 18014673387388927L) != 0) || _la==IDENTIFIER) {
				{
				{
				State = 675;
				bufferComponent();
				}
				}
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 681;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BufferComponentContext : ParserRuleContext {
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public BufferComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bufferComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBufferComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBufferComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBufferComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BufferComponentContext bufferComponent() {
		BufferComponentContext _localctx = new BufferComponentContext(Context, State);
		EnterRule(_localctx, 66, RULE_bufferComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 683;
				annotation();
				}
				}
				State = 688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 689;
			_localctx.Type = dataType();
			State = 690;
			_localctx.Name = Match(IDENTIFIER);
			State = 691;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructComponentContext : ParserRuleContext {
		public StructComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structComponent; } }
	 
		public StructComponentContext() { }
		public virtual void CopyFrom(StructComponentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructPropertyContext : StructComponentContext {
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StructPropertyContext(StructComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructFunctionContext : StructComponentContext {
		public FunctionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public StructFunctionContext(StructComponentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStructFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStructFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructComponentContext structComponent() {
		StructComponentContext _localctx = new StructComponentContext(Context, State);
		EnterRule(_localctx, 68, RULE_structComponent);
		int _la;
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				_localctx = new StructPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 693;
					annotation();
					}
					}
					State = 698;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 699;
				((StructPropertyContext)_localctx).Type = dataType();
				State = 700;
				((StructPropertyContext)_localctx).Name = Match(IDENTIFIER);
				State = 701;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				_localctx = new StructFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_AT) {
					{
					{
					State = 703;
					annotation();
					}
					}
					State = 708;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 709;
				((StructFunctionContext)_localctx).Function = function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumComponentContext : ParserRuleContext {
		public IToken Name;
		public ConstantExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA() { return GetToken(SPSLParser.TOK_COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumComponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumComponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterEnumComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitEnumComponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumComponent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumComponentContext enumComponent() {
		EnumComponentContext _localctx = new EnumComponentContext(Context, State);
		EnterRule(_localctx, 70, RULE_enumComponent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			_localctx.Name = Match(IDENTIFIER);
			State = 715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_ASSIGN) {
				{
				State = 713;
				Match(OP_ASSIGN);
				State = 714;
				_localctx.Value = constantExpression();
				}
			}

			State = 717;
			Match(TOK_COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public bool IsConst;
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	 
		public VariableDeclarationContext() { }
		public virtual void CopyFrom(VariableDeclarationContext context) {
			base.CopyFrom(context);
			this.IsConst = context.IsConst;
		}
	}
	public partial class UntypedVariableDeclarationContext : VariableDeclarationContext {
		public VariableDeclarationAssignmentContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_VAR() { return GetToken(SPSLParser.KEYWORD_VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public UntypedVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUntypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUntypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntypedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypedVariableDeclarationContext : VariableDeclarationContext {
		public DataTypeContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentityContext[] variableIdentity() {
			return GetRuleContexts<VariableIdentityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentityContext variableIdentity(int i) {
			return GetRuleContext<VariableIdentityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public TypedVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTypedVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 72, RULE_variableDeclaration);
		int _la;
		try {
			State = 734;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_CONST:
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
			case IDENTIFIER:
				_localctx = new TypedVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEYWORD_CONST) {
					{
					State = 719;
					Match(KEYWORD_CONST);
					((TypedVariableDeclarationContext)_localctx).IsConst =  true;
					}
				}

				State = 723;
				((TypedVariableDeclarationContext)_localctx).Type = dataType();
				State = 724;
				variableIdentity();
				State = 729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TOK_COMMA) {
					{
					{
					State = 725;
					Match(TOK_COMMA);
					State = 726;
					variableIdentity();
					}
					}
					State = 731;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case KEYWORD_VAR:
				_localctx = new UntypedVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 732;
				Match(KEYWORD_VAR);
				State = 733;
				((UntypedVariableDeclarationContext)_localctx).Declaration = variableDeclarationAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationAssignmentContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public VariableDeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
		VariableDeclarationAssignmentContext _localctx = new VariableDeclarationAssignmentContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableDeclarationAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 736;
			_localctx.Identifier = basicExpression();
			State = 737;
			Match(OP_ASSIGN);
			State = 738;
			_localctx.Expression = expressionStatement(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableIdentityContext : ParserRuleContext {
		public bool IsAssignment;
		public BasicExpressionContext Identifier;
		public VariableDeclarationAssignmentContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationAssignmentContext variableDeclarationAssignment() {
			return GetRuleContext<VariableDeclarationAssignmentContext>(0);
		}
		public VariableIdentityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableIdentity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterVariableIdentity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitVariableIdentity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableIdentity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableIdentityContext variableIdentity() {
		VariableIdentityContext _localctx = new VariableIdentityContext(Context, State);
		EnterRule(_localctx, 76, RULE_variableIdentity);
		try {
			State = 744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 740;
				_localctx.Identifier = basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 741;
				_localctx.Declaration = variableDeclarationAssignment();
				_localctx.IsAssignment =  true;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShaderFunctionContext : ParserRuleContext {
		public bool IsOverride;
		public FunctionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OVERRIDE() { return GetToken(SPSLParser.KEYWORD_OVERRIDE, 0); }
		public ShaderFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shaderFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterShaderFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitShaderFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShaderFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderFunctionContext shaderFunction() {
		ShaderFunctionContext _localctx = new ShaderFunctionContext(Context, State);
		EnterRule(_localctx, 78, RULE_shaderFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_AT) {
				{
				{
				State = 746;
				annotation();
				}
				}
				State = 751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_OVERRIDE) {
				{
				State = 752;
				Match(KEYWORD_OVERRIDE);
				_localctx.IsOverride =  true;
				}
			}

			State = 756;
			_localctx.Function = function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctionHeadContext Head;
		public FunctionBodyContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionHeadContext functionHead() {
			return GetRuleContext<FunctionHeadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 80, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			_localctx.Head = functionHead();
			State = 759;
			Match(TOK_OPEN_BRACE);
			State = 760;
			_localctx.Body = functionBody();
			State = 761;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionHeadContext : ParserRuleContext {
		public DataTypeContext Type;
		public IToken Name;
		public FunctionSignatureContext Signature;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionHead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionHead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionHead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionHeadContext functionHead() {
		FunctionHeadContext _localctx = new FunctionHeadContext(Context, State);
		EnterRule(_localctx, 82, RULE_functionHead);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 764;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 763;
				_localctx.Type = dataType();
				}
				break;
			}
			State = 766;
			_localctx.Name = Match(IDENTIFIER);
			State = 767;
			_localctx.Signature = functionSignature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public ArgListContext Arguments;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 84, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			Match(TOK_OPEN_PAREN);
			State = 771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -2017612632189566976L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 34359738367L) != 0) || _la==IDENTIFIER) {
				{
				State = 770;
				_localctx.Arguments = argList();
				}
			}

			State = 773;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgDefContext[] argDef() {
			return GetRuleContexts<ArgDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgDefContext argDef(int i) {
			return GetRuleContext<ArgDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 86, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			argDef();
			State = 780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 776;
				Match(TOK_COMMA);
				State = 777;
				argDef();
				}
				}
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefContext : ParserRuleContext {
		public IToken Flow;
		public DataTypeContext Type;
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IN() { return GetToken(SPSLParser.KEYWORD_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_OUT() { return GetToken(SPSLParser.KEYWORD_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_INOUT() { return GetToken(SPSLParser.KEYWORD_INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONST() { return GetToken(SPSLParser.KEYWORD_CONST, 0); }
		public ArgDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArgDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArgDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefContext argDef() {
		ArgDefContext _localctx = new ArgDefContext(Context, State);
		EnterRule(_localctx, 88, RULE_argDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 288230377024126976L) != 0)) {
				{
				State = 783;
				_localctx.Flow = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 288230377024126976L) != 0)) ) {
					_localctx.Flow = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 786;
			_localctx.Type = dataType();
			State = 787;
			_localctx.Name = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public ReturnStatementContext ReturnStatement;
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext[] stayControlFlowStatement() {
			return GetRuleContexts<StayControlFlowStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement(int i) {
			return GetRuleContext<StayControlFlowStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 90, RULE_functionBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & -100167295L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 9151314545908648007L) != 0)) {
				{
				{
				State = 789;
				stayControlFlowStatement();
				}
				}
				State = 794;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_RETURN) {
				{
				State = 795;
				_localctx.ReturnStatement = returnStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 92, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798;
			Match(TOK_OPEN_BRACE);
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & -96495231L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 9151314545908648007L) != 0)) {
				{
				{
				State = 799;
				statement();
				}
				}
				State = 804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 805;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		public ReferencableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterReferencableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitReferencableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferencableExpressionContext referencableExpression() {
		ReferencableExpressionContext _localctx = new ReferencableExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_referencableExpression);
		try {
			State = 812;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 807;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 808;
				parenthesizedExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 809;
				invocationExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 810;
				propertyMemberReferenceExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 811;
				methodMemberReferenceExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		public ChainableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitChainableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainableExpressionContext chainableExpression() {
		ChainableExpressionContext _localctx = new ChainableExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_chainableExpression);
		try {
			State = 816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 814;
				basicExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 815;
				invocationExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainedExpressionContext : ParserRuleContext {
		public ReferencableExpressionContext Target;
		[System.Diagnostics.DebuggerNonUserCode] public ReferencableExpressionContext referencableExpression() {
			return GetRuleContext<ReferencableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_DOT() { return GetTokens(SPSLParser.TOK_DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT(int i) {
			return GetToken(SPSLParser.TOK_DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableExpressionContext[] chainableExpression() {
			return GetRuleContexts<ChainableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainableExpressionContext chainableExpression(int i) {
			return GetRuleContext<ChainableExpressionContext>(i);
		}
		public ChainedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainedExpressionContext chainedExpression() {
		ChainedExpressionContext _localctx = new ChainedExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_chainedExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			_localctx.Target = referencableExpression();
			State = 821;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 819;
					Match(TOK_DOT);
					State = 820;
					chainableExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 823;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableChainedExpressionContext : ParserRuleContext {
		public ReferencableExpressionContext Target;
		[System.Diagnostics.DebuggerNonUserCode] public ReferencableExpressionContext referencableExpression() {
			return GetRuleContext<ReferencableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_DOT() { return GetTokens(SPSLParser.TOK_DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT(int i) {
			return GetToken(SPSLParser.TOK_DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext[] basicExpression() {
			return GetRuleContexts<BasicExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression(int i) {
			return GetRuleContext<BasicExpressionContext>(i);
		}
		public AssignableChainedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableChainedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableChainedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableChainedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableChainedExpressionContext assignableChainedExpression() {
		AssignableChainedExpressionContext _localctx = new AssignableChainedExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_assignableChainedExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 825;
			_localctx.Target = referencableExpression();
			State = 828;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 826;
					Match(TOK_DOT);
					State = 827;
					basicExpression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 830;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyMemberReferenceExpressionContext : ParserRuleContext {
		public IToken Target;
		public BasicExpressionContext Member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT() { return GetToken(SPSLParser.TOK_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public PropertyMemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyMemberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPropertyMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPropertyMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
		PropertyMemberReferenceExpressionContext _localctx = new PropertyMemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_propertyMemberReferenceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			_localctx.Target = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE || _la==IDENTIFIER) ) {
				_localctx.Target = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 833;
			Match(TOK_DOT);
			State = 834;
			_localctx.Member = basicExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodMemberReferenceExpressionContext : ParserRuleContext {
		public IToken Target;
		public InvocationExpressionContext Member;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DOT() { return GetToken(SPSLParser.TOK_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public MethodMemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodMemberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMethodMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMethodMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
		MethodMemberReferenceExpressionContext _localctx = new MethodMemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_methodMemberReferenceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 836;
			_localctx.Target = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE || _la==IDENTIFIER) ) {
				_localctx.Target = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 837;
			Match(TOK_DOT);
			State = 838;
			_localctx.Member = invocationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberReferenceExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodMemberReferenceExpressionContext methodMemberReferenceExpression() {
			return GetRuleContext<MethodMemberReferenceExpressionContext>(0);
		}
		public MemberReferenceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberReferenceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitMemberReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberReferenceExpressionContext memberReferenceExpression() {
		MemberReferenceExpressionContext _localctx = new MemberReferenceExpressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_memberReferenceExpression);
		try {
			State = 842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 840;
				propertyMemberReferenceExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 841;
				methodMemberReferenceExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationExpressionContext : ParserRuleContext {
		public NamespacedTypeNameContext Name;
		public ParametersListContext Parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersListContext parametersList() {
			return GetRuleContext<ParametersListContext>(0);
		}
		public InvocationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvocationExpressionContext invocationExpression() {
		InvocationExpressionContext _localctx = new InvocationExpressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_invocationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			_localctx.Name = namespacedTypeName();
			State = 845;
			Match(TOK_OPEN_PAREN);
			State = 847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & 1152921504604749827L) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & 4468415305619457L) != 0)) {
				{
				State = 846;
				_localctx.Parameters = parametersList();
				}
			}

			State = 849;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PermuteStatementContext : ParserRuleContext {
		public BasicExpressionContext Identifier;
		public IToken Operator;
		public ConstantExpressionContext Value;
		public StatementBlockContext Block;
		public ElseStatementContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_PERMUTE() { return GetToken(SPSLParser.KEYWORD_PERMUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(SPSLParser.OP_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GEQ_THAN() { return GetToken(SPSLParser.OP_GEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEQ_THAN() { return GetToken(SPSLParser.OP_LEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIFFERENT() { return GetToken(SPSLParser.OP_DIFFERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public PermuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permuteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPermuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPermuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PermuteStatementContext permuteStatement() {
		PermuteStatementContext _localctx = new PermuteStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_permuteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 851;
			Match(KEYWORD_PERMUTE);
			State = 852;
			Match(TOK_OPEN_PAREN);
			State = 853;
			_localctx.Identifier = basicExpression();
			State = 854;
			_localctx.Operator = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & 63L) != 0)) ) {
				_localctx.Operator = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 855;
			_localctx.Value = constantExpression();
			State = 856;
			Match(TOK_CLOSE_PAREN);
			State = 857;
			_localctx.Block = statementBlock();
			State = 859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 858;
				_localctx.Else = elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		public ElseStatementContext Else;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(SPSLParser.KEYWORD_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifStatementContext[] elifStatement() {
			return GetRuleContexts<ElifStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifStatementContext elifStatement(int i) {
			return GetRuleContext<ElifStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			Match(KEYWORD_IF);
			State = 862;
			Match(TOK_OPEN_PAREN);
			State = 863;
			_localctx.Expression = expressionStatement(0);
			State = 864;
			Match(TOK_CLOSE_PAREN);
			State = 865;
			_localctx.Block = statementBlock();
			State = 869;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 866;
					elifStatement();
					}
					} 
				}
				State = 871;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			}
			State = 873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEYWORD_ELSE) {
				{
				State = 872;
				_localctx.Else = elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELIF() { return GetToken(SPSLParser.KEYWORD_ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(SPSLParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_IF() { return GetToken(SPSLParser.KEYWORD_IF, 0); }
		public ElifStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitElifStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifStatementContext elifStatement() {
		ElifStatementContext _localctx = new ElifStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_elifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_ELIF:
				{
				State = 875;
				Match(KEYWORD_ELIF);
				}
				break;
			case KEYWORD_ELSE:
				{
				State = 876;
				Match(KEYWORD_ELSE);
				State = 877;
				Match(KEYWORD_IF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 880;
			Match(TOK_OPEN_PAREN);
			State = 881;
			_localctx.Expression = expressionStatement(0);
			State = 882;
			Match(TOK_CLOSE_PAREN);
			State = 883;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_ELSE() { return GetToken(SPSLParser.KEYWORD_ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			Match(KEYWORD_ELSE);
			State = 886;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_SWITCH() { return GetToken(SPSLParser.KEYWORD_SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			Match(KEYWORD_SWITCH);
			State = 889;
			Match(TOK_OPEN_PAREN);
			State = 890;
			_localctx.Expression = expressionStatement(0);
			State = 891;
			Match(TOK_CLOSE_PAREN);
			State = 892;
			Match(TOK_OPEN_BRACE);
			State = 896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEYWORD_CASE) {
				{
				{
				State = 893;
				caseStatement();
				}
				}
				State = 898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 899;
			Match(TOK_CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public ConstantExpressionContext Expression;
		public StayControlFlowStatementContext Statements;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CASE() { return GetToken(SPSLParser.KEYWORD_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COLON() { return GetToken(SPSLParser.TOK_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeaveControlFlowStatementContext leaveControlFlowStatement() {
			return GetRuleContext<LeaveControlFlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACE() { return GetToken(SPSLParser.TOK_OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACE() { return GetToken(SPSLParser.TOK_CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext[] stayControlFlowStatement() {
			return GetRuleContexts<StayControlFlowStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement(int i) {
			return GetRuleContext<StayControlFlowStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			Match(KEYWORD_CASE);
			State = 902;
			_localctx.Expression = constantExpression();
			State = 903;
			Match(TOK_COLON);
			State = 905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 904;
				Match(TOK_OPEN_BRACE);
				}
				break;
			}
			State = 910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & -100167295L) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 9151314545908648007L) != 0)) {
				{
				{
				State = 907;
				_localctx.Statements = stayControlFlowStatement();
				}
				}
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 913;
			leaveControlFlowStatement();
			State = 915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 914;
				Match(TOK_CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(SPSLParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			Match(KEYWORD_WHILE);
			State = 918;
			Match(TOK_OPEN_PAREN);
			State = 919;
			_localctx.Expression = expressionStatement(0);
			State = 920;
			Match(TOK_CLOSE_PAREN);
			State = 921;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ExpressionStatementContext Initialization;
		public ExpressionStatementContext Condition;
		public ExpressionStatementContext Iteration;
		public StatementBlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_FOR() { return GetToken(SPSLParser.KEYWORD_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_SEMICOLON() { return GetTokens(SPSLParser.TOK_SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON(int i) {
			return GetToken(SPSLParser.TOK_SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 923;
			Match(KEYWORD_FOR);
			State = 924;
			Match(TOK_OPEN_PAREN);
			State = 925;
			_localctx.Initialization = expressionStatement(0);
			State = 926;
			Match(TOK_SEMICOLON);
			State = 927;
			_localctx.Condition = expressionStatement(0);
			State = 928;
			Match(TOK_SEMICOLON);
			State = 929;
			_localctx.Iteration = expressionStatement(0);
			State = 930;
			Match(TOK_CLOSE_PAREN);
			State = 931;
			_localctx.Block = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		public StatementBlockContext Block;
		public ParenthesizedExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DO() { return GetToken(SPSLParser.KEYWORD_DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_WHILE() { return GetToken(SPSLParser.KEYWORD_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			Match(KEYWORD_DO);
			State = 934;
			_localctx.Block = statementBlock();
			State = 935;
			Match(KEYWORD_WHILE);
			State = 936;
			_localctx.Expression = parenthesizedExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedExpressionContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ParenthesizedExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedExpressionContext parenthesizedExpression() {
		ParenthesizedExpressionContext _localctx = new ParenthesizedExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_parenthesizedExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			Match(TOK_OPEN_PAREN);
			State = 939;
			_localctx.Expression = expressionStatement(0);
			State = 940;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewInstanceExpressionContext : ParserRuleContext {
		public DataTypeContext Type;
		public ParametersListContext Parameters;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersListContext parametersList() {
			return GetRuleContext<ParametersListContext>(0);
		}
		public NewInstanceExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInstanceExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNewInstanceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstanceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewInstanceExpressionContext newInstanceExpression() {
		NewInstanceExpressionContext _localctx = new NewInstanceExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_newInstanceExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 942;
			_localctx.Type = dataType();
			State = 943;
			Match(TOK_OPEN_PAREN);
			State = 945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & 1152921504604749827L) != 0) || ((((_la - 108)) & ~0x3f) == 0 && ((1L << (_la - 108)) & 4468415305619457L) != 0)) {
				{
				State = 944;
				_localctx.Parameters = parametersList();
				}
			}

			State = 947;
			Match(TOK_CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_COMMA() { return GetTokens(SPSLParser.TOK_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COMMA(int i) {
			return GetToken(SPSLParser.TOK_COMMA, i);
		}
		public ParametersListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterParametersList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitParametersList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParametersList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersListContext parametersList() {
		ParametersListContext _localctx = new ParametersListContext(Context, State);
		EnterRule(_localctx, 132, RULE_parametersList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			expressionStatement(0);
			State = 954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_COMMA) {
				{
				{
				State = 950;
				Match(TOK_COMMA);
				State = 951;
				expressionStatement(0);
				}
				}
				State = 956;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextAccessExpressionContext : ParserRuleContext {
		public IToken Indentifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BASE() { return GetToken(SPSLParser.KEYWORD_BASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_THIS() { return GetToken(SPSLParser.KEYWORD_THIS, 0); }
		public ContextAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterContextAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitContextAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextAccessExpressionContext contextAccessExpression() {
		ContextAccessExpressionContext _localctx = new ContextAccessExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_contextAccessExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			_localctx.Indentifier = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==KEYWORD_THIS || _la==KEYWORD_BASE) ) {
				_localctx.Indentifier = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicExpressionContext : ParserRuleContext {
		public IToken Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(SPSLParser.IDENTIFIER, 0); }
		public BasicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBasicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBasicExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBasicExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BasicExpressionContext basicExpression() {
		BasicExpressionContext _localctx = new BasicExpressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_basicExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959;
			_localctx.Identifier = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
	 
		public ExpressionStatementContext() { }
		public virtual void CopyFrom(ExpressionStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixUnaryOperationExpressionContext : ExpressionStatementContext {
		public AssignableExpressionContext Expression;
		public IToken Operator;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INCREMENT() { return GetToken(SPSLParser.OP_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DECREMENT() { return GetToken(SPSLParser.OP_DECREMENT, 0); }
		public PostfixUnaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPostfixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPostfixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixUnaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionStatementContext {
		public AssignableExpressionContext Left;
		public IToken Operator;
		public ExpressionStatementContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASSIGN() { return GetToken(SPSLParser.OP_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS_ASSIGN() { return GetToken(SPSLParser.OP_PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS_ASSIGN() { return GetToken(SPSLParser.OP_MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL_ASSIGN() { return GetToken(SPSLParser.OP_MUL_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV_ASSIGN() { return GetToken(SPSLParser.OP_DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MODULUS_ASSIGN() { return GetToken(SPSLParser.OP_MODULUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_OR_ASSIGN() { return GetToken(SPSLParser.OP_BITWISE_OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BITWISE_AND_ASSIGN() { return GetToken(SPSLParser.OP_BITWISE_AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EXPONENT_ASSIGN() { return GetToken(SPSLParser.OP_EXPONENT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT_ASSIGN() { return GetToken(SPSLParser.OP_LSHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT_ASSIGN() { return GetToken(SPSLParser.OP_RSHIFT_ASSIGN, 0); }
		public AssignmentExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Condition;
		public ExpressionStatementContext WhenTrue;
		public ExpressionStatementContext WhenFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_QUESTION() { return GetToken(SPSLParser.TOK_QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_COLON() { return GetToken(SPSLParser.TOK_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		public TernaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterTernaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitTernaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionContext : ExpressionStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedExpressionContext parenthesizedExpression() {
			return GetRuleContext<ParenthesizedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberReferenceExpressionContext memberReferenceExpression() {
			return GetRuleContext<MemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChainedExpressionContext chainedExpression() {
			return GetRuleContext<ChainedExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewInstanceExpressionContext newInstanceExpression() {
			return GetRuleContext<NewInstanceExpressionContext>(0);
		}
		public ExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Left;
		public IToken Operator;
		public ExpressionStatementContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext[] expressionStatement() {
			return GetRuleContexts<ExpressionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement(int i) {
			return GetRuleContext<ExpressionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LEQ_THAN() { return GetToken(SPSLParser.OP_LEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GEQ_THAN() { return GetToken(SPSLParser.OP_GEQ_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSER_THAN() { return GetToken(SPSLParser.OP_LESSER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GREATER_THAN() { return GetToken(SPSLParser.OP_GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(SPSLParser.OP_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIFFERENT() { return GetToken(SPSLParser.OP_DIFFERENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS() { return GetToken(SPSLParser.OP_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS() { return GetToken(SPSLParser.OP_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(SPSLParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MODULUS() { return GetToken(SPSLParser.OP_MODULUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ASTERISK() { return GetToken(SPSLParser.OP_ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PIPE() { return GetToken(SPSLParser.OP_PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AMPERSAND() { return GetToken(SPSLParser.OP_AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EXPONENT() { return GetToken(SPSLParser.OP_EXPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT() { return GetToken(SPSLParser.OP_LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT() { return GetToken(SPSLParser.OP_RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(SPSLParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(SPSLParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_XOR() { return GetToken(SPSLParser.OP_XOR, 0); }
		public BinaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBinaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBinaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixUnaryOperationExpressionContext : ExpressionStatementContext {
		public IToken Operator;
		public AssignableExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public AssignableExpressionContext assignableExpression() {
			return GetRuleContext<AssignableExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INCREMENT() { return GetToken(SPSLParser.OP_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DECREMENT() { return GetToken(SPSLParser.OP_DECREMENT, 0); }
		public PrefixUnaryOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrefixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrefixUnaryOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnaryOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateOperationExpressionContext : ExpressionStatementContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_EXCLAMATION() { return GetToken(SPSLParser.TOK_EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public NegateOperationExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterNegateOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitNegateOperationExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateOperationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionStatementContext {
		public DataTypeContext Type;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_PAREN() { return GetToken(SPSLParser.TOK_OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_PAREN() { return GetToken(SPSLParser.TOK_CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public CastExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SignedExpressionContext : ExpressionStatementContext {
		public IToken Operator;
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MINUS() { return GetToken(SPSLParser.OP_MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PLUS() { return GetToken(SPSLParser.OP_PLUS, 0); }
		public SignedExpressionContext(ExpressionStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterSignedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitSignedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		return expressionStatement(0);
	}

	private ExpressionStatementContext expressionStatement(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, _parentState);
		ExpressionStatementContext _prevctx = _localctx;
		int _startState = 138;
		EnterRecursionRule(_localctx, 138, RULE_expressionStatement, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1029;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 962;
				basicExpression();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 963;
				parenthesizedExpression();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 964;
				primitiveExpression();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 965;
				constantExpression();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 966;
				memberReferenceExpression();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 967;
				chainedExpression();
				}
				break;
			case 7:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 968;
				invocationExpression();
				}
				break;
			case 8:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 969;
				arrayAccessExpression();
				}
				break;
			case 9:
				{
				_localctx = new ExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 970;
				newInstanceExpression();
				}
				break;
			case 10:
				{
				_localctx = new NegateOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 971;
				Match(TOK_EXCLAMATION);
				State = 972;
				((NegateOperationExpressionContext)_localctx).Expression = expressionStatement(36);
				}
				break;
			case 11:
				{
				_localctx = new PostfixUnaryOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 973;
				((PostfixUnaryOperationExpressionContext)_localctx).Expression = assignableExpression();
				State = 974;
				((PostfixUnaryOperationExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_INCREMENT || _la==OP_DECREMENT) ) {
					((PostfixUnaryOperationExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 12:
				{
				_localctx = new PrefixUnaryOperationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 976;
				((PrefixUnaryOperationExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_INCREMENT || _la==OP_DECREMENT) ) {
					((PrefixUnaryOperationExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 977;
				((PrefixUnaryOperationExpressionContext)_localctx).Expression = assignableExpression();
				}
				break;
			case 13:
				{
				_localctx = new SignedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 978;
				((SignedExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OP_PLUS || _la==OP_MINUS) ) {
					((SignedExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 979;
				((SignedExpressionContext)_localctx).Expression = expressionStatement(33);
				}
				break;
			case 14:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 980;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 981;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_ASSIGN);
				State = 982;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(12);
				}
				break;
			case 15:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 984;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 985;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_PLUS_ASSIGN);
				State = 986;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(11);
				}
				break;
			case 16:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 988;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 989;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MINUS_ASSIGN);
				State = 990;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(10);
				}
				break;
			case 17:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 992;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 993;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MUL_ASSIGN);
				State = 994;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(9);
				}
				break;
			case 18:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 996;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 997;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_DIV_ASSIGN);
				State = 998;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(8);
				}
				break;
			case 19:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1000;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1001;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_MODULUS_ASSIGN);
				State = 1002;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(7);
				}
				break;
			case 20:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1004;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1005;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_BITWISE_OR_ASSIGN);
				State = 1006;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(6);
				}
				break;
			case 21:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1008;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1009;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_BITWISE_AND_ASSIGN);
				State = 1010;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(5);
				}
				break;
			case 22:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1012;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1013;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_EXPONENT_ASSIGN);
				State = 1014;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(4);
				}
				break;
			case 23:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1016;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1017;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_LSHIFT_ASSIGN);
				State = 1018;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(3);
				}
				break;
			case 24:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1020;
				((AssignmentExpressionContext)_localctx).Left = assignableExpression();
				State = 1021;
				((AssignmentExpressionContext)_localctx).Operator = Match(OP_RSHIFT_ASSIGN);
				State = 1022;
				((AssignmentExpressionContext)_localctx).Right = expressionStatement(2);
				}
				break;
			case 25:
				{
				_localctx = new CastExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1024;
				Match(TOK_OPEN_PAREN);
				State = 1025;
				((CastExpressionContext)_localctx).Type = dataType();
				State = 1026;
				Match(TOK_CLOSE_PAREN);
				State = 1027;
				((CastExpressionContext)_localctx).Expression = expressionStatement(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1096;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1094;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
					case 1:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1031;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 1032;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LEQ_THAN);
						State = 1033;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(33);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1034;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 1035;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_GEQ_THAN);
						State = 1036;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(32);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1037;
						if (!(Precpred(Context, 30))) throw new FailedPredicateException(this, "Precpred(Context, 30)");
						State = 1038;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LESSER_THAN);
						State = 1039;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(31);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1040;
						if (!(Precpred(Context, 29))) throw new FailedPredicateException(this, "Precpred(Context, 29)");
						State = 1041;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_GREATER_THAN);
						State = 1042;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(30);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1043;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 1044;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_EQUAL);
						State = 1045;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(29);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1046;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 1047;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_DIFFERENT);
						State = 1048;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(28);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1049;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 1050;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_PLUS);
						State = 1051;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(27);
						}
						break;
					case 8:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1052;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1053;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_MINUS);
						State = 1054;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(26);
						}
						break;
					case 9:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1055;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1056;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_DIV);
						State = 1057;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(25);
						}
						break;
					case 10:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1058;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1059;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_MODULUS);
						State = 1060;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(24);
						}
						break;
					case 11:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1061;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1062;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_ASTERISK);
						State = 1063;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(23);
						}
						break;
					case 12:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1064;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1065;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_PIPE);
						State = 1066;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(22);
						}
						break;
					case 13:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1067;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1068;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_AMPERSAND);
						State = 1069;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(21);
						}
						break;
					case 14:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1070;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1071;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_EXPONENT);
						State = 1072;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(19);
						}
						break;
					case 15:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1073;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1074;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_LSHIFT);
						State = 1075;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(18);
						}
						break;
					case 16:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1076;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1077;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_RSHIFT);
						State = 1078;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(17);
						}
						break;
					case 17:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1079;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1080;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_AND);
						State = 1081;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(17);
						}
						break;
					case 18:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1082;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1083;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_OR);
						State = 1084;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(16);
						}
						break;
					case 19:
						{
						_localctx = new BinaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((BinaryOperationExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1085;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1086;
						((BinaryOperationExpressionContext)_localctx).Operator = Match(OP_XOR);
						State = 1087;
						((BinaryOperationExpressionContext)_localctx).Right = expressionStatement(15);
						}
						break;
					case 20:
						{
						_localctx = new TernaryOperationExpressionContext(new ExpressionStatementContext(_parentctx, _parentState));
						((TernaryOperationExpressionContext)_localctx).Condition = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionStatement);
						State = 1088;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1089;
						Match(TOK_QUESTION);
						State = 1090;
						((TernaryOperationExpressionContext)_localctx).WhenTrue = expressionStatement(0);
						State = 1091;
						Match(TOK_COLON);
						State = 1092;
						((TernaryOperationExpressionContext)_localctx).WhenFalse = expressionStatement(13);
						}
						break;
					}
					} 
				}
				State = 1098;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayAccessExpressionContext : ParserRuleContext {
		public ExpressionStatementContext Index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberReferenceExpressionContext memberReferenceExpression() {
			return GetRuleContext<MemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvocationExpressionContext invocationExpression() {
			return GetRuleContext<InvocationExpressionContext>(0);
		}
		public ArrayAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccessExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessExpressionContext arrayAccessExpression() {
		ArrayAccessExpressionContext _localctx = new ArrayAccessExpressionContext(Context, State);
		EnterRule(_localctx, 140, RULE_arrayAccessExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 1099;
				basicExpression();
				}
				break;
			case 2:
				{
				State = 1100;
				memberReferenceExpression();
				}
				break;
			case 3:
				{
				State = 1101;
				invocationExpression();
				}
				break;
			}
			State = 1104;
			Match(TOK_OPEN_BRACKET);
			State = 1105;
			_localctx.Index = expressionStatement(0);
			State = 1106;
			Match(TOK_CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayAccessExpressionContext arrayAccessExpression() {
			return GetRuleContext<ArrayAccessExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BasicExpressionContext basicExpression() {
			return GetRuleContext<BasicExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyMemberReferenceExpressionContext propertyMemberReferenceExpression() {
			return GetRuleContext<PropertyMemberReferenceExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignableChainedExpressionContext assignableChainedExpression() {
			return GetRuleContext<AssignableChainedExpressionContext>(0);
		}
		public AssignableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterAssignableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitAssignableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignableExpressionContext assignableExpression() {
		AssignableExpressionContext _localctx = new AssignableExpressionContext(Context, State);
		EnterRule(_localctx, 142, RULE_assignableExpression);
		try {
			State = 1112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1108;
				arrayAccessExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1109;
				basicExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1110;
				propertyMemberReferenceExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1111;
				assignableChainedExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionStatementContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_RETURN() { return GetToken(SPSLParser.KEYWORD_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			Match(KEYWORD_RETURN);
			State = 1115;
			_localctx.Expression = expressionStatement(0);
			State = 1116;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_BREAK() { return GetToken(SPSLParser.KEYWORD_BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1118;
			Match(KEYWORD_BREAK);
			State = 1119;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_CONTINUE() { return GetToken(SPSLParser.KEYWORD_CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 148, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			Match(KEYWORD_CONTINUE);
			State = 1122;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYWORD_DISCARD() { return GetToken(SPSLParser.KEYWORD_DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		public DiscardStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDiscardStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDiscardStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscardStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiscardStatementContext discardStatement() {
		DiscardStatementContext _localctx = new DiscardStatementContext(Context, State);
		EnterRule(_localctx, 150, RULE_discardStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1124;
			Match(KEYWORD_DISCARD);
			State = 1125;
			Match(TOK_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveControlFlowStatementContext : ParserRuleContext {
		public BreakStatementContext BreakStatement;
		public ReturnStatementContext ReturnStatement;
		public ContinueStatementContext ContinueStatement;
		public DiscardStatementContext DiscardStatement;
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardStatementContext discardStatement() {
			return GetRuleContext<DiscardStatementContext>(0);
		}
		public LeaveControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveControlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterLeaveControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitLeaveControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveControlFlowStatementContext leaveControlFlowStatement() {
		LeaveControlFlowStatementContext _localctx = new LeaveControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_leaveControlFlowStatement);
		try {
			State = 1131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1127;
				_localctx.BreakStatement = breakStatement();
				}
				break;
			case KEYWORD_RETURN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1128;
				_localctx.ReturnStatement = returnStatement();
				}
				break;
			case KEYWORD_CONTINUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1129;
				_localctx.ContinueStatement = continueStatement();
				}
				break;
			case KEYWORD_DISCARD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1130;
				_localctx.DiscardStatement = discardStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StayControlFlowStatementContext : ParserRuleContext {
		public VariableDeclarationContext VariableDeclaration;
		public ExpressionStatementContext ExpressionStatement;
		public StatementBlockContext StatementBlock;
		public IfStatementContext IfStatement;
		public SwitchStatementContext SwitchStatement;
		public WhileStatementContext WhileStatement;
		public ForStatementContext ForStatement;
		public DoWhileStatementContext DoWhileStatement;
		public PermuteStatementContext PermuteStatement;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SEMICOLON() { return GetToken(SPSLParser.TOK_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PermuteStatementContext permuteStatement() {
			return GetRuleContext<PermuteStatementContext>(0);
		}
		public StayControlFlowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stayControlFlowStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStayControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStayControlFlowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStayControlFlowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StayControlFlowStatementContext stayControlFlowStatement() {
		StayControlFlowStatementContext _localctx = new StayControlFlowStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_stayControlFlowStatement);
		try {
			State = 1146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1133;
				_localctx.VariableDeclaration = variableDeclaration();
				State = 1134;
				Match(TOK_SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1136;
				_localctx.ExpressionStatement = expressionStatement(0);
				State = 1137;
				Match(TOK_SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1139;
				_localctx.StatementBlock = statementBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1140;
				_localctx.IfStatement = ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1141;
				_localctx.SwitchStatement = switchStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1142;
				_localctx.WhileStatement = whileStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1143;
				_localctx.ForStatement = forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1144;
				_localctx.DoWhileStatement = doWhileStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1145;
				_localctx.PermuteStatement = permuteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StayControlFlowStatementContext StayControlFlowStatement;
		public LeaveControlFlowStatementContext LeaveControlFlowStatement;
		[System.Diagnostics.DebuggerNonUserCode] public StayControlFlowStatementContext stayControlFlowStatement() {
			return GetRuleContext<StayControlFlowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveControlFlowStatementContext leaveControlFlowStatement() {
			return GetRuleContext<LeaveControlFlowStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_statement);
		try {
			State = 1150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEYWORD_VAR:
			case KEYWORD_THIS:
			case KEYWORD_BASE:
			case KEYWORD_IF:
			case KEYWORD_SWITCH:
			case KEYWORD_FOR:
			case KEYWORD_DO:
			case KEYWORD_WHILE:
			case KEYWORD_CONST:
			case KEYWORD_PERMUTE:
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
			case TOK_OPEN_PAREN:
			case TOK_OPEN_BRACE:
			case TOK_EXCLAMATION:
			case OP_PLUS:
			case OP_MINUS:
			case OP_INCREMENT:
			case OP_DECREMENT:
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1148;
				_localctx.StayControlFlowStatement = stayControlFlowStatement();
				}
				break;
			case KEYWORD_RETURN:
			case KEYWORD_BREAK:
			case KEYWORD_CONTINUE:
			case KEYWORD_DISCARD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1149;
				_localctx.LeaveControlFlowStatement = leaveControlFlowStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		public IToken Literal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolLiteral() { return GetToken(SPSLParser.BoolLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleLiteral() { return GetToken(SPSLParser.DoubleLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatLiteral() { return GetToken(SPSLParser.FloatLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnsignedIntegerLiteral() { return GetToken(SPSLParser.UnsignedIntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SPSLParser.StringLiteral, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_primitiveExpression);
		try {
			State = 1158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1152;
				_localctx.Literal = Match(BoolLiteral);
				}
				break;
			case DoubleLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1153;
				_localctx.Literal = Match(DoubleLiteral);
				}
				break;
			case FloatLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1154;
				_localctx.Literal = Match(FloatLiteral);
				}
				break;
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1155;
				_localctx.Literal = Match(IntegerLiteral);
				}
				break;
			case UnsignedIntegerLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1156;
				_localctx.Literal = Match(UnsignedIntegerLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1157;
				_localctx.Literal = Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
	 
		public ConstantExpressionContext() { }
		public virtual void CopyFrom(ConstantExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UserDefinedConstantExpressionContext : ConstantExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UserDefinedConstantExpressionContext(ConstantExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUserDefinedConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUserDefinedConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimitiveConstantExpressionContext : ConstantExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		public PrimitiveConstantExpressionContext(ConstantExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_constantExpression);
		try {
			State = 1162;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BoolLiteral:
			case DoubleLiteral:
			case FloatLiteral:
			case IntegerLiteral:
			case UnsignedIntegerLiteral:
			case StringLiteral:
				_localctx = new PrimitiveConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1160;
				primitiveExpression();
				}
				break;
			case IDENTIFIER:
				_localctx = new UserDefinedConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1161;
				namespacedTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public bool IsArray;
		public DataTypeKind DataType;
		public IToken ArraySize;
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveDataTypeContext primitiveDataType() {
			return GetRuleContext<PrimitiveDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_OPEN_BRACKET() { return GetToken(SPSLParser.TOK_OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_CLOSE_BRACKET() { return GetToken(SPSLParser.TOK_CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(SPSLParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BuiltinDataTypeContext builtinDataType() {
			return GetRuleContext<BuiltinDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserDefinedDataTypeContext userDefinedDataType() {
			return GetRuleContext<UserDefinedDataTypeContext>(0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_dataType);
		int _la;
		try {
			State = 1197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
			case TYPE_BOOL:
			case TYPE_INT:
			case TYPE_UINT:
			case TYPE_FLOAT:
			case TYPE_DOUBLE:
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1164;
				primitiveDataType();
				State = 1171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1165;
					Match(TOK_OPEN_BRACKET);
					State = 1167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1166;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1169;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.Primitive;
				}
				break;
			case TYPE_VECTOR2B:
			case TYPE_VECTOR2F:
			case TYPE_VECTOR2I:
			case TYPE_VECTOR2UI:
			case TYPE_VECTOR3B:
			case TYPE_VECTOR3F:
			case TYPE_VECTOR3I:
			case TYPE_VECTOR3UI:
			case TYPE_VECTOR4B:
			case TYPE_VECTOR4F:
			case TYPE_VECTOR4I:
			case TYPE_VECTOR4UI:
			case TYPE_MATRIX2F:
			case TYPE_MATRIX3F:
			case TYPE_MATRIX4F:
			case TYPE_MATRIX2X3F:
			case TYPE_MATRIX2X4F:
			case TYPE_MATRIX3X2F:
			case TYPE_MATRIX3X4F:
			case TYPE_MATRIX4X2F:
			case TYPE_MATRIX4X3F:
			case TYPE_COLOR3:
			case TYPE_COLOR4:
			case TYPE_SAMPLER:
			case TYPE_TEXTURE1D:
			case TYPE_TEXTURE2D:
			case TYPE_TEXTURE1DARRAY:
			case TYPE_TEXTURE2DARRAY:
			case TYPE_TEXTURE3D:
			case TYPE_CUBEMAP:
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1175;
				builtinDataType();
				State = 1182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1176;
					Match(TOK_OPEN_BRACKET);
					State = 1178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1177;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1180;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.BuiltIn;
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1186;
				userDefinedDataType();
				State = 1193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOK_OPEN_BRACKET) {
					{
					State = 1187;
					Match(TOK_OPEN_BRACKET);
					State = 1189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==IntegerLiteral) {
						{
						State = 1188;
						_localctx.ArraySize = Match(IntegerLiteral);
						}
					}

					State = 1191;
					Match(TOK_CLOSE_BRACKET);
					_localctx.IsArray =  true;
					}
				}

				_localctx.DataType =  DataTypeKind.UserDefined;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserDefinedDataTypeContext : ParserRuleContext {
		public NamespacedTypeNameContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public NamespacedTypeNameContext namespacedTypeName() {
			return GetRuleContext<NamespacedTypeNameContext>(0);
		}
		public UserDefinedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterUserDefinedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitUserDefinedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserDefinedDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedDataTypeContext userDefinedDataType() {
		UserDefinedDataTypeContext _localctx = new UserDefinedDataTypeContext(Context, State);
		EnterRule(_localctx, 164, RULE_userDefinedDataType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1199;
			_localctx.Type = namespacedTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveDataTypeContext : ParserRuleContext {
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VOID() { return GetToken(SPSLParser.TYPE_VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_BOOL() { return GetToken(SPSLParser.TYPE_BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_INT() { return GetToken(SPSLParser.TYPE_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_UINT() { return GetToken(SPSLParser.TYPE_UINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_FLOAT() { return GetToken(SPSLParser.TYPE_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_DOUBLE() { return GetToken(SPSLParser.TYPE_DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_STRING() { return GetToken(SPSLParser.TYPE_STRING, 0); }
		public PrimitiveDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterPrimitiveDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitPrimitiveDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveDataTypeContext primitiveDataType() {
		PrimitiveDataTypeContext _localctx = new PrimitiveDataTypeContext(Context, State);
		EnterRule(_localctx, 166, RULE_primitiveDataType);
		try {
			State = 1208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VOID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1201;
				_localctx.Type = Match(TYPE_VOID);
				}
				break;
			case TYPE_BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1202;
				_localctx.Type = Match(TYPE_BOOL);
				}
				break;
			case TYPE_INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1203;
				_localctx.Type = Match(TYPE_INT);
				}
				break;
			case TYPE_UINT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1204;
				_localctx.Type = Match(TYPE_UINT);
				}
				break;
			case TYPE_FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1205;
				_localctx.Type = Match(TYPE_FLOAT);
				}
				break;
			case TYPE_DOUBLE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1206;
				_localctx.Type = Match(TYPE_DOUBLE);
				}
				break;
			case TYPE_STRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1207;
				_localctx.Type = Match(TYPE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BuiltinDataTypeContext : ParserRuleContext {
		public IToken Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2B() { return GetToken(SPSLParser.TYPE_VECTOR2B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2F() { return GetToken(SPSLParser.TYPE_VECTOR2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2I() { return GetToken(SPSLParser.TYPE_VECTOR2I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR2UI() { return GetToken(SPSLParser.TYPE_VECTOR2UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3B() { return GetToken(SPSLParser.TYPE_VECTOR3B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3F() { return GetToken(SPSLParser.TYPE_VECTOR3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3I() { return GetToken(SPSLParser.TYPE_VECTOR3I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR3UI() { return GetToken(SPSLParser.TYPE_VECTOR3UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4B() { return GetToken(SPSLParser.TYPE_VECTOR4B, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4F() { return GetToken(SPSLParser.TYPE_VECTOR4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4I() { return GetToken(SPSLParser.TYPE_VECTOR4I, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_VECTOR4UI() { return GetToken(SPSLParser.TYPE_VECTOR4UI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2F() { return GetToken(SPSLParser.TYPE_MATRIX2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3F() { return GetToken(SPSLParser.TYPE_MATRIX3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4F() { return GetToken(SPSLParser.TYPE_MATRIX4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X3F() { return GetToken(SPSLParser.TYPE_MATRIX2X3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX2X4F() { return GetToken(SPSLParser.TYPE_MATRIX2X4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X2F() { return GetToken(SPSLParser.TYPE_MATRIX3X2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX3X4F() { return GetToken(SPSLParser.TYPE_MATRIX3X4F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X2F() { return GetToken(SPSLParser.TYPE_MATRIX4X2F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_MATRIX4X3F() { return GetToken(SPSLParser.TYPE_MATRIX4X3F, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COLOR3() { return GetToken(SPSLParser.TYPE_COLOR3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COLOR4() { return GetToken(SPSLParser.TYPE_COLOR4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SAMPLER() { return GetToken(SPSLParser.TYPE_SAMPLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE1D() { return GetToken(SPSLParser.TYPE_TEXTURE1D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE1DARRAY() { return GetToken(SPSLParser.TYPE_TEXTURE1DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE2D() { return GetToken(SPSLParser.TYPE_TEXTURE2D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE2DARRAY() { return GetToken(SPSLParser.TYPE_TEXTURE2DARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_TEXTURE3D() { return GetToken(SPSLParser.TYPE_TEXTURE3D, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CUBEMAP() { return GetToken(SPSLParser.TYPE_CUBEMAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_CUBEMAPARRAY() { return GetToken(SPSLParser.TYPE_CUBEMAPARRAY, 0); }
		public BuiltinDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_builtinDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.EnterBuiltinDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISPSLListener typedListener = listener as ISPSLListener;
			if (typedListener != null) typedListener.ExitBuiltinDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISPSLVisitor<TResult> typedVisitor = visitor as ISPSLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BuiltinDataTypeContext builtinDataType() {
		BuiltinDataTypeContext _localctx = new BuiltinDataTypeContext(Context, State);
		EnterRule(_localctx, 168, RULE_builtinDataType);
		try {
			State = 1241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_VECTOR2B:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1210;
				_localctx.Type = Match(TYPE_VECTOR2B);
				}
				break;
			case TYPE_VECTOR2F:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1211;
				_localctx.Type = Match(TYPE_VECTOR2F);
				}
				break;
			case TYPE_VECTOR2I:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1212;
				_localctx.Type = Match(TYPE_VECTOR2I);
				}
				break;
			case TYPE_VECTOR2UI:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1213;
				_localctx.Type = Match(TYPE_VECTOR2UI);
				}
				break;
			case TYPE_VECTOR3B:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1214;
				_localctx.Type = Match(TYPE_VECTOR3B);
				}
				break;
			case TYPE_VECTOR3F:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1215;
				_localctx.Type = Match(TYPE_VECTOR3F);
				}
				break;
			case TYPE_VECTOR3I:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1216;
				_localctx.Type = Match(TYPE_VECTOR3I);
				}
				break;
			case TYPE_VECTOR3UI:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1217;
				_localctx.Type = Match(TYPE_VECTOR3UI);
				}
				break;
			case TYPE_VECTOR4B:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1218;
				_localctx.Type = Match(TYPE_VECTOR4B);
				}
				break;
			case TYPE_VECTOR4F:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1219;
				_localctx.Type = Match(TYPE_VECTOR4F);
				}
				break;
			case TYPE_VECTOR4I:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1220;
				_localctx.Type = Match(TYPE_VECTOR4I);
				}
				break;
			case TYPE_VECTOR4UI:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1221;
				_localctx.Type = Match(TYPE_VECTOR4UI);
				}
				break;
			case TYPE_MATRIX2F:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1222;
				_localctx.Type = Match(TYPE_MATRIX2F);
				}
				break;
			case TYPE_MATRIX3F:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1223;
				_localctx.Type = Match(TYPE_MATRIX3F);
				}
				break;
			case TYPE_MATRIX4F:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1224;
				_localctx.Type = Match(TYPE_MATRIX4F);
				}
				break;
			case TYPE_MATRIX2X3F:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1225;
				_localctx.Type = Match(TYPE_MATRIX2X3F);
				}
				break;
			case TYPE_MATRIX2X4F:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1226;
				_localctx.Type = Match(TYPE_MATRIX2X4F);
				}
				break;
			case TYPE_MATRIX3X2F:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1227;
				_localctx.Type = Match(TYPE_MATRIX3X2F);
				}
				break;
			case TYPE_MATRIX3X4F:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1228;
				_localctx.Type = Match(TYPE_MATRIX3X4F);
				}
				break;
			case TYPE_MATRIX4X2F:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1229;
				_localctx.Type = Match(TYPE_MATRIX4X2F);
				}
				break;
			case TYPE_MATRIX4X3F:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1230;
				_localctx.Type = Match(TYPE_MATRIX4X3F);
				}
				break;
			case TYPE_COLOR3:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1231;
				_localctx.Type = Match(TYPE_COLOR3);
				}
				break;
			case TYPE_COLOR4:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1232;
				_localctx.Type = Match(TYPE_COLOR4);
				}
				break;
			case TYPE_SAMPLER:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1233;
				_localctx.Type = Match(TYPE_SAMPLER);
				}
				break;
			case TYPE_TEXTURE1D:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1234;
				_localctx.Type = Match(TYPE_TEXTURE1D);
				}
				break;
			case TYPE_TEXTURE1DARRAY:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1235;
				_localctx.Type = Match(TYPE_TEXTURE1DARRAY);
				}
				break;
			case TYPE_TEXTURE2D:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1236;
				_localctx.Type = Match(TYPE_TEXTURE2D);
				}
				break;
			case TYPE_TEXTURE2DARRAY:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1237;
				_localctx.Type = Match(TYPE_TEXTURE2DARRAY);
				}
				break;
			case TYPE_TEXTURE3D:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1238;
				_localctx.Type = Match(TYPE_TEXTURE3D);
				}
				break;
			case TYPE_CUBEMAP:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1239;
				_localctx.Type = Match(TYPE_CUBEMAP);
				}
				break;
			case TYPE_CUBEMAPARRAY:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1240;
				_localctx.Type = Match(TYPE_CUBEMAPARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 69: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 32);
		case 1: return Precpred(Context, 31);
		case 2: return Precpred(Context, 30);
		case 3: return Precpred(Context, 29);
		case 4: return Precpred(Context, 28);
		case 5: return Precpred(Context, 27);
		case 6: return Precpred(Context, 26);
		case 7: return Precpred(Context, 25);
		case 8: return Precpred(Context, 24);
		case 9: return Precpred(Context, 23);
		case 10: return Precpred(Context, 22);
		case 11: return Precpred(Context, 21);
		case 12: return Precpred(Context, 20);
		case 13: return Precpred(Context, 19);
		case 14: return Precpred(Context, 18);
		case 15: return Precpred(Context, 17);
		case 16: return Precpred(Context, 16);
		case 17: return Precpred(Context, 15);
		case 18: return Precpred(Context, 14);
		case 19: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,159,1244,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		1,0,5,0,172,8,0,10,0,12,0,175,9,0,1,0,5,0,178,8,0,10,0,12,0,181,9,0,1,
		0,3,0,184,8,0,1,0,5,0,187,8,0,10,0,12,0,190,9,0,1,0,5,0,193,8,0,10,0,12,
		0,196,9,0,1,0,5,0,199,8,0,10,0,12,0,202,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
		2,1,2,1,2,5,2,213,8,2,10,2,12,2,216,9,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,224,
		8,3,1,4,1,4,3,4,228,8,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,249,8,6,10,6,12,6,252,9,6,1,6,1,6,1,
		6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,3,8,269,8,8,1,9,5,9,
		272,8,9,10,9,12,9,275,9,9,1,9,1,9,1,9,5,9,280,8,9,10,9,12,9,283,9,9,1,
		9,5,9,286,8,9,10,9,12,9,289,9,9,1,9,1,9,1,9,5,9,294,8,9,10,9,12,9,297,
		9,9,1,9,1,9,1,9,5,9,302,8,9,10,9,12,9,305,9,9,1,9,5,9,308,8,9,10,9,12,
		9,311,9,9,1,9,1,9,3,9,315,8,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,323,8,
		10,1,11,1,11,1,11,1,11,1,11,1,12,5,12,331,8,12,10,12,12,12,334,9,12,1,
		12,1,12,1,12,5,12,339,8,12,10,12,12,12,342,9,12,1,12,1,12,1,12,5,12,347,
		8,12,10,12,12,12,350,9,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,358,8,13,
		1,14,1,14,1,14,5,14,363,8,14,10,14,12,14,366,9,14,1,15,5,15,369,8,15,10,
		15,12,15,372,9,15,1,15,1,15,1,15,5,15,377,8,15,10,15,12,15,380,9,15,1,
		15,5,15,383,8,15,10,15,12,15,386,9,15,1,15,5,15,389,8,15,10,15,12,15,392,
		9,15,1,15,1,15,1,15,1,15,3,15,398,8,15,5,15,400,8,15,10,15,12,15,403,9,
		15,1,15,1,15,1,16,1,16,1,16,1,16,3,16,411,8,16,1,16,1,16,3,16,415,8,16,
		1,17,5,17,418,8,17,10,17,12,17,421,9,17,1,17,1,17,1,17,5,17,426,8,17,10,
		17,12,17,429,9,17,1,17,5,17,432,8,17,10,17,12,17,435,9,17,1,17,5,17,438,
		8,17,10,17,12,17,441,9,17,1,17,5,17,444,8,17,10,17,12,17,447,9,17,1,17,
		5,17,450,8,17,10,17,12,17,453,9,17,1,17,5,17,456,8,17,10,17,12,17,459,
		9,17,1,17,1,17,1,18,5,18,464,8,18,10,18,12,18,467,9,18,1,18,1,18,1,18,
		5,18,472,8,18,10,18,12,18,475,9,18,1,18,5,18,478,8,18,10,18,12,18,481,
		9,18,1,18,5,18,484,8,18,10,18,12,18,487,9,18,1,18,5,18,490,8,18,10,18,
		12,18,493,9,18,1,18,5,18,496,8,18,10,18,12,18,499,9,18,1,18,5,18,502,8,
		18,10,18,12,18,505,9,18,1,18,1,18,1,19,1,19,3,19,511,8,19,1,19,1,19,1,
		19,1,19,3,19,517,8,19,1,19,1,19,3,19,521,8,19,1,20,1,20,3,20,525,8,20,
		1,20,3,20,528,8,20,1,20,1,20,1,20,1,20,3,20,534,8,20,1,20,1,20,3,20,538,
		8,20,1,20,1,20,3,20,542,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,3,20,556,8,20,1,20,1,20,3,20,560,8,20,3,20,562,8,20,
		1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,572,8,22,1,23,1,23,1,23,3,
		23,577,8,23,1,24,1,24,1,24,1,24,1,24,1,24,5,24,585,8,24,10,24,12,24,588,
		9,24,3,24,590,8,24,1,24,3,24,593,8,24,1,25,1,25,3,25,597,8,25,1,26,1,26,
		1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,5,29,611,8,29,10,29,
		12,29,614,9,29,1,29,1,29,3,29,618,8,29,1,29,1,29,1,29,1,29,5,29,624,8,
		29,10,29,12,29,627,9,29,1,29,1,29,1,30,5,30,632,8,30,10,30,12,30,635,9,
		30,1,30,1,30,1,30,1,30,1,30,5,30,642,8,30,10,30,12,30,645,9,30,1,30,1,
		30,1,31,5,31,650,8,31,10,31,12,31,653,9,31,1,31,1,31,1,31,1,31,1,31,5,
		31,660,8,31,10,31,12,31,663,9,31,1,31,1,31,1,32,5,32,668,8,32,10,32,12,
		32,671,9,32,1,32,1,32,1,32,1,32,5,32,677,8,32,10,32,12,32,680,9,32,1,32,
		1,32,1,33,5,33,685,8,33,10,33,12,33,688,9,33,1,33,1,33,1,33,1,33,1,34,
		5,34,695,8,34,10,34,12,34,698,9,34,1,34,1,34,1,34,1,34,1,34,5,34,705,8,
		34,10,34,12,34,708,9,34,1,34,3,34,711,8,34,1,35,1,35,1,35,3,35,716,8,35,
		1,35,1,35,1,36,1,36,3,36,722,8,36,1,36,1,36,1,36,1,36,5,36,728,8,36,10,
		36,12,36,731,9,36,1,36,1,36,3,36,735,8,36,1,37,1,37,1,37,1,37,1,38,1,38,
		1,38,1,38,3,38,745,8,38,1,39,5,39,748,8,39,10,39,12,39,751,9,39,1,39,1,
		39,3,39,755,8,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,3,41,765,8,41,
		1,41,1,41,1,41,1,42,1,42,3,42,772,8,42,1,42,1,42,1,43,1,43,1,43,5,43,779,
		8,43,10,43,12,43,782,9,43,1,44,3,44,785,8,44,1,44,1,44,1,44,1,45,5,45,
		791,8,45,10,45,12,45,794,9,45,1,45,3,45,797,8,45,1,46,1,46,5,46,801,8,
		46,10,46,12,46,804,9,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,3,47,813,8,
		47,1,48,1,48,3,48,817,8,48,1,49,1,49,1,49,4,49,822,8,49,11,49,12,49,823,
		1,50,1,50,1,50,4,50,829,8,50,11,50,12,50,830,1,51,1,51,1,51,1,51,1,52,
		1,52,1,52,1,52,1,53,1,53,3,53,843,8,53,1,54,1,54,1,54,3,54,848,8,54,1,
		54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,860,8,55,1,56,1,56,
		1,56,1,56,1,56,1,56,5,56,868,8,56,10,56,12,56,871,9,56,1,56,3,56,874,8,
		56,1,57,1,57,1,57,3,57,879,8,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,
		1,59,1,59,1,59,1,59,1,59,1,59,5,59,895,8,59,10,59,12,59,898,9,59,1,59,
		1,59,1,60,1,60,1,60,1,60,3,60,906,8,60,1,60,5,60,909,8,60,10,60,12,60,
		912,9,60,1,60,1,60,3,60,916,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,
		64,1,64,1,64,1,64,1,65,1,65,1,65,3,65,946,8,65,1,65,1,65,1,66,1,66,1,66,
		5,66,953,8,66,10,66,12,66,956,9,66,1,67,1,67,1,68,1,68,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1030,8,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,5,69,1095,8,69,10,69,12,69,1098,9,69,1,70,1,70,
		1,70,3,70,1103,8,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,3,71,1113,
		8,71,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,75,
		1,76,1,76,1,76,1,76,3,76,1132,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,3,77,1147,8,77,1,78,1,78,3,78,1151,8,78,
		1,79,1,79,1,79,1,79,1,79,1,79,3,79,1159,8,79,1,80,1,80,3,80,1163,8,80,
		1,81,1,81,1,81,3,81,1168,8,81,1,81,1,81,3,81,1172,8,81,1,81,1,81,1,81,
		1,81,1,81,3,81,1179,8,81,1,81,1,81,3,81,1183,8,81,1,81,1,81,1,81,1,81,
		1,81,3,81,1190,8,81,1,81,1,81,3,81,1194,8,81,1,81,1,81,3,81,1198,8,81,
		1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1209,8,83,1,84,1,84,
		1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
		1,84,3,84,1242,8,84,1,84,0,1,138,85,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
		152,154,156,158,160,162,164,166,168,0,9,2,0,12,12,14,18,1,0,2,4,1,0,6,
		8,3,0,26,26,28,29,58,58,2,0,40,41,159,159,1,0,126,131,1,0,40,41,1,0,132,
		133,1,0,119,120,1388,0,173,1,0,0,0,2,205,1,0,0,0,4,209,1,0,0,0,6,223,1,
		0,0,0,8,227,1,0,0,0,10,234,1,0,0,0,12,241,1,0,0,0,14,258,1,0,0,0,16,268,
		1,0,0,0,18,314,1,0,0,0,20,316,1,0,0,0,22,324,1,0,0,0,24,332,1,0,0,0,26,
		353,1,0,0,0,28,359,1,0,0,0,30,370,1,0,0,0,32,406,1,0,0,0,34,419,1,0,0,
		0,36,465,1,0,0,0,38,510,1,0,0,0,40,561,1,0,0,0,42,563,1,0,0,0,44,571,1,
		0,0,0,46,576,1,0,0,0,48,578,1,0,0,0,50,596,1,0,0,0,52,598,1,0,0,0,54,602,
		1,0,0,0,56,606,1,0,0,0,58,612,1,0,0,0,60,633,1,0,0,0,62,651,1,0,0,0,64,
		669,1,0,0,0,66,686,1,0,0,0,68,710,1,0,0,0,70,712,1,0,0,0,72,734,1,0,0,
		0,74,736,1,0,0,0,76,744,1,0,0,0,78,749,1,0,0,0,80,758,1,0,0,0,82,764,1,
		0,0,0,84,769,1,0,0,0,86,775,1,0,0,0,88,784,1,0,0,0,90,792,1,0,0,0,92,798,
		1,0,0,0,94,812,1,0,0,0,96,816,1,0,0,0,98,818,1,0,0,0,100,825,1,0,0,0,102,
		832,1,0,0,0,104,836,1,0,0,0,106,842,1,0,0,0,108,844,1,0,0,0,110,851,1,
		0,0,0,112,861,1,0,0,0,114,878,1,0,0,0,116,885,1,0,0,0,118,888,1,0,0,0,
		120,901,1,0,0,0,122,917,1,0,0,0,124,923,1,0,0,0,126,933,1,0,0,0,128,938,
		1,0,0,0,130,942,1,0,0,0,132,949,1,0,0,0,134,957,1,0,0,0,136,959,1,0,0,
		0,138,1029,1,0,0,0,140,1102,1,0,0,0,142,1112,1,0,0,0,144,1114,1,0,0,0,
		146,1118,1,0,0,0,148,1121,1,0,0,0,150,1124,1,0,0,0,152,1131,1,0,0,0,154,
		1146,1,0,0,0,156,1150,1,0,0,0,158,1158,1,0,0,0,160,1162,1,0,0,0,162,1197,
		1,0,0,0,164,1199,1,0,0,0,166,1208,1,0,0,0,168,1241,1,0,0,0,170,172,3,50,
		25,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,
		179,1,0,0,0,175,173,1,0,0,0,176,178,5,150,0,0,177,176,1,0,0,0,178,181,
		1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,
		0,182,184,3,2,1,0,183,182,1,0,0,0,183,184,1,0,0,0,184,194,1,0,0,0,185,
		187,5,150,0,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,
		1,0,0,0,189,191,1,0,0,0,190,188,1,0,0,0,191,193,3,42,21,0,192,188,1,0,
		0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,200,1,0,0,0,196,
		194,1,0,0,0,197,199,3,6,3,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,
		0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,5,0,0,1,
		204,1,1,0,0,0,205,206,5,10,0,0,206,207,3,4,2,0,207,208,5,111,0,0,208,3,
		1,0,0,0,209,214,5,159,0,0,210,211,5,116,0,0,211,213,5,159,0,0,212,210,
		1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,5,1,0,0,0,
		216,214,1,0,0,0,217,224,3,8,4,0,218,224,3,16,8,0,219,224,3,18,9,0,220,
		224,3,24,12,0,221,224,3,30,15,0,222,224,3,34,17,0,223,217,1,0,0,0,223,
		218,1,0,0,0,223,219,1,0,0,0,223,220,1,0,0,0,223,221,1,0,0,0,223,222,1,
		0,0,0,224,7,1,0,0,0,225,226,5,57,0,0,226,228,6,4,-1,0,227,225,1,0,0,0,
		227,228,1,0,0,0,228,229,1,0,0,0,229,230,5,58,0,0,230,231,3,162,81,0,231,
		232,3,74,37,0,232,233,5,111,0,0,233,9,1,0,0,0,234,235,5,59,0,0,235,236,
		5,62,0,0,236,237,3,136,68,0,237,238,5,125,0,0,238,239,5,153,0,0,239,240,
		5,111,0,0,240,11,1,0,0,0,241,242,5,59,0,0,242,243,5,43,0,0,243,244,3,136,
		68,0,244,245,5,103,0,0,245,250,5,159,0,0,246,247,5,112,0,0,247,249,5,159,
		0,0,248,246,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,
		253,1,0,0,0,252,250,1,0,0,0,253,254,5,104,0,0,254,255,5,125,0,0,255,256,
		3,136,68,0,256,257,5,111,0,0,257,13,1,0,0,0,258,259,5,59,0,0,259,260,5,
		63,0,0,260,261,3,136,68,0,261,262,5,125,0,0,262,263,5,156,0,0,263,264,
		5,111,0,0,264,15,1,0,0,0,265,269,3,10,5,0,266,269,3,12,6,0,267,269,3,14,
		7,0,268,265,1,0,0,0,268,266,1,0,0,0,268,267,1,0,0,0,269,17,1,0,0,0,270,
		272,5,150,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,
		1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,276,277,3,20,10,0,277,287,5,103,
		0,0,278,280,5,150,0,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,
		281,282,1,0,0,0,282,284,1,0,0,0,283,281,1,0,0,0,284,286,3,68,34,0,285,
		281,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,290,1,
		0,0,0,289,287,1,0,0,0,290,291,5,104,0,0,291,315,1,0,0,0,292,294,5,150,
		0,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,
		298,1,0,0,0,297,295,1,0,0,0,298,299,3,22,11,0,299,309,5,103,0,0,300,302,
		5,150,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,
		0,0,304,306,1,0,0,0,305,303,1,0,0,0,306,308,3,70,35,0,307,303,1,0,0,0,
		308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,309,
		1,0,0,0,312,313,5,104,0,0,313,315,1,0,0,0,314,273,1,0,0,0,314,295,1,0,
		0,0,315,19,1,0,0,0,316,317,5,24,0,0,317,318,5,159,0,0,318,319,5,25,0,0,
		319,322,5,42,0,0,320,321,5,30,0,0,321,323,3,4,2,0,322,320,1,0,0,0,322,
		323,1,0,0,0,323,21,1,0,0,0,324,325,5,24,0,0,325,326,5,159,0,0,326,327,
		5,25,0,0,327,328,5,43,0,0,328,23,1,0,0,0,329,331,5,150,0,0,330,329,1,0,
		0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,
		332,1,0,0,0,335,336,3,26,13,0,336,348,5,103,0,0,337,339,5,150,0,0,338,
		337,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,343,1,
		0,0,0,342,340,1,0,0,0,343,344,3,82,41,0,344,345,5,111,0,0,345,347,1,0,
		0,0,346,340,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,
		351,1,0,0,0,350,348,1,0,0,0,351,352,5,104,0,0,352,25,1,0,0,0,353,354,5,
		20,0,0,354,357,5,159,0,0,355,356,5,30,0,0,356,358,3,28,14,0,357,355,1,
		0,0,0,357,358,1,0,0,0,358,27,1,0,0,0,359,364,3,4,2,0,360,361,5,112,0,0,
		361,363,3,4,2,0,362,360,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,
		1,0,0,0,365,29,1,0,0,0,366,364,1,0,0,0,367,369,5,150,0,0,368,367,1,0,0,
		0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,
		370,1,0,0,0,373,374,3,32,16,0,374,384,5,103,0,0,375,377,5,150,0,0,376,
		375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,381,1,
		0,0,0,380,378,1,0,0,0,381,383,3,42,21,0,382,378,1,0,0,0,383,386,1,0,0,
		0,384,382,1,0,0,0,384,385,1,0,0,0,385,401,1,0,0,0,386,384,1,0,0,0,387,
		389,5,150,0,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,
		1,0,0,0,391,397,1,0,0,0,392,390,1,0,0,0,393,398,3,64,32,0,394,398,3,8,
		4,0,395,398,3,18,9,0,396,398,3,78,39,0,397,393,1,0,0,0,397,394,1,0,0,0,
		397,395,1,0,0,0,397,396,1,0,0,0,398,400,1,0,0,0,399,390,1,0,0,0,400,403,
		1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,401,1,0,0,
		0,404,405,5,104,0,0,405,31,1,0,0,0,406,407,5,13,0,0,407,410,5,159,0,0,
		408,409,5,30,0,0,409,411,3,4,2,0,410,408,1,0,0,0,410,411,1,0,0,0,411,414,
		1,0,0,0,412,413,5,31,0,0,413,415,3,28,14,0,414,412,1,0,0,0,414,415,1,0,
		0,0,415,33,1,0,0,0,416,418,5,150,0,0,417,416,1,0,0,0,418,421,1,0,0,0,419,
		417,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,419,1,0,0,0,422,423,3,
		40,20,0,423,433,5,103,0,0,424,426,5,150,0,0,425,424,1,0,0,0,426,429,1,
		0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,427,1,0,0,0,
		430,432,3,42,21,0,431,427,1,0,0,0,432,435,1,0,0,0,433,431,1,0,0,0,433,
		434,1,0,0,0,434,445,1,0,0,0,435,433,1,0,0,0,436,438,5,150,0,0,437,436,
		1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,
		0,441,439,1,0,0,0,442,444,3,44,22,0,443,439,1,0,0,0,444,447,1,0,0,0,445,
		443,1,0,0,0,445,446,1,0,0,0,446,457,1,0,0,0,447,445,1,0,0,0,448,450,5,
		150,0,0,449,448,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,
		0,452,454,1,0,0,0,453,451,1,0,0,0,454,456,3,78,39,0,455,451,1,0,0,0,456,
		459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,
		0,0,0,460,461,5,104,0,0,461,35,1,0,0,0,462,464,5,150,0,0,463,462,1,0,0,
		0,464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,
		465,1,0,0,0,468,469,3,38,19,0,469,479,5,103,0,0,470,472,5,150,0,0,471,
		470,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,
		0,0,0,475,473,1,0,0,0,476,478,3,42,21,0,477,473,1,0,0,0,478,481,1,0,0,
		0,479,477,1,0,0,0,479,480,1,0,0,0,480,491,1,0,0,0,481,479,1,0,0,0,482,
		484,5,150,0,0,483,482,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,
		1,0,0,0,486,488,1,0,0,0,487,485,1,0,0,0,488,490,3,46,23,0,489,485,1,0,
		0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,503,1,0,0,0,493,
		491,1,0,0,0,494,496,5,150,0,0,495,494,1,0,0,0,496,499,1,0,0,0,497,495,
		1,0,0,0,497,498,1,0,0,0,498,500,1,0,0,0,499,497,1,0,0,0,500,502,3,78,39,
		0,501,497,1,0,0,0,502,505,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,
		506,1,0,0,0,505,503,1,0,0,0,506,507,5,104,0,0,507,37,1,0,0,0,508,509,5,
		11,0,0,509,511,6,19,-1,0,510,508,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,
		0,512,513,5,21,0,0,513,516,5,159,0,0,514,515,5,30,0,0,515,517,3,4,2,0,
		516,514,1,0,0,0,516,517,1,0,0,0,517,520,1,0,0,0,518,519,5,31,0,0,519,521,
		3,28,14,0,520,518,1,0,0,0,520,521,1,0,0,0,521,39,1,0,0,0,522,523,5,11,
		0,0,523,525,6,20,-1,0,524,522,1,0,0,0,524,525,1,0,0,0,525,527,1,0,0,0,
		526,528,7,0,0,0,527,526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,530,
		5,19,0,0,530,533,5,159,0,0,531,532,5,30,0,0,532,534,3,4,2,0,533,531,1,
		0,0,0,533,534,1,0,0,0,534,537,1,0,0,0,535,536,5,31,0,0,536,538,3,28,14,
		0,537,535,1,0,0,0,537,538,1,0,0,0,538,562,1,0,0,0,539,540,5,11,0,0,540,
		542,6,20,-1,0,541,539,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,544,
		5,18,0,0,544,545,5,19,0,0,545,546,5,159,0,0,546,547,5,129,0,0,547,548,
		5,156,0,0,548,549,5,112,0,0,549,550,5,156,0,0,550,551,5,112,0,0,551,552,
		5,156,0,0,552,555,5,128,0,0,553,554,5,30,0,0,554,556,3,4,2,0,555,553,1,
		0,0,0,555,556,1,0,0,0,556,559,1,0,0,0,557,558,5,31,0,0,558,560,3,28,14,
		0,559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,524,1,0,0,0,561,
		541,1,0,0,0,562,41,1,0,0,0,563,564,5,32,0,0,564,565,3,4,2,0,565,566,5,
		111,0,0,566,43,1,0,0,0,567,572,3,60,30,0,568,572,3,62,31,0,569,572,3,64,
		32,0,570,572,3,18,9,0,571,567,1,0,0,0,571,568,1,0,0,0,571,569,1,0,0,0,
		571,570,1,0,0,0,572,45,1,0,0,0,573,577,3,58,29,0,574,577,3,62,31,0,575,
		577,3,18,9,0,576,573,1,0,0,0,576,574,1,0,0,0,576,575,1,0,0,0,577,47,1,
		0,0,0,578,579,5,115,0,0,579,592,5,159,0,0,580,589,5,99,0,0,581,586,3,160,
		80,0,582,583,5,112,0,0,583,585,3,160,80,0,584,582,1,0,0,0,585,588,1,0,
		0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,590,1,0,0,0,588,586,1,0,0,0,589,
		581,1,0,0,0,589,590,1,0,0,0,590,591,1,0,0,0,591,593,5,100,0,0,592,580,
		1,0,0,0,592,593,1,0,0,0,593,49,1,0,0,0,594,597,3,52,26,0,595,597,3,54,
		27,0,596,594,1,0,0,0,596,595,1,0,0,0,597,51,1,0,0,0,598,599,5,113,0,0,
		599,600,5,1,0,0,600,601,7,1,0,0,601,53,1,0,0,0,602,603,5,113,0,0,603,604,
		5,5,0,0,604,605,7,2,0,0,605,55,1,0,0,0,606,607,5,113,0,0,607,608,5,9,0,
		0,608,57,1,0,0,0,609,611,3,48,24,0,610,609,1,0,0,0,611,614,1,0,0,0,612,
		610,1,0,0,0,612,613,1,0,0,0,613,617,1,0,0,0,614,612,1,0,0,0,615,616,5,
		22,0,0,616,618,6,29,-1,0,617,615,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,
		0,619,620,5,23,0,0,620,621,5,159,0,0,621,625,5,103,0,0,622,624,3,66,33,
		0,623,622,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,
		628,1,0,0,0,627,625,1,0,0,0,628,629,5,104,0,0,629,59,1,0,0,0,630,632,3,
		48,24,0,631,630,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,
		0,634,636,1,0,0,0,635,633,1,0,0,0,636,637,5,34,0,0,637,638,3,162,81,0,
		638,643,5,159,0,0,639,640,5,112,0,0,640,642,5,159,0,0,641,639,1,0,0,0,
		642,645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,646,1,0,0,0,645,643,
		1,0,0,0,646,647,5,111,0,0,647,61,1,0,0,0,648,650,3,48,24,0,649,648,1,0,
		0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,0,653,
		651,1,0,0,0,654,655,5,37,0,0,655,656,3,162,81,0,656,661,5,159,0,0,657,
		658,5,112,0,0,658,660,5,159,0,0,659,657,1,0,0,0,660,663,1,0,0,0,661,659,
		1,0,0,0,661,662,1,0,0,0,662,664,1,0,0,0,663,661,1,0,0,0,664,665,5,111,
		0,0,665,63,1,0,0,0,666,668,3,48,24,0,667,666,1,0,0,0,668,671,1,0,0,0,669,
		667,1,0,0,0,669,670,1,0,0,0,670,672,1,0,0,0,671,669,1,0,0,0,672,673,5,
		36,0,0,673,674,5,159,0,0,674,678,5,103,0,0,675,677,3,66,33,0,676,675,1,
		0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,681,1,0,0,0,
		680,678,1,0,0,0,681,682,5,104,0,0,682,65,1,0,0,0,683,685,3,48,24,0,684,
		683,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,689,1,
		0,0,0,688,686,1,0,0,0,689,690,3,162,81,0,690,691,5,159,0,0,691,692,5,111,
		0,0,692,67,1,0,0,0,693,695,3,48,24,0,694,693,1,0,0,0,695,698,1,0,0,0,696,
		694,1,0,0,0,696,697,1,0,0,0,697,699,1,0,0,0,698,696,1,0,0,0,699,700,3,
		162,81,0,700,701,5,159,0,0,701,702,5,111,0,0,702,711,1,0,0,0,703,705,3,
		48,24,0,704,703,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,
		0,707,709,1,0,0,0,708,706,1,0,0,0,709,711,3,80,40,0,710,696,1,0,0,0,710,
		706,1,0,0,0,711,69,1,0,0,0,712,715,5,159,0,0,713,714,5,125,0,0,714,716,
		3,160,80,0,715,713,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,718,5,112,
		0,0,718,71,1,0,0,0,719,720,5,58,0,0,720,722,6,36,-1,0,721,719,1,0,0,0,
		721,722,1,0,0,0,722,723,1,0,0,0,723,724,3,162,81,0,724,729,3,76,38,0,725,
		726,5,112,0,0,726,728,3,76,38,0,727,725,1,0,0,0,728,731,1,0,0,0,729,727,
		1,0,0,0,729,730,1,0,0,0,730,735,1,0,0,0,731,729,1,0,0,0,732,733,5,33,0,
		0,733,735,3,74,37,0,734,721,1,0,0,0,734,732,1,0,0,0,735,73,1,0,0,0,736,
		737,3,136,68,0,737,738,5,125,0,0,738,739,3,138,69,0,739,75,1,0,0,0,740,
		745,3,136,68,0,741,742,3,74,37,0,742,743,6,38,-1,0,743,745,1,0,0,0,744,
		740,1,0,0,0,744,741,1,0,0,0,745,77,1,0,0,0,746,748,3,48,24,0,747,746,1,
		0,0,0,748,751,1,0,0,0,749,747,1,0,0,0,749,750,1,0,0,0,750,754,1,0,0,0,
		751,749,1,0,0,0,752,753,5,39,0,0,753,755,6,39,-1,0,754,752,1,0,0,0,754,
		755,1,0,0,0,755,756,1,0,0,0,756,757,3,80,40,0,757,79,1,0,0,0,758,759,3,
		82,41,0,759,760,5,103,0,0,760,761,3,90,45,0,761,762,5,104,0,0,762,81,1,
		0,0,0,763,765,3,162,81,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,
		0,766,767,5,159,0,0,767,768,3,84,42,0,768,83,1,0,0,0,769,771,5,99,0,0,
		770,772,3,86,43,0,771,770,1,0,0,0,771,772,1,0,0,0,772,773,1,0,0,0,773,
		774,5,100,0,0,774,85,1,0,0,0,775,780,3,88,44,0,776,777,5,112,0,0,777,779,
		3,88,44,0,778,776,1,0,0,0,779,782,1,0,0,0,780,778,1,0,0,0,780,781,1,0,
		0,0,781,87,1,0,0,0,782,780,1,0,0,0,783,785,7,3,0,0,784,783,1,0,0,0,784,
		785,1,0,0,0,785,786,1,0,0,0,786,787,3,162,81,0,787,788,5,159,0,0,788,89,
		1,0,0,0,789,791,3,154,77,0,790,789,1,0,0,0,791,794,1,0,0,0,792,790,1,0,
		0,0,792,793,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,795,797,3,144,72,0,
		796,795,1,0,0,0,796,797,1,0,0,0,797,91,1,0,0,0,798,802,5,103,0,0,799,801,
		3,156,78,0,800,799,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,
		0,0,803,805,1,0,0,0,804,802,1,0,0,0,805,806,5,104,0,0,806,93,1,0,0,0,807,
		813,3,136,68,0,808,813,3,128,64,0,809,813,3,108,54,0,810,813,3,102,51,
		0,811,813,3,104,52,0,812,807,1,0,0,0,812,808,1,0,0,0,812,809,1,0,0,0,812,
		810,1,0,0,0,812,811,1,0,0,0,813,95,1,0,0,0,814,817,3,136,68,0,815,817,
		3,108,54,0,816,814,1,0,0,0,816,815,1,0,0,0,817,97,1,0,0,0,818,821,3,94,
		47,0,819,820,5,105,0,0,820,822,3,96,48,0,821,819,1,0,0,0,822,823,1,0,0,
		0,823,821,1,0,0,0,823,824,1,0,0,0,824,99,1,0,0,0,825,828,3,94,47,0,826,
		827,5,105,0,0,827,829,3,136,68,0,828,826,1,0,0,0,829,830,1,0,0,0,830,828,
		1,0,0,0,830,831,1,0,0,0,831,101,1,0,0,0,832,833,7,4,0,0,833,834,5,105,
		0,0,834,835,3,136,68,0,835,103,1,0,0,0,836,837,7,4,0,0,837,838,5,105,0,
		0,838,839,3,108,54,0,839,105,1,0,0,0,840,843,3,102,51,0,841,843,3,104,
		52,0,842,840,1,0,0,0,842,841,1,0,0,0,843,107,1,0,0,0,844,845,3,4,2,0,845,
		847,5,99,0,0,846,848,3,132,66,0,847,846,1,0,0,0,847,848,1,0,0,0,848,849,
		1,0,0,0,849,850,5,100,0,0,850,109,1,0,0,0,851,852,5,60,0,0,852,853,5,99,
		0,0,853,854,3,136,68,0,854,855,7,5,0,0,855,856,3,160,80,0,856,857,5,100,
		0,0,857,859,3,92,46,0,858,860,3,116,58,0,859,858,1,0,0,0,859,860,1,0,0,
		0,860,111,1,0,0,0,861,862,5,45,0,0,862,863,5,99,0,0,863,864,3,138,69,0,
		864,865,5,100,0,0,865,869,3,92,46,0,866,868,3,114,57,0,867,866,1,0,0,0,
		868,871,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,0,870,873,1,0,0,0,871,869,
		1,0,0,0,872,874,3,116,58,0,873,872,1,0,0,0,873,874,1,0,0,0,874,113,1,0,
		0,0,875,879,5,46,0,0,876,877,5,47,0,0,877,879,5,45,0,0,878,875,1,0,0,0,
		878,876,1,0,0,0,879,880,1,0,0,0,880,881,5,99,0,0,881,882,3,138,69,0,882,
		883,5,100,0,0,883,884,3,92,46,0,884,115,1,0,0,0,885,886,5,47,0,0,886,887,
		3,92,46,0,887,117,1,0,0,0,888,889,5,48,0,0,889,890,5,99,0,0,890,891,3,
		138,69,0,891,892,5,100,0,0,892,896,5,103,0,0,893,895,3,120,60,0,894,893,
		1,0,0,0,895,898,1,0,0,0,896,894,1,0,0,0,896,897,1,0,0,0,897,899,1,0,0,
		0,898,896,1,0,0,0,899,900,5,104,0,0,900,119,1,0,0,0,901,902,5,55,0,0,902,
		903,3,160,80,0,903,905,5,110,0,0,904,906,5,103,0,0,905,904,1,0,0,0,905,
		906,1,0,0,0,906,910,1,0,0,0,907,909,3,154,77,0,908,907,1,0,0,0,909,912,
		1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,912,910,1,0,0,
		0,913,915,3,152,76,0,914,916,5,104,0,0,915,914,1,0,0,0,915,916,1,0,0,0,
		916,121,1,0,0,0,917,918,5,51,0,0,918,919,5,99,0,0,919,920,3,138,69,0,920,
		921,5,100,0,0,921,922,3,92,46,0,922,123,1,0,0,0,923,924,5,49,0,0,924,925,
		5,99,0,0,925,926,3,138,69,0,926,927,5,111,0,0,927,928,3,138,69,0,928,929,
		5,111,0,0,929,930,3,138,69,0,930,931,5,100,0,0,931,932,3,92,46,0,932,125,
		1,0,0,0,933,934,5,50,0,0,934,935,3,92,46,0,935,936,5,51,0,0,936,937,3,
		128,64,0,937,127,1,0,0,0,938,939,5,99,0,0,939,940,3,138,69,0,940,941,5,
		100,0,0,941,129,1,0,0,0,942,943,3,162,81,0,943,945,5,99,0,0,944,946,3,
		132,66,0,945,944,1,0,0,0,945,946,1,0,0,0,946,947,1,0,0,0,947,948,5,100,
		0,0,948,131,1,0,0,0,949,954,3,138,69,0,950,951,5,112,0,0,951,953,3,138,
		69,0,952,950,1,0,0,0,953,956,1,0,0,0,954,952,1,0,0,0,954,955,1,0,0,0,955,
		133,1,0,0,0,956,954,1,0,0,0,957,958,7,6,0,0,958,135,1,0,0,0,959,960,5,
		159,0,0,960,137,1,0,0,0,961,962,6,69,-1,0,962,1030,3,136,68,0,963,1030,
		3,128,64,0,964,1030,3,158,79,0,965,1030,3,160,80,0,966,1030,3,106,53,0,
		967,1030,3,98,49,0,968,1030,3,108,54,0,969,1030,3,140,70,0,970,1030,3,
		130,65,0,971,972,5,108,0,0,972,1030,3,138,69,36,973,974,3,142,71,0,974,
		975,7,7,0,0,975,1030,1,0,0,0,976,977,7,7,0,0,977,1030,3,142,71,0,978,979,
		7,8,0,0,979,1030,3,138,69,33,980,981,3,142,71,0,981,982,5,125,0,0,982,
		983,3,138,69,12,983,1030,1,0,0,0,984,985,3,142,71,0,985,986,5,134,0,0,
		986,987,3,138,69,11,987,1030,1,0,0,0,988,989,3,142,71,0,989,990,5,135,
		0,0,990,991,3,138,69,10,991,1030,1,0,0,0,992,993,3,142,71,0,993,994,5,
		136,0,0,994,995,3,138,69,9,995,1030,1,0,0,0,996,997,3,142,71,0,997,998,
		5,137,0,0,998,999,3,138,69,8,999,1030,1,0,0,0,1000,1001,3,142,71,0,1001,
		1002,5,138,0,0,1002,1003,3,138,69,7,1003,1030,1,0,0,0,1004,1005,3,142,
		71,0,1005,1006,5,139,0,0,1006,1007,3,138,69,6,1007,1030,1,0,0,0,1008,1009,
		3,142,71,0,1009,1010,5,140,0,0,1010,1011,3,138,69,5,1011,1030,1,0,0,0,
		1012,1013,3,142,71,0,1013,1014,5,141,0,0,1014,1015,3,138,69,4,1015,1030,
		1,0,0,0,1016,1017,3,142,71,0,1017,1018,5,142,0,0,1018,1019,3,138,69,3,
		1019,1030,1,0,0,0,1020,1021,3,142,71,0,1021,1022,5,143,0,0,1022,1023,3,
		138,69,2,1023,1030,1,0,0,0,1024,1025,5,99,0,0,1025,1026,3,162,81,0,1026,
		1027,5,100,0,0,1027,1028,3,138,69,1,1028,1030,1,0,0,0,1029,961,1,0,0,0,
		1029,963,1,0,0,0,1029,964,1,0,0,0,1029,965,1,0,0,0,1029,966,1,0,0,0,1029,
		967,1,0,0,0,1029,968,1,0,0,0,1029,969,1,0,0,0,1029,970,1,0,0,0,1029,971,
		1,0,0,0,1029,973,1,0,0,0,1029,976,1,0,0,0,1029,978,1,0,0,0,1029,980,1,
		0,0,0,1029,984,1,0,0,0,1029,988,1,0,0,0,1029,992,1,0,0,0,1029,996,1,0,
		0,0,1029,1000,1,0,0,0,1029,1004,1,0,0,0,1029,1008,1,0,0,0,1029,1012,1,
		0,0,0,1029,1016,1,0,0,0,1029,1020,1,0,0,0,1029,1024,1,0,0,0,1030,1096,
		1,0,0,0,1031,1032,10,32,0,0,1032,1033,5,131,0,0,1033,1095,3,138,69,33,
		1034,1035,10,31,0,0,1035,1036,5,130,0,0,1036,1095,3,138,69,32,1037,1038,
		10,30,0,0,1038,1039,5,129,0,0,1039,1095,3,138,69,31,1040,1041,10,29,0,
		0,1041,1042,5,128,0,0,1042,1095,3,138,69,30,1043,1044,10,28,0,0,1044,1045,
		5,126,0,0,1045,1095,3,138,69,29,1046,1047,10,27,0,0,1047,1048,5,127,0,
		0,1048,1095,3,138,69,28,1049,1050,10,26,0,0,1050,1051,5,119,0,0,1051,1095,
		3,138,69,27,1052,1053,10,25,0,0,1053,1054,5,120,0,0,1054,1095,3,138,69,
		26,1055,1056,10,24,0,0,1056,1057,5,124,0,0,1057,1095,3,138,69,25,1058,
		1059,10,23,0,0,1059,1060,5,123,0,0,1060,1095,3,138,69,24,1061,1062,10,
		22,0,0,1062,1063,5,121,0,0,1063,1095,3,138,69,23,1064,1065,10,21,0,0,1065,
		1066,5,117,0,0,1066,1095,3,138,69,22,1067,1068,10,20,0,0,1068,1069,5,118,
		0,0,1069,1095,3,138,69,21,1070,1071,10,19,0,0,1071,1072,5,122,0,0,1072,
		1095,3,138,69,19,1073,1074,10,18,0,0,1074,1075,5,147,0,0,1075,1095,3,138,
		69,18,1076,1077,10,17,0,0,1077,1078,5,148,0,0,1078,1095,3,138,69,17,1079,
		1080,10,16,0,0,1080,1081,5,145,0,0,1081,1095,3,138,69,17,1082,1083,10,
		15,0,0,1083,1084,5,144,0,0,1084,1095,3,138,69,16,1085,1086,10,14,0,0,1086,
		1087,5,146,0,0,1087,1095,3,138,69,15,1088,1089,10,13,0,0,1089,1090,5,109,
		0,0,1090,1091,3,138,69,0,1091,1092,5,110,0,0,1092,1093,3,138,69,13,1093,
		1095,1,0,0,0,1094,1031,1,0,0,0,1094,1034,1,0,0,0,1094,1037,1,0,0,0,1094,
		1040,1,0,0,0,1094,1043,1,0,0,0,1094,1046,1,0,0,0,1094,1049,1,0,0,0,1094,
		1052,1,0,0,0,1094,1055,1,0,0,0,1094,1058,1,0,0,0,1094,1061,1,0,0,0,1094,
		1064,1,0,0,0,1094,1067,1,0,0,0,1094,1070,1,0,0,0,1094,1073,1,0,0,0,1094,
		1076,1,0,0,0,1094,1079,1,0,0,0,1094,1082,1,0,0,0,1094,1085,1,0,0,0,1094,
		1088,1,0,0,0,1095,1098,1,0,0,0,1096,1094,1,0,0,0,1096,1097,1,0,0,0,1097,
		139,1,0,0,0,1098,1096,1,0,0,0,1099,1103,3,136,68,0,1100,1103,3,106,53,
		0,1101,1103,3,108,54,0,1102,1099,1,0,0,0,1102,1100,1,0,0,0,1102,1101,1,
		0,0,0,1103,1104,1,0,0,0,1104,1105,5,101,0,0,1105,1106,3,138,69,0,1106,
		1107,5,102,0,0,1107,141,1,0,0,0,1108,1113,3,140,70,0,1109,1113,3,136,68,
		0,1110,1113,3,102,51,0,1111,1113,3,100,50,0,1112,1108,1,0,0,0,1112,1109,
		1,0,0,0,1112,1110,1,0,0,0,1112,1111,1,0,0,0,1113,143,1,0,0,0,1114,1115,
		5,44,0,0,1115,1116,3,138,69,0,1116,1117,5,111,0,0,1117,145,1,0,0,0,1118,
		1119,5,52,0,0,1119,1120,5,111,0,0,1120,147,1,0,0,0,1121,1122,5,53,0,0,
		1122,1123,5,111,0,0,1123,149,1,0,0,0,1124,1125,5,54,0,0,1125,1126,5,111,
		0,0,1126,151,1,0,0,0,1127,1132,3,146,73,0,1128,1132,3,144,72,0,1129,1132,
		3,148,74,0,1130,1132,3,150,75,0,1131,1127,1,0,0,0,1131,1128,1,0,0,0,1131,
		1129,1,0,0,0,1131,1130,1,0,0,0,1132,153,1,0,0,0,1133,1134,3,72,36,0,1134,
		1135,5,111,0,0,1135,1147,1,0,0,0,1136,1137,3,138,69,0,1137,1138,5,111,
		0,0,1138,1147,1,0,0,0,1139,1147,3,92,46,0,1140,1147,3,112,56,0,1141,1147,
		3,118,59,0,1142,1147,3,122,61,0,1143,1147,3,124,62,0,1144,1147,3,126,63,
		0,1145,1147,3,110,55,0,1146,1133,1,0,0,0,1146,1136,1,0,0,0,1146,1139,1,
		0,0,0,1146,1140,1,0,0,0,1146,1141,1,0,0,0,1146,1142,1,0,0,0,1146,1143,
		1,0,0,0,1146,1144,1,0,0,0,1146,1145,1,0,0,0,1147,155,1,0,0,0,1148,1151,
		3,154,77,0,1149,1151,3,152,76,0,1150,1148,1,0,0,0,1150,1149,1,0,0,0,1151,
		157,1,0,0,0,1152,1159,5,153,0,0,1153,1159,5,154,0,0,1154,1159,5,155,0,
		0,1155,1159,5,156,0,0,1156,1159,5,157,0,0,1157,1159,5,158,0,0,1158,1152,
		1,0,0,0,1158,1153,1,0,0,0,1158,1154,1,0,0,0,1158,1155,1,0,0,0,1158,1156,
		1,0,0,0,1158,1157,1,0,0,0,1159,159,1,0,0,0,1160,1163,3,158,79,0,1161,1163,
		3,4,2,0,1162,1160,1,0,0,0,1162,1161,1,0,0,0,1163,161,1,0,0,0,1164,1171,
		3,166,83,0,1165,1167,5,101,0,0,1166,1168,5,156,0,0,1167,1166,1,0,0,0,1167,
		1168,1,0,0,0,1168,1169,1,0,0,0,1169,1170,5,102,0,0,1170,1172,6,81,-1,0,
		1171,1165,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,1174,6,81,-1,
		0,1174,1198,1,0,0,0,1175,1182,3,168,84,0,1176,1178,5,101,0,0,1177,1179,
		5,156,0,0,1178,1177,1,0,0,0,1178,1179,1,0,0,0,1179,1180,1,0,0,0,1180,1181,
		5,102,0,0,1181,1183,6,81,-1,0,1182,1176,1,0,0,0,1182,1183,1,0,0,0,1183,
		1184,1,0,0,0,1184,1185,6,81,-1,0,1185,1198,1,0,0,0,1186,1193,3,164,82,
		0,1187,1189,5,101,0,0,1188,1190,5,156,0,0,1189,1188,1,0,0,0,1189,1190,
		1,0,0,0,1190,1191,1,0,0,0,1191,1192,5,102,0,0,1192,1194,6,81,-1,0,1193,
		1187,1,0,0,0,1193,1194,1,0,0,0,1194,1195,1,0,0,0,1195,1196,6,81,-1,0,1196,
		1198,1,0,0,0,1197,1164,1,0,0,0,1197,1175,1,0,0,0,1197,1186,1,0,0,0,1198,
		163,1,0,0,0,1199,1200,3,4,2,0,1200,165,1,0,0,0,1201,1209,5,61,0,0,1202,
		1209,5,62,0,0,1203,1209,5,63,0,0,1204,1209,5,64,0,0,1205,1209,5,65,0,0,
		1206,1209,5,66,0,0,1207,1209,5,67,0,0,1208,1201,1,0,0,0,1208,1202,1,0,
		0,0,1208,1203,1,0,0,0,1208,1204,1,0,0,0,1208,1205,1,0,0,0,1208,1206,1,
		0,0,0,1208,1207,1,0,0,0,1209,167,1,0,0,0,1210,1242,5,68,0,0,1211,1242,
		5,69,0,0,1212,1242,5,70,0,0,1213,1242,5,71,0,0,1214,1242,5,72,0,0,1215,
		1242,5,73,0,0,1216,1242,5,74,0,0,1217,1242,5,75,0,0,1218,1242,5,76,0,0,
		1219,1242,5,77,0,0,1220,1242,5,78,0,0,1221,1242,5,79,0,0,1222,1242,5,80,
		0,0,1223,1242,5,81,0,0,1224,1242,5,82,0,0,1225,1242,5,83,0,0,1226,1242,
		5,84,0,0,1227,1242,5,85,0,0,1228,1242,5,86,0,0,1229,1242,5,87,0,0,1230,
		1242,5,88,0,0,1231,1242,5,89,0,0,1232,1242,5,90,0,0,1233,1242,5,91,0,0,
		1234,1242,5,92,0,0,1235,1242,5,94,0,0,1236,1242,5,93,0,0,1237,1242,5,95,
		0,0,1238,1242,5,96,0,0,1239,1242,5,97,0,0,1240,1242,5,98,0,0,1241,1210,
		1,0,0,0,1241,1211,1,0,0,0,1241,1212,1,0,0,0,1241,1213,1,0,0,0,1241,1214,
		1,0,0,0,1241,1215,1,0,0,0,1241,1216,1,0,0,0,1241,1217,1,0,0,0,1241,1218,
		1,0,0,0,1241,1219,1,0,0,0,1241,1220,1,0,0,0,1241,1221,1,0,0,0,1241,1222,
		1,0,0,0,1241,1223,1,0,0,0,1241,1224,1,0,0,0,1241,1225,1,0,0,0,1241,1226,
		1,0,0,0,1241,1227,1,0,0,0,1241,1228,1,0,0,0,1241,1229,1,0,0,0,1241,1230,
		1,0,0,0,1241,1231,1,0,0,0,1241,1232,1,0,0,0,1241,1233,1,0,0,0,1241,1234,
		1,0,0,0,1241,1235,1,0,0,0,1241,1236,1,0,0,0,1241,1237,1,0,0,0,1241,1238,
		1,0,0,0,1241,1239,1,0,0,0,1241,1240,1,0,0,0,1242,169,1,0,0,0,125,173,179,
		183,188,194,200,214,223,227,250,268,273,281,287,295,303,309,314,322,332,
		340,348,357,364,370,378,384,390,397,401,410,414,419,427,433,439,445,451,
		457,465,473,479,485,491,497,503,510,516,520,524,527,533,537,541,555,559,
		561,571,576,586,589,592,596,612,617,625,633,643,651,661,669,678,686,696,
		706,710,715,721,729,734,744,749,754,764,771,780,784,792,796,802,812,816,
		823,830,842,847,859,869,873,878,896,905,910,915,945,954,1029,1094,1096,
		1102,1112,1131,1146,1150,1158,1162,1167,1171,1178,1182,1189,1193,1197,
		1208,1241
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SPSL.Language
